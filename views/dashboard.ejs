<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard - Terp Notes</title>
    <link rel="stylesheet" href="/styles/main.css" />
</head>

<body>
    <header class="topbar">
        <h2>Terp Notes</h2>
        <div class="user-info">
            Welcome, <strong>
                <%= firstname %>
            </strong>
            <span class="user-role role-<%= user.role %>">
                <%= user.role %>
            </span>
            <% if (user.role==='admin' ) { %>
                | <a href="/admin" class="logout-btn">Admin Panel</a>
                <% } %>
                    | <a href="/profile" class="logout-btn">My Profile</a>
                    | <a href="/logout" class="logout-btn">Logout</a>
        </div>
    </header>

    <main class="container">
        <!-- Announcements Section -->
        <% if (announcements && announcements.length > 0) { %>
            <% announcements.forEach(announcement=> { %>
                <div class="announcement-banner announcement-banner-<%= announcement.type %>">
                    <div style="flex: 1; font-weight: 600;">
                        <%= announcement.message %>
                    </div>
                </div>
                <% }); %>
                    <% } %>

                        <div class="dashboard-controls">
                            <div class="search-bar">
                                <input type="text" id="searchInput" placeholder="Search notes..." />
                                <button type="button" onclick="applyFilters()">Search</button>
                            </div>

                            <!-- Sort Options -->
                            <div style="display: flex; align-items: center; gap: 0.75rem; margin: 0.5rem 0;">
                                <label style="color: #374151; font-weight: 600; font-size: 0.875rem;">Sort by:</label>
                                <select id="sortFilter" class="filter-select" onchange="applyFilters()"
                                    style="flex: 0 0 auto; min-width: 180px;">
                                    <option value="newest">üìÖ Newest First</option>
                                    <option value="oldest">üìÖ Oldest First</option>
                                    <option value="popular">üî• Most Downloaded</option>
                                    <option value="name">üìù Name (A-Z)</option>
                                    <option value="size-desc">üìä Size (Largest)</option>
                                    <option value="size-asc">üìä Size (Smallest)</option>
                                </select>
                            </div>

                            <div
                                style="display: flex; justify-content: space-between; align-items: center; margin: 0.5rem 0; flex-wrap: wrap; gap: 1rem;">
                                <p style="color: #6B7280; font-size: 0.875rem; margin: 0;">
                                    üí° <strong>Tip:</strong> Click Category, Semester, Year, or Class filters to select multiple options
                                </p>
                                <div style="display: flex; align-items: center; gap: 1rem;">
                                    <!-- View Toggle -->
                                    <div
                                        style="display: flex; gap: 0.5rem; background: #F3F4F6; padding: 4px; border-radius: 8px;">
                                        <button id="groupedViewBtn" onclick="switchView('grouped')"
                                            style="padding: 6px 12px; border: none; background: var(--umd-red); color: white; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            üìÅ Grouped
                                        </button>
                                        <button id="gridViewBtn" onclick="switchView('grid')"
                                            style="padding: 6px 12px; border: none; background: transparent; color: #6B7280; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            üìä Grid
                                        </button>
                                        <button id="listViewBtn" onclick="switchView('list')"
                                            style="padding: 6px 12px; border: none; background: transparent; color: #6B7280; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            üìã List
                                        </button>
                                    </div>
                                    <label
                                        style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer; font-size: 0.875rem; color: var(--umd-red); font-weight: 600;">
                                        <input type="checkbox" id="myFilesToggle" onchange="applyFilters()"
                                            style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--umd-red);">
                                        <span>üìÅ Show Only My Files</span>
                                    </label>
                                </div>
                            </div>

                            <div class="filter-controls">
                                <!-- Category Multi-Select Dropdown (1st) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="categoryBtn"
                                        onclick="toggleDropdown('category')">
                                        <span id="categoryLabel">All Categories</span>
                                        <span class="dropdown-arrow">‚ñº</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="categoryDropdown">
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Exam"
                                                onchange="updateMultiSelect('category')">
                                            <span>üìù Exam</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Lecture Notes"
                                                onchange="updateMultiSelect('category')">
                                            <span>üìì Lecture Notes</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Homework"
                                                onchange="updateMultiSelect('category')">
                                            <span>üìã Homework</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Study Guide"
                                                onchange="updateMultiSelect('category')">
                                            <span>üìö Study Guide</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Cheat Sheet"
                                                onchange="updateMultiSelect('category')">
                                            <span>üìÑ Cheat Sheet</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Project"
                                                onchange="updateMultiSelect('category')">
                                            <span>üíª Project</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Lab"
                                                onchange="updateMultiSelect('category')">
                                            <span>üî¨ Lab</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Textbook"
                                                onchange="updateMultiSelect('category')">
                                            <span>üìñ Textbook</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Practice Problems"
                                                onchange="updateMultiSelect('category')">
                                            <span>‚úèÔ∏è Practice Problems</span>
                                        </label>
                                        <label class="multi-select-option">
                                            <input type="checkbox" value="Other"
                                                onchange="updateMultiSelect('category')">
                                            <span>üìé Other</span>
                                        </label>
                                    </div>
                                </div>

                                <!-- Semester Multi-Select Dropdown (2nd) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="semesterBtn"
                                        onclick="toggleDropdown('semester')">
                                        <span id="semesterLabel">All Semesters</span>
                                        <span class="dropdown-arrow">‚ñº</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="semesterDropdown">
                                        <% semesters.forEach(semester=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= semester %>"
                                                    onchange="updateMultiSelect('semester')">
                                                <span>
                                                    <%= semester %>
                                                </span>
                                            </label>
                                        <% }); %>
                                    </div>
                                </div>

                                <!-- Year Multi-Select Dropdown (3rd) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="yearBtn"
                                        onclick="toggleDropdown('year')">
                                        <span id="yearLabel">All Years</span>
                                        <span class="dropdown-arrow">‚ñº</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="yearDropdown">
                                        <% years.forEach(year=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= year %>"
                                                    onchange="updateMultiSelect('year')">
                                                <span>
                                                    <%= year %>
                                                </span>
                                            </label>
                                            <% }); %>
                                    </div>
                                </div>

                                <!-- Major Multi-Select Dropdown (4th) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="majorBtn"
                                        onclick="toggleDropdown('major')">
                                        <span id="majorLabel">All Majors</span>
                                        <span class="dropdown-arrow">‚ñº</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="majorDropdown">
                                        <% majors.forEach(major=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= major %>"
                                                    onchange="updateMultiSelect('major')">
                                                <span>
                                                    üìÅ <%= major %>
                                                </span>
                                            </label>
                                            <% }); %>
                                    </div>
                                </div>

                                <!-- Class Multi-Select Dropdown (5th) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="classBtn"
                                        onclick="toggleDropdown('class')">
                                        <span id="classLabel">All Classes</span>
                                        <span class="dropdown-arrow">‚ñº</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="classDropdown">
                                        <% classCodes.forEach(code=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= code %>"
                                                    data-major="<%= code.replace(/[0-9]/g, '').trim() %>"
                                                    onchange="updateMultiSelect('class')">
                                                <span>
                                                    <%= code %>
                                                </span>
                                            </label>
                                            <% }); %>
                                    </div>
                                </div>

                                <!-- Professor Multi-Select Dropdown (6th) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="professorBtn"
                                        onclick="toggleDropdown('professor')">
                                        <span id="professorLabel">All Professors</span>
                                        <span class="dropdown-arrow">‚ñº</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="professorDropdown">
                                        <div class="search-box">
                                            <input type="text" id="professorSearch" placeholder="üîç Search professors..."
                                                   onkeyup="filterProfessorOptions(this.value)" />
                                        </div>
                                        <div id="professorList">
                                            <!-- Options will be populated dynamically -->
                                        </div>
                                    </div>
                            </div>
                        </div>

                            <!-- Active Filters Display (Grid View Only) -->
                            <div id="activeFilters" style="display: none; margin: 1rem 0; padding: 0.75rem; background: #F9FAFB; border-radius: 8px; border: 1px solid #E5E7EB;">
                                <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 0.5rem;">
                                    <div style="display: flex; align-items: center; gap: 0.5rem; flex-wrap: wrap;">
                                        <span style="font-weight: 600; color: #374151; font-size: 0.875rem;">Active Filters:</span>
                                        <div id="filterTags" style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                                            <!-- Hidden filter to maintain consistent width -->
                                            <span style="display: none;" id="hiddenFilter">All Files</span>
                                </div>
                                    </div>
                                    <button onclick="clearAllFilters()" style="background: var(--umd-red); color: white; border: none; padding: 4px 12px; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                        Clear All
                                    </button>
                                </div>
                            </div>
                        </div>

                        <section class="file-list">
                            <% if (files.length > 0) { %>
                                    <!-- Grid View (Hidden by default) -->
                                    <div id="gridView" class="file-grid" style="display: none;">
                                        <% files.forEach(file=> { %>
                                            <div class="file-card animate-fade-in" data-class="<%= file.classCode %>"
                                                data-major="<%= file.major || '' %>"
                                                data-semester="<%= file.semester || '' %>"
                                                data-year="<%= file.year || '' %>"
                                                data-category="<%= (file.category || '').toLowerCase() %>"
                                                data-professor="<%= (file.professor || '').toLowerCase() %>"
                                                data-uploader="<%= file.uploadedBy %>"
                                                data-name="<%= file.originalName.toLowerCase() %>"
                                                data-date="<%= new Date(file.uploadDate).getTime() %>"
                                                data-downloads="<%= file.downloadCount || 0 %>"
                                                data-size="<%= file.size || 0 %>">
                                                <div class="file-header" style="position: relative;">
                                                    <div style="position: absolute; top: 0.5rem; right: 0.5rem; background: #FEF3C7; color: #92400E; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600; cursor: help; z-index: 10;" title="<%= file.downloadCount || 0 %> downloads">
                                                        <%= file.downloadCount || 0 %>
                                                    </div>
                                                    <%
                                                        // Dynamic file icon based on mimetype
                                                        let fileIcon = 'üìÑ';
                                                        let fileTypeLabel = '';
                                                        if (file.mimetype) {
                                                            if (file.mimetype.includes('pdf')) {
                                                                fileIcon = 'üìï';
                                                                fileTypeLabel = 'PDF';
                                                            } else if (file.mimetype.includes('word') || file.mimetype.includes('document')) {
                                                                fileIcon = 'üìò';
                                                                fileTypeLabel = 'DOC';
                                                            } else if (file.mimetype.includes('presentation') || file.mimetype.includes('powerpoint')) {
                                                                fileIcon = 'üìô';
                                                                fileTypeLabel = 'PPT';
                                                            } else if (file.mimetype.includes('spreadsheet') || file.mimetype.includes('excel')) {
                                                                fileIcon = 'üìó';
                                                                fileTypeLabel = 'XLS';
                                                            } else if (file.mimetype.includes('image')) {
                                                                fileIcon = 'üñºÔ∏è';
                                                                fileTypeLabel = 'IMG';
                                                            } else if (file.mimetype.includes('text')) {
                                                                fileIcon = 'üìÉ';
                                                                fileTypeLabel = 'TXT';
                                                            } else if (file.mimetype.includes('zip') || file.mimetype.includes('compressed')) {
                                                                fileIcon = 'üì¶';
                                                                fileTypeLabel = 'ZIP';
                                                            } else if (file.mimetype.includes('python')) {
                                                                fileIcon = 'üêç';
                                                                fileTypeLabel = 'PY';
                                                            } else if (file.mimetype.includes('java')) {
                                                                fileIcon = '‚òï';
                                                                fileTypeLabel = 'JAVA';
                                                            }
                                                        }
                                                    %>
                                                        <div class="file-icon" style="font-size: 2.5rem;">
                                                            <%= fileIcon %>
                                                        </div>
                                                        <div class="file-info">
                                                            <h3 style="margin: 0 0 0.5rem 0; font-size: 1rem;">
                                                                <%= file.originalName %>
                                                            </h3>
                                                            <div
                                                                style="display: flex; flex-wrap: wrap; gap: 0.5rem; align-items: center;">
                                                                        <% if (file.category) { let
                                                                            categoryClass='category-other' ; if
                                                                            (file.category==='Exam' ) {
                                                                                categoryClass = 'category-exam';
                                                                            } else if
                                                                            (file.category==='Lecture Notes' ) {
                                                                            categoryClass='category-lecture' ; } else if
                                                                            (file.category==='Homework' ) {
                                                                            categoryClass='category-homework' ; } else
                                                                            if (file.category==='Study Guide' ) {
                                                                            categoryClass='category-study' ; } else if
                                                                            (file.category==='Cheat Sheet' ) {
                                                                            categoryClass='category-cheat' ; } else if
                                                                            (file.category==='Project' ) {
                                                                            categoryClass='category-project' ; } else if
                                                                            (file.category==='Lab' ) {
                                                                            categoryClass='category-lab' ; } %>
                                                                            <span class="category-badge <%= categoryClass %>">
                                                                                <%= file.category %>
                                                                            </span>
                                                                            <% } %>
                                                                                        <%
                                                                                            // Calculate days ago
                                                                                            const uploadDate = new Date(file.uploadDate);
                                                                                            const now = new Date();
                                                                                            const daysAgo = Math.floor((now - uploadDate) / (1000 * 60 * 60 * 24));
                                                                                        %>
                                                                                            <% if (daysAgo <= 7) { %>
                                                                                                <span
                                                                                                    style="background: #D1FAE5; color: #065F46; padding: 2px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">
                                                                                                    üÜï New
                                                                                                </span>
                                                                                                <% } %>
                                                                                                    <%
                                                                                                        const sizeKB = file.size / 1024;
                                                                                                        let sizeClass = 'size-normal';
                                                                                                        let sizeLabel = '';
                                                                                                        if (sizeKB < 1024) {
                                                                                                            sizeLabel = sizeKB.toFixed(0) + ' KB';
                                                                                                        } else {
                                                                                                            sizeLabel = (sizeKB / 1024).toFixed(1) + ' MB';
                                                                                                            if (sizeKB / 1024 > 10) {
                                                                                                                sizeClass = 'size-large';
                                                                                                            }
                                                                                                        }
                                                                                                    %>
                                                                                                        <span class="size-badge <%= sizeClass %>">
                                                                                                            <%= sizeLabel %>
                                                                                                        </span>
                                                            </div>
                                                        </div>
                                                </div>

                                                <div class="file-meta">
                                                    <% if (file.virusScanStatus) { %>
                                                        <div class="file-meta-item">
                                                            <strong>Security:</strong>
                                                            <% if (file.virusScanStatus==='clean' ) { %>
                                                                <span class="scan-badge scan-clean">‚úì Virus
                                                                    Scanned</span>
                                                                <% } else if (file.virusScanStatus==='pending' ) { %>
                                                                    <span class="scan-badge scan-pending">‚è≥
                                                                        Scanning...</span>
                                                                    <% } else if (file.virusScanStatus==='error' ) { %>
                                                                        <span class="scan-badge scan-error">‚ö†Ô∏è Scan
                                                                            Error</span>
                                                                        <% } %>
                                                        </div>
                                                        <% } %>
                                                            <% if (file.major) { %>
                                                                <div class="file-meta-item">
                                                                    <strong>Major:</strong> <span class="major-badge">
                                                                        <%= file.major %>
                                                                    </span>
                                                                </div>
                                                                <% } %>
                                                                    <% if (file.classCode) { %>
                                                                        <div class="file-meta-item">
                                                                            <strong>Class:</strong> <span
                                                                                class="class-code-badge">
                                                                                <%= file.classCode %>
                                                                            </span>
                                                                        </div>
                                                                        <% } %>
                                                                            <% if (file.professor) { %>
                                                                                <div class="file-meta-item">
                                                                                    <strong>Professor:</strong>
                                                                                    <%= file.professor %>
                                                                                </div>
                                                                                <% } %>
                                                                                    <% if (file.semester && file.year) {
                                                                                        %>
                                                                                        <div class="file-meta-item">
                                                                                            <strong>Term:</strong>
                                                                                            <%= file.semester %>
                                                                                                <%= file.year %>
                                                                                        </div>
                                                                                        <% } %>
                                                                                            <div class="file-meta-item">
                                                                                                <strong>Uploaded
                                                                                                    by:</strong>
                                                                                                <%= file.uploadedBy %>
                                                                                            </div>
                                                                                            <div class="file-meta-item">
                                                                                                <strong>Size:</strong>
                                                                                                <%= (file.size /
                                                                                                    1024).toFixed(1) %>
                                                                                                    KB
                                                                                            </div>
                                                                                            <% if (file.description) {
                                                                                                %>
                                                                                                <div
                                                                                                    class="file-meta-item">
                                                                                                    <strong>Description:</strong>
                                                                                                    <%= file.description
                                                                                                        %>
                                                                                                </div>
                                                                                                <% } %>
                                                </div>

                                                <div class="file-actions">
                                                    <a href="/download/<%= encodeURIComponent(file.filename) %>"
                                                        class="button primary" target="_blank">Download</a>
                                                    <% if (user.role==='viewer' ) { %>
                                                        <button class="button danger disabled"
                                                            onclick="showViewerAlert(); return false;"
                                                            title="View-only mode">Delete</button>
                                                        <% } else if (user.role==='admin' ||
                                                            file.uploadedBy===user.userid) { %>
                                                            <a href="/delete/<%= encodeURIComponent(file.filename) %>"
                                                                class="button danger"
                                                                onclick="return confirm('Are you sure you want to delete this file?')">Delete</a>
                                                            <% } else { %>
                                                                <button class="button danger disabled" disabled
                                                                    title="You can only delete your own files">Delete</button>
                                                                <% } %>
                                                                    <button class="button secondary small report-btn"
                                                                        data-filename="<%= file.filename %>"
                                                                        data-original-name="<%= file.originalName %>">üö©
                                                                        Report</button>
                                                </div>
                                            </div>
                                            <% }); %>
                                    </div>

                                    <!-- Grouped View (Default) -->
                                    <div id="groupedView" class="file-grid" style="display: block;">
                                        <!-- This will be populated by JavaScript -->
                                    </div>

                                    <!-- List View (Hidden by default) -->
                                    <div id="listView" class="file-list" style="display: none;">
                                        <!-- This will be populated by JavaScript -->
                                    </div>
                                    <% } %>

                                    <!-- Empty state will be handled by JavaScript -->
                        </section>

                        <section class="upload-section">
                            <% if (user.role==='viewer' ) { %>
                                <div class="upload-disabled">
                                    <div class="upload-disabled-content">
                                        <div class="upload-disabled-icon">üîí</div>
                                        <h4>Upload Restricted - View-Only Mode</h4>
                                        <p>Your account has been set to view-only access. You can download files but
                                            cannot upload or
                                            delete.</p>
                                        <p style="margin-top: 1rem;">Contact an administrator if you need upload/delete
                                            permissions.</p>
                                        <button class="button primary" style="margin-top: 1rem;"
                                            onclick="showViewerAlert()">
                                            Learn More
                                        </button>
                                    </div>
                                </div>
                                <% } else { %>
                                    <div class="upload-header">
                                        <h3>Upload Notes</h3>
                                        <p>Share your class notes with fellow Terps. Select one or multiple files!</p>
                                        <div class="file-type-notice">
                                            <strong>Supported File Types:</strong> Documents (.pdf, .docx, .pptx,
                                            .xlsx, .txt),
                                            Images (.jpg, .png, .gif, .svg), Code files (.py, .java, .c, .cpp, .js,
                                            .html, .css),
                                            Archives (.zip)
                                            <br>
                                            <small style="color: #6B7280; margin-top: 0.5rem; display: block;">
                                                üîí For your safety, we currently limit file types to those commonly used
                                                in academic
                                                settings. We're actively working on implementing virus scanning to
                                                support additional
                                                file formats in the future!
                                            </small>
                                        </div>
                                    </div>

                                    <form action="/upload" method="POST" enctype="multipart/form-data"
                                        class="upload-form" id="uploadForm">
                                        <div class="form-group">
                                            <label for="documents" class="form-label">
                                                Select Files<span class="required">*</span>
                                            </label>
                                            <div class="upload-drop-zone" id="dropZone">
                                                <input type="file" name="documents" id="documents" required
                                                    class="file-input-hidden" multiple />
                                                <div class="drop-zone-content">
                                                    <div class="drop-zone-icon">üìÅ</div>
                                                    <p class="drop-zone-text">
                                                        <strong>Click to browse</strong> or drag and drop files here
                                                    </p>
                                                    <p class="drop-zone-hint">
                                                        Upload one or multiple files (up to 50 files, 100MB each)
                                                    </p>
                                                </div>
                                                <div class="selected-files" id="selectedFiles"></div>
                                            </div>
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="classCode" class="form-label">Class Code<span
                                                        class="required">*</span></label>
                                                <div class="custom-dropdown-wrapper">
                                                    <input type="text" name="classCode" id="classCode" required
                                                        class="form-input" placeholder="e.g. CMSC330, HIST000"
                                                        autocomplete="off" />
                                                    <div class="custom-dropdown" id="coursesDropdown"></div>
                                                </div>
                                                <small class="form-help" id="courseInfo"
                                                    style="color: #6B7280; font-size: 0.75rem;">
                                                    Start typing to see course suggestions...
                                                </small>
                                            </div>

                                            <div class="form-group">
                                                <label for="professor" class="form-label">Professor<span
                                                        class="required">*</span></label>
                                                <div class="custom-dropdown-wrapper">
                                                    <input type="text" name="professor" id="professor" required
                                                        class="form-input" placeholder="e.g., Dr. Nelson, Prof. Smith"
                                                        autocomplete="off" />
                                                    <div class="custom-dropdown" id="professorsDropdown"></div>
                                                </div>
                                                <small class="form-help" id="professorHelp"
                                                    style="color: #9CA3AF; font-size: 0.75rem;">
                                                    Type 2+ characters to search all UMD professors, or select a course first
                                                </small>
                                            </div>
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="semester" class="form-label">Semester<span
                                                        class="required">*</span></label>
                                                <select name="semester" id="semester" required class="form-input">
                                                    <option value="">Select semester</option>
                                                    <option value="Fall">Fall</option>
                                                    <option value="Spring">Spring</option>
                                                    <option value="Summer">Summer</option>
                                                    <option value="Winter">Winter</option>
                                                </select>
                                            </div>

                                            <div class="form-group">
                                                <label for="year" class="form-label">Year<span
                                                        class="required">*</span></label>
                                                <select name="year" id="year" required class="form-input">
                                                    <option value="">Select year</option>
                                                    <% for (let y=new Date().getFullYear(); y >= 2020; y--) { %>
                                                        <option value="<%= y %>">
                                                            <%= y %>
                                                        </option>
                                                        <% } %>
                                                </select>
                                                <small class="form-help" style="color: #9CA3AF; font-size: 0.75rem;">
                                                    Past semesters only (2020-2025)
                                                </small>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label for="category" class="form-label">Category<span
                                                    class="required">*</span></label>
                                            <select name="category" id="category" required class="form-input">
                                                <option value="">Select category</option>
                                                <option value="Exam">üìù Exam</option>
                                                <option value="Lecture Notes">üìì Lecture Notes</option>
                                                <option value="Homework">üìã Homework</option>
                                                <option value="Study Guide">üìö Study Guide</option>
                                                <option value="Cheat Sheet">üìÑ Cheat Sheet</option>
                                                <option value="Project">üíª Project</option>
                                                <option value="Lab">üî¨ Lab</option>
                                                <option value="Textbook">üìñ Textbook</option>
                                                <option value="Practice Problems">‚úèÔ∏è Practice Problems</option>
                                                <option value="Other">üìé Other</option>
                                            </select>
                                            <small class="form-help">
                                                Help others find your notes by categorizing them
                                            </small>
                                        </div>

                                        <div class="form-group">
                                            <label for="description" class="form-label">Description<span
                                                    class="required">*</span></label>
                                            <textarea name="description" id="description" class="form-textarea" required
                                                placeholder="e.g., Week 1 Lectures, Midterm Study Guide, Chapter 3 Summary"
                                                rows="2"></textarea>
                                            <small class="form-help">
                                                Examples: "Week 5 Lectures", "Midterm Review", "Chapter 1-3 Notes"
                                            </small>
                                        </div>

                                        <div class="form-actions">
                                            <button type="submit" class="button primary" id="uploadSubmitBtn">
                                                Upload Files
                                            </button>
                                        </div>
                                    </form>
                                    <% } %>
                        </section>
    </main>

    <!-- Floating Action Button for Upload -->
    <% if (user.role !=='viewer' ) { %>
        <button class="fab-upload" id="fabUpload" title="Upload Files">
            <span class="fab-icon">+</span>
            <span class="fab-text">Upload</span>
        </button>
        <% } %>

            <script type="application/json" id="filesData"><%- JSON.stringify(files) %></script>

            <!-- App.js functionality now integrated directly in pages -->
            <script>
                // Store all files data in JavaScript for client-side filtering
                const allFilesData = JSON.parse(document.getElementById('filesData').textContent);

                // Current view mode
                let currentView = localStorage.getItem('dashboardView') || 'grouped';

                // Initialize view on page load
                document.addEventListener('DOMContentLoaded', function () {
                    // Always initialize the current view to ensure proper state
                    if (currentView === 'grouped') {
                        switchView('grouped', false);
                    } else if (currentView === 'list') {
                        switchView('list', false);
                    } else {
                        switchView('grid', false);
                    }

                    // Initialize professor dropdown
                    initializeProfessorDropdown();
                });

                // Smart folder opening based on active filters
                function smartOpenFolders() {
                    // Get active filter values
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);

                    // If no filters are active, don't auto-open anything
                    if (selectedSemesters.length === 0 && selectedYears.length === 0 &&
                        selectedMajors.length === 0 && selectedClasses.length === 0) {
                        return;
                    }

                    // Open semester folders that match selected years or semesters
                    const semesterHeaders = document.querySelectorAll('.semester-header');
                    semesterHeaders.forEach(header => {
                        const fullText = header.textContent.trim();
                        const semesterName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÖ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                        // Extract year from semester name (e.g., "Fall 2021" -> "2021")
                        const yearFromSemester = semesterName.split(' ').pop();
                        const semesterPart = semesterName.replace(/\s+\d+$/, '').trim();

                        let shouldOpen = false;

                        // Check if semester matches selected filters
                        if (selectedSemesters.length > 0 && selectedSemesters.includes(semesterPart)) {
                            shouldOpen = true;
                        }
                        if (selectedYears.length > 0 && selectedYears.includes(yearFromSemester)) {
                            shouldOpen = true;
                        }

                        if (shouldOpen) {
                            const majorList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            if (majorList && majorList.style.display === 'none') {
                                majorList.style.display = 'block';
                                if (icon) icon.style.transform = 'rotate(90deg)';
                                persistentFolderStates.semesters[semesterName] = true;
                            }
                        }
                    });

                    // Open major folders that match selected majors
                    if (selectedMajors.length > 0) {
                        const majorHeaders = document.querySelectorAll('.major-header');
                        majorHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const majorName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÅ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                            if (selectedMajors.includes(majorName)) {
                                const courseList = header.nextElementSibling;
                                const icon = header.querySelector('.expand-icon');
                                if (courseList && courseList.style.display === 'none') {
                                    courseList.style.display = 'block';
                                    if (icon) icon.style.transform = 'rotate(90deg)';
                                    persistentFolderStates.majors[majorName] = true;
                                }
                            }
                        });
                    }

                    // Open course folders that match selected classes
                    if (selectedClasses.length > 0) {
                        const courseHeaders = document.querySelectorAll('.course-header');
                        courseHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const courseName = fullText.replace(/^[‚ñ∂‚ñº]\s*üíº\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            if (selectedClasses.includes(courseName)) {
                                const categoryList = header.nextElementSibling;
                                const icon = header.querySelector('.expand-icon');
                                if (categoryList && categoryList.style.display === 'none') {
                                    categoryList.style.display = 'block';
                                    if (icon) icon.style.transform = 'rotate(90deg)';
                                    persistentFolderStates.courses[courseName] = true;
                                }
                            }
                        });
                    }

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Switch between grid, grouped, and list views
                function switchView(view, savePreference = true) {
                    const gridView = document.getElementById('gridView');
                    const groupedView = document.getElementById('groupedView');
                    const listView = document.getElementById('listView');
                    const gridBtn = document.getElementById('gridViewBtn');
                    const groupedBtn = document.getElementById('groupedViewBtn');
                    const listBtn = document.getElementById('listViewBtn');
                    const activeFiltersContainer = document.getElementById('activeFilters');

                    // Debug: Log container widths before switching
                    const container = document.querySelector('.container');
                    const filterControls = document.querySelector('.filter-controls');
                    console.log('üîç [DEBUG] Before view switch:');
                    console.log('  Container width:', container?.offsetWidth);
                    console.log('  Filter controls width:', filterControls?.offsetWidth);
                    console.log('  Grouped view width:', groupedView?.offsetWidth);
                    console.log('  Active filters width:', activeFiltersContainer?.offsetWidth);

                    // Get filter elements
                    const majorWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(4)'); // Major dropdown
                    const classWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(5)'); // Class dropdown
                    const categoryWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(1)'); // Category dropdown
                    const professorFilter = document.getElementById('professorFilter');
                    const yearWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(3)'); // Year dropdown
                    const semesterWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(2)'); // Semester dropdown

                    currentView = view;

                    if (view === 'grid') {
                        gridView.style.display = 'grid';
                        groupedView.style.display = 'none';
                        listView.style.display = 'none';
                        gridBtn.style.background = 'var(--umd-red)';
                        gridBtn.style.color = 'white';
                        groupedBtn.style.background = 'transparent';
                        groupedBtn.style.color = '#6B7280';
                        listBtn.style.background = 'transparent';
                        listBtn.style.color = '#6B7280';

                        // Show all filters in grid view
                        if (categoryWrapper) categoryWrapper.style.display = 'block';
                        if (semesterWrapper) semesterWrapper.style.display = 'block';
                        if (yearWrapper) yearWrapper.style.display = 'block';
                        if (majorWrapper) majorWrapper.style.display = 'block';
                        if (classWrapper) classWrapper.style.display = 'block';
                        if (professorFilter) professorFilter.style.display = 'block';

                        // Show active filters in grid view
                        if (activeFiltersContainer) activeFiltersContainer.style.display = 'block';

                        // Show active filters in grid view (if there are any)
                        updateActiveFilters();

                        // Apply all filters to grid view
                        applyFilters();
                    } else if (view === 'grouped') {
                        gridView.style.display = 'none';
                        groupedView.style.display = 'block';
                        listView.style.display = 'none';
                        gridBtn.style.background = 'transparent';
                        gridBtn.style.color = '#6B7280';
                        groupedBtn.style.background = 'var(--umd-red)';
                        groupedBtn.style.color = 'white';
                        listBtn.style.background = 'transparent';
                        listBtn.style.color = '#6B7280';

                        // Hide most filters in grouped view, keep only professor search
                        if (categoryWrapper) categoryWrapper.style.display = 'none';
                        if (semesterWrapper) semesterWrapper.style.display = 'none';
                        if (yearWrapper) yearWrapper.style.display = 'none';
                        if (majorWrapper) majorWrapper.style.display = 'none';
                        if (classWrapper) classWrapper.style.display = 'none';
                        if (professorFilter) professorFilter.style.display = 'block'; // Keep professor search

                        // Show active filters in grouped view (but only relevant ones)
                        if (activeFiltersContainer) activeFiltersContainer.style.display = 'block';

                        // Update active filters to show only relevant ones for grouped view
                        updateActiveFiltersForGroupedView();

                        // Render grouped view with only Professor and Search filters
                        renderGroupedView();

                        // Smart folder opening based on active filters
                        setTimeout(() => {
                            smartOpenFolders();
                        }, 50);
                    } else if (view === 'list') {
                        gridView.style.display = 'none';
                        groupedView.style.display = 'none';
                        listView.style.display = 'block';
                        gridBtn.style.background = 'transparent';
                        gridBtn.style.color = '#6B7280';
                        groupedBtn.style.background = 'transparent';
                        groupedBtn.style.color = '#6B7280';
                        listBtn.style.background = 'var(--umd-red)';
                        listBtn.style.color = 'white';

                        // Show all filters in list view
                        if (categoryWrapper) categoryWrapper.style.display = 'block';
                        if (semesterWrapper) semesterWrapper.style.display = 'block';
                        if (yearWrapper) yearWrapper.style.display = 'block';
                        if (majorWrapper) majorWrapper.style.display = 'block';
                        if (classWrapper) classWrapper.style.display = 'block';
                        if (professorFilter) professorFilter.style.display = 'block';

                        // Show active filters in list view
                        if (activeFiltersContainer) activeFiltersContainer.style.display = 'block';

                        // Show active filters in list view (if there are any)
                        updateActiveFilters();

                        // Apply all filters to list view
                        applyFilters();
                    }

                    // Debug: Log container widths after switching
                    setTimeout(() => {
                        console.log('üîç [DEBUG] After view switch to', view, ':');
                        console.log('  Container width:', container?.offsetWidth);
                        console.log('  Filter controls width:', filterControls?.offsetWidth);
                        console.log('  Grouped view width:', groupedView?.offsetWidth);
                        console.log('  Active filters width:', activeFiltersContainer?.offsetWidth);


                        // Log the actual content width of grouped view
                        const semesterGroup = document.querySelector('.semester-group');
                        if (semesterGroup) {
                            console.log('  Semester group width:', semesterGroup.offsetWidth);
                            console.log('  Semester group style:', semesterGroup.style.cssText);
                        }
                    }, 100);

                    if (savePreference) {
                        localStorage.setItem('dashboardView', view);
                    }
                }

                // Render grouped view with accordion structure

                // Global state management for folder states
                let persistentFolderStates = {
                    majors: {},
                    semesters: {},
                    courses: {},
                    categories: {}
                };

                // Function to check if an element is visually visible (considering parent visibility)
                function isElementVisuallyVisible(element) {
                    if (!element) return false;

                    // Check if element itself is hidden
                    if (element.style.display === 'none') return false;

                    // Check if any parent containers are hidden
                    let parent = element.parentElement;
                    while (parent && parent !== document.body) {
                        if (parent.style.display === 'none') return false;
                        parent = parent.parentElement;
                    }

                    return true;
                }

                // Function to update the expand/collapse all button text
                function updateExpandCollapseButtonText() {
                    const button = document.getElementById('expandAllBtn');
                    if (!button) return;


                    // Check actual visual state of folders, not just persistent state
                    let hasVisuallyOpenFolders = false;
                    let openFolders = [];

                    // Check major folders
                    const majorHeaders = document.querySelectorAll('.major-header');
                    majorHeaders.forEach(header => {
                        const semesterList = header.nextElementSibling;
                        const display = semesterList ? semesterList.style.display : 'none';
                        const isVisible = isElementVisuallyVisible(semesterList);
                        if (semesterList && semesterList.style.display === 'block' && isVisible) {
                            hasVisuallyOpenFolders = true;
                            openFolders.push(`Major: ${header.textContent.trim()}`);
                        }
                    });

                    // Check semester folders
                    const semesterHeaders = document.querySelectorAll('.semester-header');
                    semesterHeaders.forEach(header => {
                        const courseList = header.nextElementSibling;
                        const display = courseList ? courseList.style.display : 'none';
                        const isVisible = isElementVisuallyVisible(courseList);
                        if (courseList && courseList.style.display === 'block' && isVisible) {
                            hasVisuallyOpenFolders = true;
                            openFolders.push(`Semester: ${header.textContent.trim()}`);
                        }
                    });

                    // Check course folders
                    const courseHeaders = document.querySelectorAll('.course-header');
                    courseHeaders.forEach(header => {
                        const categoryList = header.nextElementSibling;
                        const display = categoryList ? categoryList.style.display : 'none';
                        const isVisible = isElementVisuallyVisible(categoryList);
                        if (categoryList && categoryList.style.display === 'block' && isVisible) {
                            hasVisuallyOpenFolders = true;
                            openFolders.push(`Course: ${header.textContent.trim()}`);
                        }
                    });

                    // Check category folders
                    const categoryHeaders = document.querySelectorAll('.category-header');
                    categoryHeaders.forEach(header => {
                        const fileList = header.nextElementSibling;
                        const display = fileList ? fileList.style.display : 'none';
                        const isVisible = isElementVisuallyVisible(fileList);
                        if (fileList && (fileList.style.display === 'grid' || fileList.style.display === 'block') && isVisible) {
                            hasVisuallyOpenFolders = true;
                            openFolders.push(`Category: ${header.textContent.trim()}`);
                        }
                    });


                    if (hasVisuallyOpenFolders) {
                        button.textContent = 'Collapse All';
                    } else {
                        button.textContent = 'Expand All';
                    }
                }

                // Function to capture current folder states and update persistent state
                function captureFolderStates() {
                    // Only capture states if grouped view exists and has content
                    const groupedView = document.getElementById('groupedView');
                    if (!groupedView || groupedView.innerHTML.includes('empty-state')) {
                        return persistentFolderStates;
                    }

                    // Capture major states
                    const majorHeaders = document.querySelectorAll('.major-header');
                    majorHeaders.forEach(header => {
                        // Extract just the major name, ignoring file count and icons
                        const fullText = header.textContent.trim();
                        const majorName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÅ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();
                        const semesterList = header.nextElementSibling;
                        persistentFolderStates.majors[majorName] = semesterList && semesterList.style.display === 'block';
                    });

                    // Capture semester states
                    const semesterHeaders = document.querySelectorAll('.semester-header');
                    semesterHeaders.forEach(header => {
                        // Extract just the semester name, ignoring file count and icons
                        const fullText = header.textContent.trim();
                        const semesterName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÖ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();
                        const courseList = header.nextElementSibling;
                        persistentFolderStates.semesters[semesterName] = courseList && courseList.style.display === 'block';
                    });

                    // Capture course states
                    const courseHeaders = document.querySelectorAll('.course-header');
                    courseHeaders.forEach(header => {
                        // Extract just the course name, ignoring file count and icons
                        const fullText = header.textContent.trim();
                        const courseName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìö\s*/, '').replace(/\s+\d+\s*$/, '').trim();
                        const categoryList = header.nextElementSibling;
                        persistentFolderStates.courses[courseName] = categoryList && categoryList.style.display === 'block';
                    });

                    // Capture category states
                    const categoryHeaders = document.querySelectorAll('.category-header');
                    categoryHeaders.forEach(header => {
                        // Extract just the category name, ignoring file count and icons
                        const fullText = header.textContent.trim();
                        const categoryName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÇ\s*/, '').replace(/\s+\d+\s*$/, '').trim();
                        const fileList = header.nextElementSibling;
                        persistentFolderStates.categories[categoryName] = fileList && (fileList.style.display === 'grid' || fileList.style.display === 'block');
                    });

                    // Update button text based on current state
                    updateExpandCollapseButtonText();

                    return persistentFolderStates;
                }

                // Function to restore folder states
                function restoreFolderStates(states) {
                    if (!states) return;


                    // Restore major states
                    Object.keys(states.majors).forEach(majorName => {
                        const majorHeader = Array.from(document.querySelectorAll('.major-header'))
                            .find(header => {
                                const fullText = header.textContent.trim();
                                const extractedName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÅ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();
                                return extractedName === majorName;
                            });
                        if (majorHeader && states.majors[majorName]) {
                            const semesterList = majorHeader.nextElementSibling;
                            if (semesterList) {
                                semesterList.style.display = 'block';
                                const icon = majorHeader.querySelector('.expand-icon');
                                if (icon) icon.style.transform = 'rotate(90deg)';
                            }
                        }
                    });

                    // Restore semester states
                    Object.keys(states.semesters).forEach(semesterName => {
                        const semesterHeader = Array.from(document.querySelectorAll('.semester-header'))
                            .find(header => {
                                const fullText = header.textContent.trim();
                                const extractedName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÖ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();
                                return extractedName === semesterName;
                            });
                        if (semesterHeader && states.semesters[semesterName]) {
                            const courseList = semesterHeader.nextElementSibling;
                            if (courseList) {
                                courseList.style.display = 'block';
                                const icon = semesterHeader.querySelector('.expand-icon');
                                if (icon) icon.style.transform = 'rotate(90deg)';
                            }
                        }
                    });

                    // Restore course states
                    Object.keys(states.courses).forEach(courseName => {
                        const courseHeader = Array.from(document.querySelectorAll('.course-header'))
                            .find(header => {
                                const fullText = header.textContent.trim();
                                const extractedName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìö\s*/, '').replace(/\s+\d+\s*$/, '').trim();
                                return extractedName === courseName;
                            });
                        if (courseHeader && states.courses[courseName]) {
                            const categoryList = courseHeader.nextElementSibling;
                            if (categoryList) {
                                categoryList.style.display = 'block';
                                const icon = courseHeader.querySelector('.expand-icon');
                                if (icon) icon.style.transform = 'rotate(90deg)';
                            }
                        }
                    });

                    // Restore category states
                    Object.keys(states.categories).forEach(categoryName => {
                        const categoryHeader = Array.from(document.querySelectorAll('.category-header'))
                            .find(header => {
                                const fullText = header.textContent.trim();
                                const extractedName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÇ\s*/, '').replace(/\s+\d+\s*$/, '').trim();
                                return extractedName === categoryName;
                            });
                        if (categoryHeader && states.categories[categoryName]) {
                            const fileList = categoryHeader.nextElementSibling;
                            if (fileList) {
                                fileList.style.display = 'grid';
                                fileList.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
                                fileList.style.gap = '1rem';
                                const icon = categoryHeader.querySelector('.expand-icon');
                                if (icon) icon.style.transform = 'rotate(90deg)';
                            }
                        }
                    });

                    // Update button text after restoration
                    updateExpandCollapseButtonText();
                }

                function renderGroupedView() {
                    const groupedView = document.getElementById('groupedView');
                    if (!groupedView) return;

                    // Get filtered files using only Professor and Search filters
                    const filteredFiles = getFilteredFilesForGroupedView();

                    if (filteredFiles.length === 0) {
                        groupedView.innerHTML = '<div class="empty-state"><h3>No notes found</h3><p>Try different filters or search terms</p></div>';
                        return;
                    }

                    // Group files: Semester/Year > Major > Course > Category > Files
                    const grouped = {};
                    filteredFiles.forEach(function (file) {
                        const semester = file.semester || 'Unknown Semester';
                        const year = file.year || 'Unknown Year';
                        const major = file.major || 'Other';
                        const classCode = file.classCode || 'Unknown';
                        const category = file.category || 'Other';

                        const semesterKey = `${semester} ${year}`;

                        if (!grouped[semesterKey]) grouped[semesterKey] = {};
                        if (!grouped[semesterKey][major]) grouped[semesterKey][major] = {};
                        if (!grouped[semesterKey][major][classCode]) grouped[semesterKey][major][classCode] = {};
                        if (!grouped[semesterKey][major][classCode][category]) grouped[semesterKey][major][classCode][category] = [];

                        grouped[semesterKey][major][classCode][category].push(file);
                    });

                    // Sort semesters chronologically (newest first)
                    function sortSemesters(semesters) {
                        const semesterOrder = { 'Spring': 1, 'Summer': 2, 'Fall': 3, 'Winter': 4 };
                        return semesters.sort(function (a, b) {
                            const aParts = a.split(' ');
                            const bParts = b.split(' ');
                            const semA = aParts[0];
                            const yearA = aParts[1];
                            const semB = bParts[0];
                            const yearB = bParts[1];
                            if (yearB !== yearA) return parseInt(yearB) - parseInt(yearA);
                            return (semesterOrder[semB] || 0) - (semesterOrder[semA] || 0);
                        });
                    }

                    // Category icon mapping
                    const categoryIcons = {
                        'exam': 'üìù',
                        'lecture notes': 'üìì',
                        'homework': 'üìã',
                        'study guide': 'üìö',
                        'cheat sheet': 'üìÑ',
                        'project': 'üíª',
                        'lab': 'üî¨',
                        'textbook': 'üìñ',
                        'practice problems': '‚úèÔ∏è',
                        'other': 'üìé'
                    };

                    // Generate HTML
                    let html = '<div class="expand-collapse-all" style="margin-bottom: 1rem;"><button id="expandAllBtn" onclick="toggleAllGroups()" style="background: var(--umd-red); color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-weight: 600;">Expand All</button></div>';

                    // Sort semesters chronologically (newest first)
                    const sortedSemesters = sortSemesters(Object.keys(grouped));

                    sortedSemesters.forEach(function (semesterKey) {
                        const majors = grouped[semesterKey];

                        // Calculate semester file count using a simple approach
                        let semesterFileCount = 0;
                        Object.values(majors).forEach(function (courses) {
                            Object.values(courses).forEach(function (categories) {
                                Object.values(categories).forEach(function (files) {
                                    // files is an array of file cards
                                    if (Array.isArray(files)) {
                                        semesterFileCount += files.length;
                                    }
                                });
                            });
                        });

                        html += `
                            <div class="semester-group file-card" style="margin-bottom: 1rem; border: 2px solid #E5E7EB; border-radius: 12px; overflow: hidden; background: white;">
                                <div class="semester-header" onclick="toggleSemester(this)" style="background: linear-gradient(135deg, #DC143C 0%, #A50E2A 100%); color: white; padding: 1rem 1.25rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; transition: all 0.2s;">
                                    <div style="display: flex; align-items: center; gap: 0.75rem;">
                                        <span class="expand-icon" style="font-size: 0.875rem; transition: transform 0.2s;">‚ñ∂</span>
                                        <strong style="font-size: 1.125rem;">üìÖ ${semesterKey}</strong>
                                    </div>
                                    <span class="file-count" style="background: rgba(255,255,255,0.2); padding: 4px 12px; border-radius: 12px; font-size: 0.875rem; font-weight: 600;">${semesterFileCount} file${semesterFileCount !== 1 ? 's' : ''}</span>
                                </div>
                                <div class="major-list" style="display: none; padding: 1rem;">
                        `;

                        // Sort majors alphabetically
                        Object.keys(majors).sort().forEach(function (major) {
                            const courses = majors[major];

                            // Calculate major file count using a simple approach
                            let majorFileCount = 0;
                            Object.values(courses).forEach(function (courseCategories) {
                                Object.values(courseCategories).forEach(function (categories) {
                                    // categories is an array of file cards
                                    if (Array.isArray(categories)) {
                                        majorFileCount += categories.length;
                                    }
                                });
                            });

                            html += `
                                <div class="major-group" style="margin-bottom: 0.75rem; border: 1px solid #E5E7EB; border-radius: 8px; overflow: hidden;">
                                    <div class="major-header" onclick="toggleMajor(this)" style="background: #F9FAFB; padding: 0.875rem 1rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #E5E7EB;">
                                        <div style="display: flex; align-items: center; gap: 0.625rem;">
                                            <span class="expand-icon" style="font-size: 0.75rem; transition: transform 0.2s; color: #1F2937; font-weight: bold;">‚ñ∂</span>
                                            <strong style="color: #1F2937; font-size: 1rem;">üìÅ ${major}</strong>
                                        </div>
                                        <span class="file-count" style="background: #E0E7FF; color: #4338CA; padding: 3px 10px; border-radius: 10px; font-size: 0.8rem; font-weight: 600;">${majorFileCount} file${majorFileCount !== 1 ? 's' : ''}</span>
                                    </div>
                                    <div class="course-list" style="display: none; padding: 0.75rem;">
                            `;

                            Object.keys(courses).sort().forEach(function (course) {
                                const categories = courses[course];
                                // Calculate course file count using a simple approach
                                let courseFileCount = 0;
                                Object.values(categories).forEach(function (categoryFiles) {
                                    // categoryFiles is an array of file cards
                                    if (Array.isArray(categoryFiles)) {
                                        courseFileCount += categoryFiles.length;
                                    }
                                });

                                html += `
                                    <div class="course-group" style="margin-bottom: 0.625rem; border: 1px solid #E5E7EB; border-radius: 6px; overflow: hidden;">
                                        <div class="course-header" onclick="toggleCourse(this)" style="background: #FFFFFF; padding: 0.75rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #F3F4F6;">
                                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                                <span class="expand-icon" style="font-size: 0.7rem; transition: transform 0.2s;">‚ñ∂</span>
                                                <strong style="color: #374151; font-size: 0.9375rem;">üíº ${course}</strong>
                                            </div>
                                            <span class="file-count" style="background: #F3F4F6; color: #6B7280; padding: 2px 8px; border-radius: 8px; font-size: 0.75rem; font-weight: 600;">${courseFileCount}</span>
                                        </div>
                                        <div class="category-list" style="display: none; padding: 0.5rem;">
                                `;

                                Object.keys(categories).sort().forEach(function (category) {
                                    const files = categories[category];
                                    const categoryIcon = categoryIcons[category] || 'üìé';
                                    const categoryLabel = category.split(' ').map(function (word) { return word.charAt(0).toUpperCase() + word.slice(1); }).join(' ');

                                    html += `
                                        <div class="category-group" style="margin-bottom: 0.5rem;">
                                            <div class="category-header" onclick="toggleCategory(this)" style="background: #F9FAFB; padding: 0.625rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; border-radius: 4px; border: 1px solid #F3F4F6;">
                                                <div style="display: flex; align-items: center; gap: 0.375rem;">
                                                    <span class="expand-icon" style="font-size: 0.65rem; transition: transform 0.2s;">‚ñ∂</span>
                                                    <span style="color: #4B5563; font-size: 0.875rem; font-weight: 600;">${categoryIcon} ${categoryLabel}</span>
                                                </div>
                                                <span style="background: #E5E7EB; color: #374151; padding: 2px 6px; border-radius: 6px; font-size: 0.7rem; font-weight: 600;">${files.length}</span>
                                            </div>
                                            <div class="category-files" style="display: none; padding: 0.5rem 0 0 1.5rem;">
                                                ${files.map(function (card) { return createGroupedFileCard(card); }).join('')}
                                            </div>
                                        </div>
                                    `;
                                });

                                html += '</div></div>';
                            });

                            html += '</div></div>';
                        });

                        html += '</div></div>';
                    });

                    // No wrapper div to close
                    groupedView.innerHTML = html;


                    // Restore folder states immediately after DOM is updated
                    restoreFolderStates(persistentFolderStates);
                }

                // Helper function to get file icon based on filename extension
                function getFileIcon(filename) {
                    const ext = filename.split('.').pop().toLowerCase();
                    const iconMap = {
                        pdf: 'üìï',
                        doc: 'üìò', docx: 'üìò',
                        xls: 'üìó', xlsx: 'üìó',
                        ppt: 'üìô', pptx: 'üìô',
                        txt: 'üìÑ',
                        zip: 'üì¶', rar: 'üì¶',
                        jpg: 'üñºÔ∏è', jpeg: 'üñºÔ∏è', png: 'üñºÔ∏è', gif: 'üñºÔ∏è',
                        mp4: 'üé•', mov: 'üé•',
                        mp3: 'üéµ',
                    };
                    return iconMap[ext] || 'üìÑ';
                }

                // Get filtered files for grouped view (only Professor and Search filters)
                function getFilteredFilesForGroupedView() {
                    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;

                    return allFilesData.filter(function(file) {
                        // Search term filter
                        if (searchTerm && !file.originalName.toLowerCase().includes(searchTerm) &&
                            !(file.description && file.description.toLowerCase().includes(searchTerm))) {
                            return false;
                        }

                        // My files filter
                        const currentUserId = '<%= user.userid %>';
                        if (myFilesOnly && file.uploadedBy !== currentUserId) {
                            return false;
                        }

                        // Professor filter
                        if (selectedProfessors.length > 0) {
                            if (!file.professor || !selectedProfessors.some(selectedProf =>
                                file.professor.toLowerCase() === selectedProf.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        return true;
                    });
                }

                // Get filtered files based on current filters (for Grid and List views)
                function getFilteredFiles() {
                    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;

                    return allFilesData.filter(function(file) {
                        // Search term filter
                        if (searchTerm && !file.originalName.toLowerCase().includes(searchTerm) &&
                            !(file.description && file.description.toLowerCase().includes(searchTerm))) {
                            return false;
                        }

                        // My files filter
                        const currentUserId = '<%= user.userid %>';
                        if (myFilesOnly && file.uploadedBy !== currentUserId) {
                            return false;
                        }

                        // Category filter
                        if (selectedCategories.length > 0) {
                            const fileCategory = file.category || 'Other';
                            if (!selectedCategories.includes(fileCategory)) {
                                return false;
                            }
                        }

                        // Semester filter
                        if (selectedSemesters.length > 0 && !selectedSemesters.includes(file.semester)) {
                            return false;
                        }

                        // Year filter
                        if (selectedYears.length > 0 && !selectedYears.includes(file.year.toString())) {
                            return false;
                        }

                        // Major filter
                        if (selectedMajors.length > 0 && !selectedMajors.includes(file.major)) {
                            return false;
                        }

                        // Class filter
                        if (selectedClasses.length > 0 && !selectedClasses.includes(file.classCode)) {
                            return false;
                        }

                        // Professor filter
                        if (selectedProfessors.length > 0) {
                            if (!file.professor || !selectedProfessors.some(selectedProf =>
                                file.professor.toLowerCase() === selectedProf.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        return true;
                    });
                }

                // Render list view
                function renderListView() {
                    const listView = document.getElementById('listView');
                    if (!listView) return;

                    // Get filtered files using all filters (same as grid view)
                    const filteredFiles = getFilteredFiles();

                    if (filteredFiles.length === 0) {
                        console.log('üîç [DEBUG] List view: Setting empty state');
                        listView.innerHTML = '<div class="empty-state"><h3>No notes found</h3><p>Try different filters or search terms</p></div>';
                        console.log('üîç [DEBUG] List view: Empty state HTML set');
                        return;
                    }

                    let html = '';
                    filteredFiles.forEach(function(file) {
                        const fileName = file.originalName;
                        const major = file.major || '';
                        const classCode = file.classCode || '';
                        const semester = file.semester || '';
                        const year = file.year || '';
                        const professor = file.professor || '';
                        const uploader = file.uploadedBy || '';
                        const downloadCount = file.downloadCount || 0;

                        // Format file size
                        const size = file.size ? (file.size / 1024).toFixed(1) + ' KB' : '';
                        const description = file.description || '';

                        // Get file icon based on file type
                        const fileIcon = getFileIcon(file.originalName);

                        // Check if file is "new" (within 7 days)
                        const uploadDate = new Date(file.uploadDate);
                        const now = new Date();
                        const daysAgo = Math.floor((now - uploadDate) / (1000 * 60 * 60 * 24));
                        const isNew = daysAgo <= 7;

                        // Create download and delete links
                        const downloadLink = `/download/${file.filename}`;
                        const filename = file.filename || '';
                        const originalName = file.originalName || fileName;

                        html += `
                            <div class="file-list-item">
                                <div class="file-list-icon">${fileIcon}</div>
                                <div class="file-list-main">
                                    <div class="file-list-name">${fileName}</div>
                                    <div class="file-list-meta">
                                        ${size ? `<span><strong>Size:</strong> ${size}</span>` : ''}
                                        ${professor ? `<span><strong>Professor:</strong> ${professor}</span>` : ''}
                                        ${semester && year ? `<span><strong>Term:</strong> ${semester} ${year}</span>` : ''}
                                        <span><strong>Uploaded by:</strong> ${uploader}</span>
                                    </div>
                                    <div class="file-list-tags">
                                        ${major ? `<span style="background: #E0E7FF; color: #4338CA; padding: 2px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">üìÅ ${major}</span>` : ''}
                                        ${classCode ? `<span style="background: #FEF2F2; color: #DC2626; padding: 2px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">üíº ${classCode}</span>` : ''}
                                        ${isNew ? `<span style="background: #D1FAE5; color: #065F46; padding: 2px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">üÜï New</span>` : ''}
                                    </div>
                                </div>
                                <div class="file-list-downloads" title="${downloadCount} downloads">${downloadCount}</div>
                                <div class="file-list-actions">
                                    <a href="${downloadLink}" class="button primary" target="_blank" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">Download</a>
                                    ${getDeleteButton(file)}
                                    <button class="button secondary small report-btn" data-filename="${filename}" data-original-name="${originalName}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">üö©</button>
                                </div>
                            </div>
                        `;
                    });

                    listView.innerHTML = html;
                }

                // Create a grouped file card from file data
                function createGroupedFileCard(file) {
                    const fileName = file.originalName;
                    const major = file.major || '';
                    const classCode = file.classCode || '';
                    const semester = file.semester || '';
                    const year = file.year || '';
                    const professor = file.professor || '';
                    const uploader = file.uploadedBy || '';

                    // Format file size
                    const size = file.size ? (file.size / 1024).toFixed(1) + ' KB' : '';
                    const description = file.description || '';
                    const virusScanBadge = file.virusScanStatus === 'clean' ? '<div class="scan-badge" style="background: #D1FAE5; color: #065F46; padding: 2px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 600; display: inline-block; margin-bottom: 0.5rem;">‚úì VIRUS SCANNED</div>' : '';

                    // Create download and delete links
                    const downloadLink = `/download/${file.filename}`;
                    const filename = file.filename || '';
                    const originalName = file.originalName || fileName;

                    // Get file icon and download count
                    const fileIcon = getFileIcon(file.originalName);
                    const downloadCount = file.downloadCount || 0;

                    // Check if file is "new" (within 7 days)
                    const uploadDate = new Date(file.uploadDate);
                    const now = new Date();
                    const daysAgo = Math.floor((now - uploadDate) / (1000 * 60 * 60 * 24));
                    const isNew = daysAgo <= 7;

                    return `
                        <div class="grouped-file-card" style="position: relative;">
                            <div style="position: absolute; top: 0.5rem; right: 0.5rem; background: #FEF3C7; color: #92400E; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600; cursor: help;" title="${downloadCount} downloads">
                                ${downloadCount}
                            </div>
                            <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.75rem;">
                                <div style="font-size: 2rem;">${fileIcon}</div>
                                <h4 style="margin: 0; font-size: 0.95rem; font-weight: 600; color: #1F2937;">${fileName}</h4>
                            </div>
                            ${virusScanBadge ? `<div style="margin-bottom: 0.5rem;">${virusScanBadge}</div>` : ''}
                            <div style="font-size: 0.8rem; color: #6B7280; line-height: 1.6;">
                                ${isNew ? `<div><span style="background: #D1FAE5; color: #065F46; padding: 2px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">üÜï New</span></div>` : ''}
                                ${size ? `<div><strong>Size:</strong> ${size}</div>` : ''}
                                ${professor ? `<div><strong>Professor:</strong> ${professor}</div>` : ''}
                                ${semester && year ? `<div><strong>Term:</strong> ${semester} ${year}</div>` : ''}
                                <div><strong>Uploaded by:</strong> ${uploader}</div>
                                ${description ? `<div style="margin-top: 0.5rem;"><strong>Description:</strong> ${description}</div>` : ''}
                            </div>
                            <div style="display: flex; gap: 0.5rem; margin-top: 0.75rem;">
                                <a href="${downloadLink}" class="button primary" target="_blank" style="flex: 1; text-align: center; font-size: 0.85rem; padding: 0.5rem;">Download</a>
                                ${getDeleteButton(file)}
                                <button class="button secondary small report-btn" data-filename="${filename}" data-original-name="${originalName}" style="font-size: 0.85rem; padding: 0.5rem;">üö©</button>
                            </div>
                        </div>
                    `;
                }

                // Clear filters when closing folders (consistent with Clear All behavior)
                function clearFiltersForClosedFolder(folderType, folderName) {
                    if (folderType === 'semester') {
                        // Extract year and semester from folder name (e.g., "Fall 2021" -> "Fall", "2021")
                        const parts = folderName.split(' ');
                        const semesterPart = parts[0]; // "Fall"
                        const yearPart = parts[1]; // "2021"

                        // Clear semester filter
                        const semesterCheckbox = document.querySelector(`#semesterDropdown input[type="checkbox"][value="${semesterPart}"]`);
                        if (semesterCheckbox && semesterCheckbox.checked) {
                            semesterCheckbox.checked = false;
                            updateMultiSelect('semester');
                        }

                        // Clear year filter
                        const yearCheckbox = document.querySelector(`#yearDropdown input[type="checkbox"][value="${yearPart}"]`);
                        if (yearCheckbox && yearCheckbox.checked) {
                            yearCheckbox.checked = false;
                            updateMultiSelect('year');
                        }

                        // Clear all child filters (major, class, category)
                        clearAllChildFilters();

                    } else if (folderType === 'major') {
                        // Clear major filter
                        const majorCheckbox = document.querySelector(`#majorDropdown input[type="checkbox"][value="${folderName}"]`);
                        if (majorCheckbox && majorCheckbox.checked) {
                            majorCheckbox.checked = false;
                            updateMultiSelect('major');
                        }

                        // Clear child filters (class, category)
                        clearAllChildFilters();

                    } else if (folderType === 'course') {
                        // Clear course filter
                        const classCheckbox = document.querySelector(`#classDropdown input[type="checkbox"][value="${folderName}"]`);
                        if (classCheckbox && classCheckbox.checked) {
                            classCheckbox.checked = false;
                            updateMultiSelect('class');
                        }

                        // Clear category filters
                        document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked').forEach(cb => {
                            cb.checked = false;
                        });
                        updateMultiSelect('category');

                    } else if (folderType === 'category') {
                        // Clear category filter
                        const categoryCheckbox = document.querySelector(`#categoryDropdown input[type="checkbox"][value="${folderName}"]`);
                        if (categoryCheckbox && categoryCheckbox.checked) {
                            categoryCheckbox.checked = false;
                            updateMultiSelect('category');
                        }
                    }

                    // Apply filters and update display
                    applyFilters();
                    updateActiveFilters();
                }

                // Helper function to clear all child filters
                function clearAllChildFilters() {
                    // Clear class filters
                    document.querySelectorAll('#classDropdown input[type="checkbox"]:checked').forEach(cb => {
                        cb.checked = false;
                    });
                    updateMultiSelect('class');

                    // Clear category filters
                    document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked').forEach(cb => {
                        cb.checked = false;
                    });
                    updateMultiSelect('category');
                }

                // Toggle major accordion
                function toggleMajor(header) {
                    // Extract just the major name, ignoring file count and icons
                    const fullText = header.textContent.trim();
                    const majorName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÅ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                    const courseList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    const isCurrentlyExpanded = courseList.style.display !== 'none';

                    courseList.style.display = isCurrentlyExpanded ? 'none' : 'block';
                    icon.style.transform = isCurrentlyExpanded ? 'rotate(0deg)' : 'rotate(90deg)';

                    // Update persistent state
                    persistentFolderStates.majors[majorName] = !isCurrentlyExpanded;

                    // If closing folder, clear related filters
                    if (isCurrentlyExpanded) {
                        clearFiltersForClosedFolder('major', majorName);
                    }

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Toggle course accordion
                function toggleCourse(header) {
                    // Extract just the course name, ignoring file count and icons
                    const fullText = header.textContent.trim();
                    const courseName = fullText.replace(/^[‚ñ∂‚ñº]\s*üíº\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                    const categoryList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    const isCurrentlyExpanded = categoryList.style.display !== 'none';

                    categoryList.style.display = isCurrentlyExpanded ? 'none' : 'block';
                    icon.style.transform = isCurrentlyExpanded ? 'rotate(0deg)' : 'rotate(90deg)';

                    // Update persistent state
                    persistentFolderStates.courses[courseName] = !isCurrentlyExpanded;

                    // If closing folder, clear related filters
                    if (isCurrentlyExpanded) {
                        clearFiltersForClosedFolder('course', courseName);
                    }

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Toggle semester accordion
                function toggleSemester(header) {
                    // Extract just the semester name, ignoring file count and icons
                    const fullText = header.textContent.trim();
                    const semesterName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÖ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                    const majorList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    const isCurrentlyExpanded = majorList.style.display !== 'none';

                    majorList.style.display = isCurrentlyExpanded ? 'none' : 'block';
                    icon.style.transform = isCurrentlyExpanded ? 'rotate(0deg)' : 'rotate(90deg)';

                    // Update persistent state
                    persistentFolderStates.semesters[semesterName] = !isCurrentlyExpanded;

                    // If closing folder, clear related filters
                    if (isCurrentlyExpanded) {
                        clearFiltersForClosedFolder('semester', semesterName);
                    }

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Toggle category accordion
                function toggleCategory(header) {
                    // Extract just the category name, ignoring file count and icons
                    const fullText = header.textContent.trim();
                    const categoryName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÇ\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                    const fileList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    const isCurrentlyExpanded = fileList.style.display !== 'none';

                    if (isCurrentlyExpanded) {
                        fileList.style.display = 'none';
                        icon.style.transform = 'rotate(0deg)';

                        // If closing folder, clear related filters
                        clearFiltersForClosedFolder('category', categoryName);
                    } else {
                        fileList.style.display = 'grid';
                        fileList.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
                        fileList.style.gap = '1rem';
                        icon.style.transform = 'rotate(90deg)';
                    }

                    // Update persistent state
                    persistentFolderStates.categories[categoryName] = !isCurrentlyExpanded;

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Toggle all groups (expand/collapse all)
                function toggleAllGroups() {
                    const button = event.target;
                    const isExpanding = button.textContent === 'Expand All';

                    if (isExpanding) {
                        // Expanding all folders - don't clear filters

                        // Toggle all semester headers
                        const semesterHeaders = document.querySelectorAll('.semester-header');
                        semesterHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const semesterName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÖ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                            const majorList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            majorList.style.display = 'block';
                            if (icon) icon.style.transform = 'rotate(90deg)';
                            persistentFolderStates.semesters[semesterName] = true;
                        });

                        // Toggle all major headers
                        const majorHeaders = document.querySelectorAll('.major-header');
                    majorHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const majorName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÅ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                        const courseList = header.nextElementSibling;
                        const icon = header.querySelector('.expand-icon');
                            courseList.style.display = 'block';
                            if (icon) icon.style.transform = 'rotate(90deg)';
                            persistentFolderStates.majors[majorName] = true;
                        });

                        // Toggle all course headers
                        const courseHeaders = document.querySelectorAll('.course-header');
                        courseHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const courseName = fullText.replace(/^[‚ñ∂‚ñº]\s*üíº\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            const categoryList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            categoryList.style.display = 'block';
                            if (icon) icon.style.transform = 'rotate(90deg)';
                            persistentFolderStates.courses[courseName] = true;
                        });

                        // Toggle all category headers
                        const categoryHeaders = document.querySelectorAll('.category-header');
                        categoryHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const categoryName = fullText.replace(/^[‚ñ∂‚ñº]\s*[üìùüììüìãüìöüìÑüíªüî¨üìñ‚úèÔ∏èüìé]\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            const fileList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            fileList.style.display = 'grid';
                            fileList.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
                            fileList.style.gap = '1rem';
                            if (icon) icon.style.transform = 'rotate(90deg)';
                            persistentFolderStates.categories[categoryName] = true;
                        });

                        button.textContent = 'Collapse All';

                        } else {
                        // Collapsing all folders - clear only folder-related filters (keep My Files filter)
                        clearFolderFilters();

                        // Then collapse all folders
                        const semesterHeaders = document.querySelectorAll('.semester-header');
                        semesterHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const semesterName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÖ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                            const majorList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            majorList.style.display = 'none';
                            if (icon) icon.style.transform = 'rotate(0deg)';
                            persistentFolderStates.semesters[semesterName] = false;
                        });

                        const majorHeaders = document.querySelectorAll('.major-header');
                        majorHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const majorName = fullText.replace(/^[‚ñ∂‚ñº]\s*üìÅ\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                            const courseList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            courseList.style.display = 'none';
                            if (icon) icon.style.transform = 'rotate(0deg)';
                            persistentFolderStates.majors[majorName] = false;
                        });

                        const courseHeaders = document.querySelectorAll('.course-header');
                        courseHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const courseName = fullText.replace(/^[‚ñ∂‚ñº]\s*üíº\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            const categoryList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            categoryList.style.display = 'none';
                            if (icon) icon.style.transform = 'rotate(0deg)';
                            persistentFolderStates.courses[courseName] = false;
                        });

                        const categoryHeaders = document.querySelectorAll('.category-header');
                        categoryHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const categoryName = fullText.replace(/^[‚ñ∂‚ñº]\s*[üìùüììüìãüìöüìÑüíªüî¨üìñ‚úèÔ∏èüìé]\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            const fileList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            fileList.style.display = 'none';
                            if (icon) icon.style.transform = 'rotate(0deg)';
                            persistentFolderStates.categories[categoryName] = false;
                        });

                        button.textContent = 'Expand All';
                    }

                    // Update button text based on new state
                    updateExpandCollapseButtonText();
                }

                // Note: Major filter is now multi-select, so no need for handleMajorChange or updateClassDropdownVisibility

                // Toggle multi-select dropdown
                function toggleDropdown(type) {
                    const dropdown = document.getElementById(`${type}Dropdown`);
                    const allDropdowns = document.querySelectorAll('.multi-select-dropdown');

                    // Close other dropdowns
                    allDropdowns.forEach(dd => {
                        if (dd.id !== `${type}Dropdown`) {
                            dd.classList.remove('show');
                        }
                    });

                    // Toggle current dropdown
                    dropdown.classList.toggle('show');
                }

                // Update multi-select label and apply filters
                function updateMultiSelect(type) {
                    const checkboxes = document.querySelectorAll(`#${type}Dropdown input[type="checkbox"]:checked`);
                    const label = document.getElementById(`${type}Label`);
                    const values = Array.from(checkboxes).map(cb => cb.value);

                    if (values.length === 0) {
                        const defaults = {
                            'year': 'All Years',
                            'semester': 'All Semesters',
                            'category': 'All Categories',
                            'major': 'All Majors',
                            'class': 'All Classes',
                            'professor': 'All Professors'
                        };
                        label.textContent = defaults[type] || 'All';
                    } else if (values.length === 1) {
                        label.textContent = values[0];
                    } else {
                        label.textContent = `${values.length} selected`;
                    }

                    // Apply filters but keep the dropdown open
                    applyFilters();

                    // Ensure the dropdown stays open after filtering
                    setTimeout(() => {
                        const dropdown = document.getElementById(`${type}Dropdown`);
                        if (dropdown && !dropdown.classList.contains('show')) {
                            dropdown.classList.add('show');
                        }
                    }, 10);
                }

                // Initialize professor dropdown with dynamic data
                function initializeProfessorDropdown() {
                    const professorList = document.getElementById('professorList');
                    const allFileCards = document.querySelectorAll('.file-card');

                    // Extract unique professors from existing files
                    const professorSet = new Set();
                    allFileCards.forEach(card => {
                        const professor = card.dataset.professor;
                        if (professor && professor.trim()) {
                            professorSet.add(professor.trim());
                        }
                    });

                    // Convert to sorted array
                    const professors = Array.from(professorSet).sort();

                    // Clear existing options
                    professorList.innerHTML = '';

                    // Add options for each professor
                    professors.forEach(professor => {
                        const option = document.createElement('label');
                        option.className = 'multi-select-option';
                        option.innerHTML = `
                            <input type="checkbox" value="${escapeHtml(professor)}" onchange="updateMultiSelect('professor')">
                            <span>üë®‚Äçüè´ ${escapeHtml(professor)}</span>
                        `;
                        professorList.appendChild(option);
                    });

                    // If no professors found, show message
                    if (professors.length === 0) {
                        const message = document.createElement('div');
                        message.className = 'no-options';
                        message.textContent = 'No professors found in uploaded files';
                        professorList.appendChild(message);
                    }
                }

                // Filter professor options based on search term
                function filterProfessorOptions(searchTerm) {
                    const options = document.querySelectorAll('#professorList .multi-select-option');
                    const searchLower = searchTerm.toLowerCase();

                    options.forEach(option => {
                        const professorName = option.querySelector('span').textContent.toLowerCase();
                        if (professorName.includes(searchLower)) {
                            option.style.display = 'flex';
                        } else {
                            option.style.display = 'none';
                        }
                    });
                }

                // Close dropdowns when clicking outside
                document.addEventListener('click', function (e) {
                    if (!e.target.closest('.multi-select-wrapper')) {
                        document.querySelectorAll('.multi-select-dropdown').forEach(dd => {
                            dd.classList.remove('show');
                        });
                    }
                });

                // Clear only folder-related filters (keep My Files filter)
                function clearFolderFilters() {
                    // Clear all multi-select checkboxes (categories, semesters, years, majors, classes, professors)
                    document.querySelectorAll('.multi-select-dropdown input[type="checkbox"]:checked').forEach(cb => {
                        cb.checked = false;
                    });

                    // Reset all multi-select labels
                    document.getElementById('categoryLabel').textContent = 'All Categories';
                    document.getElementById('semesterLabel').textContent = 'All Semesters';
                    document.getElementById('yearLabel').textContent = 'All Years';
                    document.getElementById('majorLabel').textContent = 'All Majors';
                    document.getElementById('classLabel').textContent = 'All Classes';
                    document.getElementById('professorLabel').textContent = 'All Professors';

                    // Clear search input
                    document.getElementById('searchInput').value = '';

                    // DO NOT clear "My Files" toggle - keep user's preference

                    // Apply filters
                    applyFilters();
                }

                // Clear all filters
                function clearAllFilters() {
                    // Clear all multi-select checkboxes
                    document.querySelectorAll('.multi-select-dropdown input[type="checkbox"]:checked').forEach(cb => {
                        cb.checked = false;
                    });

                    // Reset all multi-select labels
                    document.getElementById('categoryLabel').textContent = 'All Categories';
                    document.getElementById('semesterLabel').textContent = 'All Semesters';
                    document.getElementById('yearLabel').textContent = 'All Years';
                    document.getElementById('majorLabel').textContent = 'All Majors';
                    document.getElementById('classLabel').textContent = 'All Classes';
                    document.getElementById('professorLabel').textContent = 'All Professors';

                    // Major filter is now handled by multi-select checkboxes (cleared above)
                    // Professor filter is now handled by multi-select checkboxes (cleared above)

                    // Clear search input
                    document.getElementById('searchInput').value = '';

                    // Uncheck "My Files" toggle
                    document.getElementById('myFilesToggle').checked = false;

                    // Apply filters to show all files
                    applyFilters();
                }

                // Remove a specific filter
                function removeFilter(type, value) {
                    if (type === 'major') {
                        document.getElementById('majorFilter').value = '';
                    } else if (type === 'professor') {
                        document.getElementById('professorFilter').value = '';
                    } else if (type === 'search') {
                        document.getElementById('searchInput').value = '';
                    } else if (type === 'myFiles') {
                        document.getElementById('myFilesToggle').checked = false;
                    } else {
                        // For multi-select filters (category, semester, year, class)
                        const checkbox = document.querySelector(`#${type}Dropdown input[type="checkbox"][value="${value}"]`);
                        if (checkbox) {
                            checkbox.checked = false;
                            updateMultiSelect(type);
                        }
                    }
                    applyFilters();
                }

                // Update active filters display
                function updateActiveFilters() {
                    const activeFiltersContainer = document.getElementById('activeFilters');
                    const filterTags = document.getElementById('filterTags');

                    // Active filters are now always processed but made invisible in grouped view
                    // No early return needed

                    const tags = [];

                    // Get selected categories
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'category', value: cb.value, label: cb.nextElementSibling.textContent.trim() }));
                    tags.push(...selectedCategories);

                    // Get selected semesters
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'semester', value: cb.value, label: cb.value }));
                    tags.push(...selectedSemesters);

                    // Get selected years
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'year', value: cb.value, label: cb.value }));
                    tags.push(...selectedYears);

                    // Get selected majors
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'major', value: cb.value, label: `üìÅ ${cb.value}` }));
                    tags.push(...selectedMajors);

                    // Get selected classes
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'class', value: cb.value, label: cb.value }));
                    tags.push(...selectedClasses);

                    // Get professor filter
                    const professorFilter = document.getElementById('professorFilter').value;
                    if (professorFilter) {
                        tags.push({ type: 'professor', value: professorFilter, label: `Professor: ${professorFilter}` });
                    }

                    // Get search filter
                    const searchTerm = document.getElementById('searchInput').value;
                    if (searchTerm) {
                        tags.push({ type: 'search', value: searchTerm, label: `Search: ${searchTerm}` });
                    }

                    // Get "My Files" toggle
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;
                    if (myFilesOnly) {
                        tags.push({ type: 'myFiles', value: 'true', label: 'My Files Only' });
                    }

                    // Update filter tags content (visibility is controlled by switchView)
                    if (tags.length > 0) {
                        filterTags.innerHTML = tags.map(tag => `
                            <span style="display: inline-flex; align-items: center; gap: 0.375rem; background: white; border: 1px solid var(--umd-red); color: var(--umd-red); padding: 4px 8px; border-radius: 6px; font-size: 0.813rem; font-weight: 500;">
                                ${escapeHtml(tag.label)}
                                <button onclick="removeFilter('${tag.type}', '${escapeHtml(tag.value)}')" style="background: none; border: none; color: var(--umd-red); cursor: pointer; padding: 0; font-size: 1rem; line-height: 1; font-weight: bold;" title="Remove filter">
                                    √ó
                                </button>
                            </span>
                        `).join('');
                    } else {
                        filterTags.innerHTML = '<span style="color: #6B7280; font-style: italic;">No filters applied</span>';
                    }
                }

                // Update active filters display for grouped view (only Professor, Search, and My Files)
                function updateActiveFiltersForGroupedView() {
                    const activeFiltersContainer = document.getElementById('activeFilters');
                    const filterTags = document.getElementById('filterTags');

                    const tags = [];

                    // Only show filters that are shared between grouped view and other views:
                    // - Professor filter (shared globally)
                    // - Search filter (shared globally)
                    // - My Files filter (shared globally)

                    // Get professor filter (from multi-select)
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'professor', value: cb.value, label: `üë®‚Äçüè´ ${cb.value}` }));
                    tags.push(...selectedProfessors);

                    // Get search filter
                    const searchTerm = document.getElementById('searchInput').value.trim();
                    if (searchTerm) {
                        tags.push({ type: 'search', value: searchTerm, label: `üîç "${searchTerm}"` });
                    }

                    // Get "My Files" toggle
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;
                    if (myFilesOnly) {
                        tags.push({ type: 'myFiles', value: 'true', label: `üë§ My Files Only` });
                    }

                    // Update filter tags content
                    if (tags.length > 0) {
                        filterTags.innerHTML = tags.map(tag => `
                            <span style="display: inline-flex; align-items: center; gap: 0.375rem; background: white; border: 1px solid var(--umd-red); color: var(--umd-red); padding: 4px 8px; border-radius: 6px; font-size: 0.813rem; font-weight: 500;">
                                ${escapeHtml(tag.label)}
                                <button onclick="removeFilter('${tag.type}', '${escapeHtml(tag.value)}')" style="background: none; border: none; color: var(--umd-red); cursor: pointer; padding: 0; font-size: 1rem; line-height: 1; font-weight: bold;" title="Remove filter">
                                    √ó
                                </button>
                            </span>
                        `).join('');
                    } else {
                        filterTags.innerHTML = '<span style="color: #6B7280; font-style: italic;">No filters applied</span>';
                    }
                }

                // Client-side filtering - instant, no page reloads!
                function applyFilters() {
                    // Preserve dropdown states before filtering
                    const yearDropdown = document.getElementById('yearDropdown');
                    const semesterDropdown = document.getElementById('semesterDropdown');
                    const categoryDropdown = document.getElementById('categoryDropdown');
                    const classDropdown = document.getElementById('classDropdown');
                    const professorDropdown = document.getElementById('professorDropdown');
                    const yearDropdownOpen = yearDropdown && yearDropdown.classList.contains('show');
                    const semesterDropdownOpen = semesterDropdown && semesterDropdown.classList.contains('show');
                    const categoryDropdownOpen = categoryDropdown && categoryDropdown.classList.contains('show');
                    const classDropdownOpen = classDropdown && classDropdown.classList.contains('show');
                    const professorDropdownOpen = professorDropdown && professorDropdown.classList.contains('show');

                    // Update persistent folder states if currently in grouped view
                    if (currentView === 'grouped') {
                        captureFolderStates();
                    }

                    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                    const sortBy = document.getElementById('sortFilter').value;
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;

                    // Get multi-select values from checkboxes
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);

                    // Current user's userid for "My Files" filter
                    const currentUserid = '<%= user.userid %>';

                    // Filter files
                    let filteredFiles = allFilesData.filter(file => {
                        // "My Files" filter - show only files uploaded by current user
                        const matchesMyFiles = !myFilesOnly || file.uploadedBy === currentUserid;

                        // Search filter - searches by filename, uploader, class, description, category, and professor
                        const matchesSearch = !searchTerm ||
                            file.originalName.toLowerCase().includes(searchTerm) ||
                            file.uploadedBy.toLowerCase().includes(searchTerm) ||
                            (file.classCode && file.classCode.toLowerCase().includes(searchTerm)) ||
                            (file.description && file.description.toLowerCase().includes(searchTerm)) ||
                            (file.category && file.category.toLowerCase().includes(searchTerm)) ||
                            (file.professor && file.professor.toLowerCase().includes(searchTerm));

                        // Category filter (multi-select)
                        // Treat files without category as "Other"
                        const fileCategory = file.category || 'Other';
                        const matchesCategory = selectedCategories.length === 0 || selectedCategories.includes(fileCategory);

                        // Semester filter (multi-select)
                        const matchesSemester = selectedSemesters.length === 0 || selectedSemesters.includes(file.semester);

                        // Year filter (multi-select)
                        const matchesYear = selectedYears.length === 0 || selectedYears.includes(file.year);

                        // Major filter (multi-select)
                        const matchesMajor = selectedMajors.length === 0 || selectedMajors.includes(file.major);

                        // Class filter (multi-select)
                        const matchesClass = selectedClasses.length === 0 || selectedClasses.includes(file.classCode);

                        // Professor filter (multi-select)
                        const matchesProfessor = selectedProfessors.length === 0 ||
                            (file.professor && selectedProfessors.some(selectedProf =>
                                file.professor.toLowerCase() === selectedProf.toLowerCase()
                            ));

                        return matchesMyFiles && matchesSearch && matchesMajor && matchesClass && matchesCategory && matchesYear && matchesSemester && matchesProfessor;
                    });

                    // Sort files
                    filteredFiles.sort((a, b) => {
                        switch (sortBy) {
                            case 'oldest':
                                return new Date(a.uploadDate) - new Date(b.uploadDate);
                            case 'popular':
                                return (b.downloadCount || 0) - (a.downloadCount || 0);
                            case 'name':
                                return a.originalName.localeCompare(b.originalName);
                            case 'size-desc':
                                return (b.size || 0) - (a.size || 0);
                            case 'size-asc':
                                return (a.size || 0) - (b.size || 0);
                            case 'newest':
                            default:
                                return new Date(b.uploadDate) - new Date(a.uploadDate);
                        }
                    });

                    // Update only the active view with appropriate filtering
                    if (currentView === 'grid') {
                    displayFiles(filteredFiles);
                    } else if (currentView === 'grouped') {
                        renderGroupedView();
                    } else if (currentView === 'list') {
                        renderListView();
                    }

                    // Restore dropdown states after filtering
                    setTimeout(() => {
                        if (categoryDropdownOpen && categoryDropdown) {
                            categoryDropdown.classList.add('show');
                        }
                        if (semesterDropdownOpen && semesterDropdown) {
                            semesterDropdown.classList.add('show');
                        }
                        if (yearDropdownOpen && yearDropdown) {
                            yearDropdown.classList.add('show');
                        }
                        if (classDropdownOpen && classDropdown) {
                            classDropdown.classList.add('show');
                        }
                        if (professorDropdownOpen && professorDropdown) {
                            professorDropdown.classList.add('show');
                        }
                    }, 10);

                    // Update active filters display based on current view
                    if (currentView === 'grouped') {
                        updateActiveFiltersForGroupedView();
                    } else {
                        updateActiveFilters();
                    }
                }

                // Update active filters display (Grid view only)
                function updateActiveFilters() {
                    const activeFiltersContainer = document.getElementById('activeFilters');
                    const filterTags = document.getElementById('filterTags');

                    // Active filters are now always processed but made invisible in grouped view
                    // No early return needed

                    const tags = [];

                    // Get selected categories
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'category', value: cb.value, label: `üìÇ ${cb.value}` }));
                    tags.push(...selectedCategories);

                    // Get selected semesters
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'semester', value: cb.value, label: `üìÖ ${cb.value}` }));
                    tags.push(...selectedSemesters);

                    // Get selected years
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'year', value: cb.value, label: `üìÜ ${cb.value}` }));
                    tags.push(...selectedYears);

                    // Get selected majors
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'major', value: cb.value, label: `üìÅ ${cb.value}` }));
                    tags.push(...selectedMajors);

                    // Get selected classes
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'class', value: cb.value, label: `üíº ${cb.value}` }));
                    tags.push(...selectedClasses);

                    // Get selected professors
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'professor', value: cb.value, label: `üë®‚Äçüè´ ${cb.value}` }));
                    tags.push(...selectedProfessors);

                    // Get search term
                    const searchTerm = document.getElementById('searchInput').value.trim();
                    if (searchTerm) {
                        tags.push({ type: 'search', value: searchTerm, label: `üîç "${searchTerm}"` });
                    }

                    // Get "My Files" toggle
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;
                    if (myFilesOnly) {
                        tags.push({ type: 'myFiles', value: 'true', label: `üë§ My Files Only` });
                    }

                    // Update filter tags content
                    if (activeFiltersContainer && filterTags) {
                        if (tags.length > 0) {
                            filterTags.innerHTML = tags.map(tag => `
                                <span style="display: inline-flex; align-items: center; gap: 0.375rem; background: white; border: 1px solid var(--umd-red); color: var(--umd-red); padding: 4px 8px; border-radius: 6px; font-size: 0.813rem; font-weight: 500;">
                                    ${escapeHtml(tag.label)}
                                    <button onclick="removeFilter('${tag.type}', '${escapeHtml(tag.value)}')" style="background: none; border: none; color: var(--umd-red); cursor: pointer; padding: 0; font-size: 1rem; line-height: 1; font-weight: bold;" title="Remove filter">
                                        √ó
                                    </button>
                                </span>
                            `).join('');
                        } else {
                            filterTags.innerHTML = '<span style="color: #6B7280; font-style: italic;">No filters applied</span>';
                        }

                        // Active filters updated
                    }
                }

                // Remove a specific filter
                function removeFilter(type, value) {
                    if (type === 'search') {
                        document.getElementById('searchInput').value = '';
                    } else if (type === 'myFiles') {
                        document.getElementById('myFilesToggle').checked = false;
                    } else {
                        const checkbox = document.querySelector(`#${type}Dropdown input[type="checkbox"][value="${escapeHtml(value)}"]`);
                        if (checkbox) {
                            checkbox.checked = false;
                            updateMultiSelect(type);
                        }
                    }
                    applyFilters();
                }


                function displayFiles(files) {
                    const gridView = document.getElementById('gridView');

                    if (files.length === 0) {
                        console.log('üîç [DEBUG] Grid view: Setting empty state');
                        gridView.innerHTML = '<div class="empty-state"><h3>No notes found</h3><p>Try different filters or search terms</p></div>';
                        console.log('üîç [DEBUG] Grid view: Empty state HTML set');
                        return;
                    }

                    // Always update grid view with new data
                    if (gridView) {
                        // Set display based on current view
                        gridView.style.display = currentView === 'grid' ? 'grid' : 'none';
                        gridView.innerHTML = files.map(file => {
                            // Calculate if file is "new" (within 7 days)
                            const uploadDate = new Date(file.uploadDate);
                            const now = new Date();
                            const daysAgo = Math.floor((now - uploadDate) / (1000 * 60 * 60 * 24));
                            const isNew = daysAgo <= 7;

                            return `
                <div class="file-card animate-fade-in"
                     data-class="${escapeHtml(file.classCode || '')}"
                     data-major="${escapeHtml(file.major || '')}"
                     data-semester="${escapeHtml(file.semester || '')}"
                     data-year="${escapeHtml(file.year || '')}"
                     data-category="${escapeHtml((file.category || '').toLowerCase())}"
                     data-professor="${escapeHtml((file.professor || '').toLowerCase())}"
                     data-uploader="${escapeHtml(file.uploadedBy)}"
                     data-name="${escapeHtml(file.originalName.toLowerCase())}"
                     data-date="${new Date(file.uploadDate).getTime()}"
                     data-downloads="${file.downloadCount || 0}"
                     data-size="${file.size || 0}">
                    <div class="file-header" style="position: relative; display: flex; align-items: center; justify-content: center; gap: 0.75rem; margin-bottom: 1rem;">
                        <div style="position: absolute; top: 0.5rem; right: 0.5rem; background: #FEF3C7; color: #92400E; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600; cursor: help; z-index: 10;" title="${file.downloadCount || 0} downloads">
                            ${file.downloadCount || 0}
                        </div>
                        <div class="file-icon">${getFileIcon(file.originalName)}</div>
                        <div class="file-info">
                            <h3>${escapeHtml(file.originalName)}</h3>
                        </div>
                    </div>
                    <div class="file-meta">
                        ${isNew ? `<div class="file-meta-item"><span style="background: #D1FAE5; color: #065F46; padding: 2px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">üÜï New</span></div>` : ''}
                        <div class="file-meta-item"><strong>Size:</strong> ${(file.size / 1024).toFixed(1)} KB</div>
                        ${file.virusScanStatus ? `<div class="file-meta-item"><strong>Security:</strong> ${getScanBadge(file.virusScanStatus)}</div>` : ''}
                        ${file.major ? `<div class="file-meta-item"><strong>Major:</strong> <span class="major-badge">${escapeHtml(file.major)}</span></div>` : ''}
                        ${file.classCode ? `<div class="file-meta-item"><strong>Class:</strong> <span class="class-code-badge">${escapeHtml(file.classCode)}</span></div>` : ''}
                        ${file.category ? `<div class="file-meta-item"><strong>Category:</strong> <span class="category-badge">${escapeHtml(file.category)}</span></div>` : ''}
                        ${file.professor ? `<div class="file-meta-item"><strong>Professor:</strong> ${escapeHtml(file.professor)}</div>` : ''}
                        ${file.semester && file.year ? `<div class="file-meta-item"><strong>Term:</strong> ${file.semester} ${file.year}</div>` : ''}
                        <div class="file-meta-item"><strong>Uploaded by:</strong> ${escapeHtml(file.uploadedBy)}</div>
                        ${file.description ? `<div class="file-meta-item"><strong>Description:</strong> ${escapeHtml(file.description)}</div>` : ''}
                    </div>
                    <div class="file-actions" style="display: flex; gap: 0.5rem; flex-wrap: wrap; justify-content: center;">
                        <a href="/download/${encodeURIComponent(file.filename)}" class="button primary" target="_blank">Download</a>
                        ${getDeleteButton(file)}
                        <button class="button secondary small report-btn" data-filename="${file.filename}" data-original-name="${escapeHtml(file.originalName)}">üö© Report</button>
                    </div>
                </div>
            `;
                        }).join('');
                    }

                    // Update grouped view display
                    if (groupedView) {
                        groupedView.style.display = currentView === 'grouped' ? 'block' : 'none';
                    }
                }

                function canDeleteFile(file) {
                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';
                    return userRole === 'admin' || file.uploadedBy === userId;
                }

                function getDeleteButton(file) {
                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';

                    if (userRole === 'viewer') {
                        return `<button class="button danger disabled" onclick="showViewerAlert(); return false;" title="View-only mode">Delete</button>`;
                    } else if (userRole === 'admin' || file.uploadedBy === userId) {
                        return `<a href="/delete/${encodeURIComponent(file.filename)}" class="button danger" onclick="return confirm('Are you sure you want to delete this file?')">Delete</a>`;
                    } else {
                        return `<button class="button danger disabled" disabled title="You can only delete your own files">Delete</button>`;
                    }
                }

                function showViewerAlert() {
                    alert('üîí View-Only Mode\n\nYour account has been set to view-only access. You can download files but cannot upload or delete.\n\nPlease contact an administrator if you need upload/delete permissions.');
                }

                // Add event delegation for report buttons
                document.addEventListener('click', function (e) {
                    if (e.target.classList.contains('report-btn') || e.target.closest('.report-btn')) {
                        const btn = e.target.classList.contains('report-btn') ? e.target : e.target.closest('.report-btn');
                        const filename = btn.dataset.filename;
                        const originalName = btn.dataset.originalName;
                        reportFile(filename, originalName);
                    }
                });

                // File reporting function
                async function reportFile(filename, originalName) {
                    const reasons = [
                        'Inappropriate content',
                        'Copyright violation',
                        'Malicious file',
                        'Academic integrity violation (unauthorized exam/project)',
                        'Spam or irrelevant content',
                        'Other'
                    ];

                    const reason = prompt(`Why are you reporting "${originalName}"?\n\nEnter the reason:\n1. ${reasons[0]}\n2. ${reasons[1]}\n3. ${reasons[2]}\n4. ${reasons[3]}\n5. ${reasons[4]}\n6. ${reasons[5]}\n\nEnter number (1-6):`);

                    if (!reason) return; // User cancelled

                    const reasonIndex = parseInt(reason) - 1;
                    if (reasonIndex < 0 || reasonIndex >= reasons.length) {
                        alert('Invalid selection. Please try again.');
                        return;
                    }

                    const selectedReason = reasons[reasonIndex];
                    const additionalDetails = prompt(`Optional: Add more details about the issue:`) || '';

                    try {
                        const response = await fetch('/api/report-file', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                filename: filename,
                                originalName: originalName,
                                reason: selectedReason,
                                details: additionalDetails
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            alert('‚úÖ Report submitted successfully. An admin will review this file.');
                        } else {
                            alert('‚ùå Error: ' + result.error);
                        }
                    } catch (error) {
                        alert('‚ùå Failed to submit report. Please try again.');
                        console.error('Report error:', error);
                    }
                }

                function escapeHtml(text) {
                    const div = document.createElement('div');
                    div.textContent = text;
                    return div.innerHTML;
                }

                function getScanBadge(status) {
                    if (status === 'clean') {
                        return '<span class="scan-badge scan-clean">‚úì Virus Scanned</span>';
                    } else if (status === 'pending') {
                        return '<span class="scan-badge scan-pending">‚è≥ Scanning...</span>';
                    } else if (status === 'error') {
                        return '<span class="scan-badge scan-error">‚ö†Ô∏è Scan Error</span>';
                    }
                    return '';
                }

                // Direct S3 Upload Form Handler
                const uploadForm = document.getElementById('uploadForm');
                if (uploadForm) {
                    uploadForm.addEventListener('submit', async function (e) {
                        e.preventDefault(); // Prevent default form submission

                        const submitBtn = document.getElementById('uploadSubmitBtn');
                        const filesInput = document.getElementById('documents');
                        const files = filesInput.files;

                        if (files.length === 0) {
                            // Show styled notification instead of alert
                            const notification = document.createElement('div');
                            notification.style.cssText = `
                                position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                            `;
                            notification.textContent = '‚ö†Ô∏è Please select at least one file to upload';
                            document.body.appendChild(notification);
                            setTimeout(() => notification.remove(), 3000);
                            return;
                        }

                        // Get form data
                        const classCode = document.getElementById('classCode').value.trim();
                        const professor = document.getElementById('professor').value.trim();
                        const semester = document.getElementById('semester').value;
                        const year = document.getElementById('year').value;
                        const category = document.getElementById('category').value;
                        const description = document.getElementById('description').value.trim();

                        console.log('üîç [DEBUG] Form data collected:');
                        console.log('  - classCode:', classCode);
                        console.log('  - professor:', professor);
                        console.log('  - semester:', semester);
                        console.log('  - year:', year);
                        console.log('  - category:', category);
                        console.log('  - description:', description);

                        if (!classCode || !professor || !description) {
                            const notification = document.createElement('div');
                            notification.style.cssText = `
                                position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                            `;
                            notification.textContent = '‚ö†Ô∏è Please fill in all required fields';
                            document.body.appendChild(notification);
                            setTimeout(() => notification.remove(), 3000);
                            return;
                        }

                        // Disable submit button
                        submitBtn.disabled = true;
                        submitBtn.textContent = 'Uploading...';

                        // Show loading overlay
                        const overlay = document.createElement('div');
                        overlay.id = 'uploadOverlay';
                        overlay.innerHTML = `
                            <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.7); display: flex; align-items: center; justify-content: center; z-index: 9999;">
                                <div style="background: white; padding: 3rem; border-radius: 12px; text-align: center; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3); min-width: 400px;">
                                    <div style="width: 60px; height: 60px; border: 4px solid #E5E7EB; border-top-color: #DC2626; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1.5rem;"></div>
                                    <h3 style="color: #DC2626; margin-bottom: 0.5rem;">Uploading Files...</h3>
                                    <p style="color: #6B7280;" id="uploadStatus">Preparing upload...</p>
                                    <p style="color: #9CA3AF; font-size: 0.85rem; margin-top: 1rem;">
                                        <span id="uploadProgress">0</span> / ${files.length} files ‚Ä¢ Direct S3 upload
                                    </p>
                                </div>
                            </div>
                            <style>
                                @keyframes spin {
                                    0% { transform: rotate(0deg); }
                                    100% { transform: rotate(360deg); }
                                }
                            </style>
                        `;
                        document.body.appendChild(overlay);

                        const statusEl = document.getElementById('uploadStatus');
                        const progressEl = document.getElementById('uploadProgress');

                        let successCount = 0;
                        let errorCount = 0;

                        // Upload each file
                        for (let i = 0; i < files.length; i++) {
                            const file = files[i];
                            statusEl.textContent = `Processing ${file.name}...`;

                            try {
                                // Step 1: Calculate file hash (client-side to avoid server timeout)
                                const arrayBuffer = await file.arrayBuffer();
                                const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);
                                const hashArray = Array.from(new Uint8Array(hashBuffer));
                                const fileHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

                                statusEl.textContent = `Uploading ${file.name}...`;

                                // Step 2: Get presigned URL
                                const urlResponse = await fetch('/api/get-upload-url', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        filename: file.name,
                                        filetype: file.type
                                    })
                                });

                                if (!urlResponse.ok) {
                                    throw new Error('Failed to get upload URL');
                                }

                                const { uploadUrl, s3Key, s3Url } = await urlResponse.json();

                                // Step 2: Upload directly to S3
                                const s3Response = await fetch(uploadUrl, {
                                    method: 'PUT',
                                    body: file,
                                    headers: {
                                        'Content-Type': file.type
                                    }
                                });

                                if (!s3Response.ok) {
                                    throw new Error('S3 upload failed');
                                }

                                // Step 3: Confirm upload to backend
                                const confirmResponse = await fetch('/api/confirm-upload', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        s3Key: s3Key,
                                        s3Url: s3Url,
                                        filename: file.name,
                                        filetype: file.type,
                                        filesize: file.size,
                                        fileHash: fileHash,
                                        classCode: classCode,
                                        major: classCode.replace(/[0-9]/g, '').trim(), // Extract major from class code
                                        professor: professor,
                                        semester: semester,
                                        year: year,
                                        category: category,
                                        description: description
                                    })
                                });

                                if (!confirmResponse.ok) {
                                    throw new Error('Failed to save file metadata');
                                }

                                const result = await confirmResponse.json();
                                if (result.duplicate) {
                                    statusEl.textContent = `${file.name} already exists (skipped)`;
                                } else {
                                    successCount++;
                                }

                            } catch (error) {
                                console.error('Upload error:', error);
                                errorCount++;
                                statusEl.textContent = `Error uploading ${file.name}`;
                            }

                            progressEl.textContent = i + 1;
                        }

                        // Show completion message
                        statusEl.textContent = `Upload complete! ${successCount} uploaded, ${errorCount} failed`;
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    });
                }

                // Initialize on page load
                document.addEventListener('DOMContentLoaded', function () {
                    // Real-time search as you type
                    const searchInput = document.getElementById('searchInput');
                    if (searchInput) {
                        searchInput.addEventListener('input', applyFilters);
                    }

                    // Load UMD.io course data for custom dropdown
                    const classCodeInput = document.getElementById('classCode');
                    const coursesDropdown = document.getElementById('coursesDropdown');
                    const courseInfo = document.getElementById('courseInfo');
                    const professorInput = document.getElementById('professor');
                    const professorsDropdown = document.getElementById('professorsDropdown');

                    let allCourses = [];
                    let selectedCourseIndex = -1;
                    let selectedProfessorIndex = -1;
                    let professorData = []; // Will store {name, semesters: [{semester, year}]}

                    if (classCodeInput && coursesDropdown) {
                        // Fetch courses on load
                        fetch('/api/umd/courses?per_page=100')
                            .then(res => res.json())
                            .then(courses => {
                                if (courses && courses.length > 0) {
                                    allCourses = courses;
                                    courseInfo.textContent = `${courses.length} courses loaded - start typing to search`;
                                    courseInfo.style.color = '#10B981';
                                }
                            })
                            .catch(err => {
                                console.error('Failed to load courses:', err);
                                courseInfo.textContent = 'Type any class code to continue';
                                courseInfo.style.color = '#9CA3AF';
                            });

                        // Flag to prevent input/change events when selecting from dropdown
                        let isSelectingFromDropdown = false;

                        // Auto-uppercase and show dropdown
                        classCodeInput.addEventListener('input', function () {
                            // Skip if we're selecting from dropdown
                            if (isSelectingFromDropdown) return;

                            this.value = this.value.toUpperCase();
                            const searchTerm = this.value.trim();

                            if (searchTerm.length === 0) {
                                coursesDropdown.classList.remove('show');
                                return;
                            }

                            // Filter courses
                            const filteredCourses = allCourses.filter(course => {
                                const courseId = course.course_id.toUpperCase();
                                const courseName = (course.name || '').toUpperCase();
                                const search = searchTerm.toUpperCase();
                                return courseId.includes(search) || courseName.includes(search);
                            });

                            // Reset selection
                            selectedCourseIndex = -1;

                            // Render dropdown
                            renderCoursesDropdown(filteredCourses, searchTerm);
                        });

                        // Keyboard navigation
                        classCodeInput.addEventListener('keydown', function (e) {
                            const items = coursesDropdown.querySelectorAll('.custom-dropdown-item');

                            if (e.key === 'ArrowDown') {
                                e.preventDefault();
                                selectedCourseIndex = Math.min(selectedCourseIndex + 1, items.length - 1);
                                updateSelectedItem(items);
                            } else if (e.key === 'ArrowUp') {
                                e.preventDefault();
                                selectedCourseIndex = Math.max(selectedCourseIndex - 1, 0);
                                updateSelectedItem(items);
                            } else if (e.key === 'Enter' && selectedCourseIndex >= 0) {
                                e.preventDefault();
                                items[selectedCourseIndex].click();
                            } else if (e.key === 'Escape') {
                                coursesDropdown.classList.remove('show');
                            }
                        });

                        // Close dropdown when clicking outside
                        document.addEventListener('click', function (e) {
                            if (!classCodeInput.contains(e.target) && !coursesDropdown.contains(e.target)) {
                                coursesDropdown.classList.remove('show');
                            }
                            if (!professorInput.contains(e.target) && !professorsDropdown.contains(e.target)) {
                                professorsDropdown.classList.remove('show');
                            }
                        });

                        // Professor input event listeners
                        if (professorInput && professorsDropdown) {
                            professorInput.addEventListener('input', async function () {
                                const searchTerm = this.value.trim();

                                // If no search term, show course-specific professors if available
                                if (searchTerm.length === 0) {
                                    if (professorData.length > 0) {
                                    renderProfessorsDropdown(professorData, searchTerm);
                                    } else {
                                        professorsDropdown.classList.remove('show');
                                    }
                                    return;
                                }

                                // If search term is 2+ characters, search UMD.io API
                                if (searchTerm.length >= 2) {
                                    try {
                                        console.log(`üîç Searching professors: "${searchTerm}"`);
                                        const response = await fetch(`/api/umd/professors?name=${encodeURIComponent(searchTerm)}`);
                                        
                                        if (!response.ok) {
                                            throw new Error(`API returned ${response.status}`);
                                        }
                                        
                                        const professors = await response.json();
                                        
                                        if (Array.isArray(professors) && professors.length > 0) {
                                            const searchResults = professors.map(name => ({ name: name.trim() })).filter(prof => prof.name);
                                            console.log(`‚úÖ Found ${searchResults.length} professors matching "${searchTerm}"`);

                                // Reset selection
                                selectedProfessorIndex = -1;

                                            // Render dropdown with search results
                                            renderProfessorsDropdown(searchResults, searchTerm);
                                        } else {
                                            // No results from API - show message
                                            console.log(`‚ö†Ô∏è No professors found for "${searchTerm}"`);
                                            professorsDropdown.innerHTML = `<div class="custom-dropdown-empty">No professors found for "${searchTerm}" - try typing manually</div>`;
                                            professorsDropdown.classList.add('show');
                                        }
                                    } catch (error) {
                                        console.error('Error searching professors:', error);
                                        // Show error message but allow manual entry
                                        professorsDropdown.innerHTML = `<div class="custom-dropdown-empty">Search unavailable - please type professor name manually</div>`;
                                        professorsDropdown.classList.add('show');
                                    }
                                } else {
                                    // For 1 character, just filter locally
                                    const filteredProfessors = professorData.filter(prof => {
                                        return prof.name.toUpperCase().includes(searchTerm.toUpperCase());
                                    });
                                renderProfessorsDropdown(filteredProfessors, searchTerm);
                                }
                            });

                            // Keyboard navigation for professor dropdown
                            professorInput.addEventListener('keydown', function (e) {
                                const items = professorsDropdown.querySelectorAll('.custom-dropdown-item');

                                if (e.key === 'ArrowDown') {
                                    e.preventDefault();
                                    selectedProfessorIndex = Math.min(selectedProfessorIndex + 1, items.length - 1);
                                    updateSelectedProfessorItem(items);
                                } else if (e.key === 'ArrowUp') {
                                    e.preventDefault();
                                    selectedProfessorIndex = Math.max(selectedProfessorIndex - 1, 0);
                                    updateSelectedProfessorItem(items);
                                } else if (e.key === 'Enter' && selectedProfessorIndex >= 0) {
                                    e.preventDefault();
                                    items[selectedProfessorIndex].click();
                                } else if (e.key === 'Escape') {
                                    professorsDropdown.classList.remove('show');
                                }
                            });

                            // Show dropdown when focused if there's data
                            professorInput.addEventListener('focus', function () {
                                if (professorData.length > 0) {
                                    renderProfessorsDropdown(professorData, '');
                                }
                            });
                        }

                        // Render courses dropdown
                        function renderCoursesDropdown(courses, searchTerm) {
                            if (courses.length === 0) {
                                coursesDropdown.innerHTML = '<div class="custom-dropdown-empty">No courses found</div>';
                                coursesDropdown.classList.add('show');
                                return;
                            }

                            coursesDropdown.innerHTML = courses.map((course, index) => {
                                const courseId = course.course_id;
                                const courseName = course.name || courseId;

                                // Highlight matching text
                                const highlightedId = highlightText(courseId, searchTerm);
                                const highlightedName = highlightText(courseName, searchTerm);

                                return `
                                    <div class="custom-dropdown-item" data-course-id="${courseId}" data-course-name="${courseName}">
                                        <span class="course-code">${highlightedId}</span>
                                        <span class="course-name">${highlightedName}</span>
                                    </div>
                                `;
                            }).join('');

                            coursesDropdown.classList.add('show');

                            // Add click handlers
                            coursesDropdown.querySelectorAll('.custom-dropdown-item').forEach((item, index) => {
                                item.addEventListener('mousedown', function (e) {
                                    e.preventDefault(); // Prevent the input from losing focus

                                    const courseId = this.dataset.courseId;

                                    // Set flag to prevent input/change events
                                    isSelectingFromDropdown = true;

                                    // Update input value
                                    classCodeInput.value = courseId;
                                    classCodeInput.blur(); // Commit the value

                                    // Hide dropdown
                                    coursesDropdown.classList.remove('show');

                                    // Fetch course data directly
                                    fetchCourseData();

                                    // Reset flag after a short delay
                                    setTimeout(() => {
                                        isSelectingFromDropdown = false;
                                    }, 100);
                                });

                                item.addEventListener('mouseenter', function () {
                                    selectedCourseIndex = index;
                                    updateSelectedItem(coursesDropdown.querySelectorAll('.custom-dropdown-item'));
                                });
                            });
                        }

                        // Highlight matching text
                        function highlightText(text, searchTerm) {
                            if (!searchTerm) return text;
                            const regex = new RegExp(`(${searchTerm})`, 'gi');
                            return text.replace(regex, '<span class="highlight">$1</span>');
                        }

                        // Update selected item visual
                        function updateSelectedItem(items) {
                            items.forEach((item, index) => {
                                if (index === selectedCourseIndex) {
                                    item.classList.add('selected');
                                    item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
                                } else {
                                    item.classList.remove('selected');
                                }
                            });
                        }

                        // Update selected professor item visual
                        function updateSelectedProfessorItem(items) {
                            items.forEach((item, index) => {
                                if (index === selectedProfessorIndex) {
                                    item.classList.add('selected');
                                    item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
                                } else {
                                    item.classList.remove('selected');
                                }
                            });
                        }

                        // Render professors dropdown
                        function renderProfessorsDropdown(professors, searchTerm) {
                            if (professors.length === 0) {
                                professorsDropdown.innerHTML = '<div class="custom-dropdown-empty">Select a course first or type a professor name</div>';
                                professorsDropdown.classList.add('show');
                                return;
                            }

                            professorsDropdown.innerHTML = professors.map((prof, index) => {
                                const professorName = prof.name;

                                // Highlight matching text
                                const highlightedName = highlightText(professorName, searchTerm);

                                // Create semester tags
                                const semesterTags = prof.semesters.map(sem =>
                                    `<span class="semester-tag">${sem.semester} ${sem.year}</span>`
                                ).join('');

                                return `
                                    <div class="custom-dropdown-item" data-professor-name="${professorName}">
                                        <span class="professor-name">${highlightedName}</span>
                                        <div class="professor-semesters">${semesterTags}</div>
                                    </div>
                                `;
                            }).join('');

                            professorsDropdown.classList.add('show');

                            // Add click handlers
                            professorsDropdown.querySelectorAll('.custom-dropdown-item').forEach((item, index) => {
                                item.addEventListener('click', function () {
                                    const professorName = this.dataset.professorName;
                                    professorInput.value = professorName;
                                    professorsDropdown.classList.remove('show');
                                });

                                item.addEventListener('mouseenter', function () {
                                    selectedProfessorIndex = index;
                                    updateSelectedProfessorItem(professorsDropdown.querySelectorAll('.custom-dropdown-item'));
                                });
                            });
                        }

                        // Helper: Convert semester/year to UMD.io semester ID
                        function getSemesterId() {
                            const semester = document.getElementById('semester').value;
                            const year = document.getElementById('year').value;
                            if (!semester || !year) return '202501'; // Default to Spring 2025

                            const semesterMap = {
                                'Spring': '01',
                                'Summer': '05',
                                'Fall': '08',
                                'Winter': '12'
                            };
                            return `${year}${semesterMap[semester] || '01'}`;
                        }

                        // Helper: Reset dropdowns to show all options
                        function resetDropdowns() {
                            // Reset semester dropdown to show all options
                            const semesterSelect = document.getElementById('semester');
                            const semesterOptions = Array.from(semesterSelect.options);
                            semesterOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });

                            // Reset year dropdown to show all options
                            const yearSelect = document.getElementById('year');
                            const yearOptions = Array.from(yearSelect.options);
                            yearOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });
                        }

                        // Store course data globally
                        let currentCourseData = null;

                        // Fetch course data with comprehensive debugging
                        async function fetchCourseData() {
                            const courseCode = classCodeInput.value.trim().toUpperCase();

                            if (!courseCode) {
                                resetDropdowns();
                                currentCourseData = null;
                                return;
                            }

                            // Get current filter values
                            const selectedSemester = document.getElementById('semester').value;
                            const selectedYear = document.getElementById('year').value;

                            // Build query parameters
                            let queryParams = '';
                            if (selectedSemester) {
                                queryParams += `&filter_semester=${encodeURIComponent(selectedSemester)}`;
                            }
                            if (selectedYear) {
                                queryParams += `&filter_year=${encodeURIComponent(selectedYear)}`;
                            }


                            try {
                                const response = await fetch(`/api/umd/course/${courseCode}?${queryParams}`);

                                if (response.ok) {
                                    currentCourseData = await response.json();

                                    // Update course info display
                                    if (currentCourseData.name && currentCourseData.name !== 'undefined' && currentCourseData.name !== courseCode) {
                                        courseInfo.innerHTML = `‚úì <strong>${currentCourseData.course_id || courseCode}:</strong> ${currentCourseData.name}`;
                                        courseInfo.style.color = '#10B981';
                                    } else {
                                        courseInfo.textContent = '';
                                    }

                                    // Set default semester and year to current semester (only on first load)
                                    if (!selectedSemester && !selectedYear && currentCourseData.current_semester && currentCourseData.current_year) {
                                        const semesterSelect = document.getElementById('semester');
                                        const yearSelect = document.getElementById('year');

                                        if (semesterSelect) {
                                            semesterSelect.value = currentCourseData.current_semester;
                                        }
                                        if (yearSelect) {
                                            yearSelect.value = currentCourseData.current_year;
                                        }
                                    }

                                    // Update professor list
                                    updateProfessorList();
                                } else {
                                    courseInfo.textContent = 'Could not verify course - you can still upload';
                                    courseInfo.style.color = '#9CA3AF';
                                    currentCourseData = null;
                                    resetDropdowns();
                                }
                            } catch (error) {
                                console.error('‚ùå [FRONTEND] Error fetching course details:', error);
                                courseInfo.textContent = 'Could not verify course - you can still upload';
                                courseInfo.style.color = '#9CA3AF';
                                currentCourseData = null;
                                resetDropdowns();
                            }
                        }

                        // Update professor list based on current selections
                        async function updateProfessorList() {
                            const selectedCourse = classCodeInput.value.trim();

                            if (!selectedCourse) {
                                professorData = [];
                                professorsDropdown.classList.remove('show');
                                professorInput.placeholder = 'Enter professor name';
                                document.getElementById('professorHelp').textContent = 'Select course first to see professors';
                                return;
                            }

                            try {
                                console.log(`üîç Fetching professors for course: ${selectedCourse}`);
                                
                                // Fetch professors from UMD.io API
                                const response = await fetch(`/api/umd/professors?course_id=${encodeURIComponent(selectedCourse)}`);
                                
                                if (!response.ok) {
                                    throw new Error(`API returned ${response.status}`);
                                }
                                
                                const professors = await response.json();
                                
                                if (Array.isArray(professors) && professors.length > 0) {
                                    professorData = professors.map(name => ({ name: name.trim() })).filter(prof => prof.name);
                                    
                                    // Update UI
                                    professorInput.placeholder = `${professorData.length} professor${professorData.length !== 1 ? 's' : ''} taught ${selectedCourse}`;
                                    document.getElementById('professorHelp').textContent = `${professorData.length} professor${professorData.length !== 1 ? 's' : ''} available - click or type to search`;
                                    console.log(`‚úÖ Loaded ${professorData.length} professors for ${selectedCourse}`);
                                } else {
                                    // No professors found for this course
                                    professorData = [];
                                    professorInput.placeholder = 'No professors found - enter manually';
                                    document.getElementById('professorHelp').textContent = 'No professors found in UMD database - you can type any name';
                                    console.log(`‚ö†Ô∏è No professors found for ${selectedCourse}`);
                                }
                                
                            } catch (error) {
                                console.error('Error fetching professors from UMD.io, trying fallback:', error);
                                
                                // Fallback: Try to use existing course data if available
                                if (currentCourseData && currentCourseData.sections) {
                                    console.log('üîÑ Using fallback course data for professors');
                                    const professorSet = new Set();
                                    
                                    currentCourseData.sections.forEach(section => {
                                        if (section.instructors && section.instructors.length > 0) {
                                            section.instructors.forEach(instructor => {
                                                if (instructor && instructor.name && instructor.name.trim()) {
                                                    professorSet.add(instructor.name.trim());
                                                }
                                            });
                                        }
                                    });
                                    
                                    professorData = Array.from(professorSet).map(name => ({ name }));
                                    
                            if (professorData.length > 0) {
                                        professorInput.placeholder = `${professorData.length} professor${professorData.length !== 1 ? 's' : ''} taught ${selectedCourse} (fallback data)`;
                                        document.getElementById('professorHelp').textContent = `${professorData.length} professor${professorData.length !== 1 ? 's' : ''} available from course data`;
                                        console.log(`‚úÖ Fallback: Found ${professorData.length} professors for ${selectedCourse}`);
                                    } else {
                                        professorData = [];
                                        professorInput.placeholder = 'No professors found - enter manually';
                                        document.getElementById('professorHelp').textContent = 'No professors found - you can type any name';
                                    }
                            } else {
                                    // No fallback data available
                                    professorData = [];
                                professorInput.placeholder = 'Enter professor name';
                                    document.getElementById('professorHelp').textContent = 'Search unavailable - please enter professor name manually';
                                }
                            }
                        }


                        // Trigger professor fetch when course changes
                        classCodeInput.addEventListener('change', async function () {
                            // Skip if we're selecting from dropdown
                            if (isSelectingFromDropdown) return;

                            // First try to get course data (this will also call updateProfessorList)
                            await fetchCourseData();
                            
                            // Then try UMD.io professors API as enhancement
                            await updateProfessorList();
                        });

                        // Helper: Reset dropdowns to show all options
                        function resetDropdowns() {
                            // Reset semester dropdown to show all options
                            const semesterSelect = document.getElementById('semester');
                            const semesterOptions = Array.from(semesterSelect.options);
                            semesterOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });

                            // Reset year dropdown to show all options
                            const yearSelect = document.getElementById('year');
                            const yearOptions = Array.from(yearSelect.options);
                            yearOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });
                        }

                        // Validate semester/year selection (prevent future semesters)
                        function validateSemesterYear() {
                            const semester = document.getElementById('semester').value;
                            const year = parseInt(document.getElementById('year').value);
                            if (!semester || !year) return true;

                            const now = new Date();
                            const currentYear = now.getFullYear();
                            const currentMonth = now.getMonth() + 1; // 1-12

                            // Determine current semester
                            let currentSemester;
                            if (currentMonth >= 1 && currentMonth <= 5) currentSemester = 'Spring';
                            else if (currentMonth >= 6 && currentMonth <= 7) currentSemester = 'Summer';
                            else if (currentMonth >= 8 && currentMonth <= 12) currentSemester = 'Fall';

                            const semesterOrder = { 'Spring': 1, 'Summer': 2, 'Fall': 3, 'Winter': 4 };

                            // Check if future semester
                            if (year > currentYear) {
                                const notification = document.createElement('div');
                                notification.style.cssText = `
                                    position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                    padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                    font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                                `;
                                notification.textContent = '‚ö†Ô∏è Cannot select future years';
                                document.body.appendChild(notification);
                                setTimeout(() => notification.remove(), 3000);
                                document.getElementById('year').value = '';
                                return false;
                            }

                            if (year === currentYear && semesterOrder[semester] > semesterOrder[currentSemester]) {
                                const notification = document.createElement('div');
                                notification.style.cssText = `
                                    position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                    padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                    font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                                `;
                                notification.textContent = `‚ö†Ô∏è Cannot select future semesters (currently ${currentSemester} ${currentYear})`;
                                document.body.appendChild(notification);
                                setTimeout(() => notification.remove(), 3000);
                                document.getElementById('semester').value = '';
                                return false;
                            }

                            return true;
                        }

                        // Re-fetch professors when semester or year changes
                        const semesterInput = document.getElementById('semester');
                        const yearInput = document.getElementById('year');

                        if (semesterInput) {
                            semesterInput.addEventListener('change', function () {
                                if (validateSemesterYear() && classCodeInput.value.trim()) {
                                    fetchCourseData(); // Refetch with new semester filter
                                }
                            });
                        }

                        if (yearInput) {
                            yearInput.addEventListener('change', function () {
                                if (validateSemesterYear() && classCodeInput.value.trim()) {
                                    fetchCourseData(); // Refetch with new year filter
                                }
                            });
                        }
                    }

                    // Initialize drag-and-drop upload
                    initDragAndDrop();

                    // Initialize Floating Action Button
                    initFAB();
                });

                // Drag and Drop Upload Functionality
                function initDragAndDrop() {
                    const dropZone = document.getElementById('dropZone');
                    const fileInput = document.getElementById('documents');
                    const selectedFilesContainer = document.getElementById('selectedFiles');

                    if (!dropZone || !fileInput) return;

                    // Click to browse
                    dropZone.addEventListener('click', () => {
                        fileInput.click();
                    });

                    // Prevent default drag behaviors
                    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                        dropZone.addEventListener(eventName, preventDefaults, false);
                        document.body.addEventListener(eventName, preventDefaults, false);
                    });

                    // Highlight drop zone when dragging over
                    ['dragenter', 'dragover'].forEach(eventName => {
                        dropZone.addEventListener(eventName, () => {
                            dropZone.classList.add('drag-over');
                        }, false);
                    });

                    ['dragleave', 'drop'].forEach(eventName => {
                        dropZone.addEventListener(eventName, () => {
                            dropZone.classList.remove('drag-over');
                        }, false);
                    });

                    // Handle dropped files
                    dropZone.addEventListener('drop', (e) => {
                        const dt = e.dataTransfer;
                        const files = dt.files;
                        fileInput.files = files;
                        displaySelectedFiles(files);
                    });

                    // Handle selected files via click
                    fileInput.addEventListener('change', (e) => {
                        displaySelectedFiles(e.target.files);
                    });

                    function preventDefaults(e) {
                        e.preventDefault();
                        e.stopPropagation();
                    }

                    function displaySelectedFiles(files) {
                        if (!files || files.length === 0) {
                            selectedFilesContainer.innerHTML = '';
                            return;
                        }

                        let totalSize = 0;
                        let html = '<div class="selected-files-header">üìé Selected Files:</div>';

                        Array.from(files).forEach((file, index) => {
                            const size = (file.size / 1024).toFixed(1);
                            totalSize += file.size;
                            const icon = getFileIcon(file.name);

                            html += `
                        <div class="file-item">
                            <div class="file-item-info">
                                <span class="file-item-icon">${icon}</span>
                                <span class="file-item-name">${escapeHtml(file.name)}</span>
                            </div>
                            <span class="file-item-size">${size} KB</span>
                        </div>
                    `;
                        });

                        const totalSizeMB = (totalSize / (1024 * 1024)).toFixed(2);
                        html += `<div class="files-summary">Total: ${files.length} file(s) ¬∑ ${totalSizeMB} MB</div>`;

                        selectedFilesContainer.innerHTML = html;
                    }

                    function getFileIcon(filename) {
                        const ext = filename.split('.').pop().toLowerCase();
                        const iconMap = {
                            pdf: 'üìï',
                            doc: 'üìò', docx: 'üìò',
                            xls: 'üìó', xlsx: 'üìó',
                            ppt: 'üìô', pptx: 'üìô',
                            txt: 'üìÑ',
                            zip: 'üì¶', rar: 'üì¶',
                            jpg: 'üñºÔ∏è', jpeg: 'üñºÔ∏è', png: 'üñºÔ∏è', gif: 'üñºÔ∏è',
                            mp4: 'üé•', mov: 'üé•',
                            mp3: 'üéµ',
                        };
                        return iconMap[ext] || 'üìÑ';
                    }
                }

                // Floating Action Button functionality
                function initFAB() {
                    const fab = document.getElementById('fabUpload');
                    const uploadSection = document.querySelector('.upload-section');

                    if (!fab || !uploadSection) return;

                    // Smooth scroll to upload section
                    fab.addEventListener('click', () => {
                        uploadSection.scrollIntoView({ behavior: 'smooth', block: 'start' });

                        // Optional: Focus on the drop zone after scrolling
                        setTimeout(() => {
                            const dropZone = document.getElementById('dropZone');
                            if (dropZone) {
                                dropZone.style.animation = 'pulse 0.5s ease-in-out';
                                setTimeout(() => {
                                    dropZone.style.animation = '';
                                }, 500);
                            }
                        }, 500);
                    });

                    // Hide FAB when upload section is visible
                    const observer = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                fab.style.opacity = '0';
                                fab.style.pointerEvents = 'none';
                            } else {
                                fab.style.opacity = '1';
                                fab.style.pointerEvents = 'all';
                            }
                        });
                    }, { threshold: 0.1 });

                    observer.observe(uploadSection);
                }

                // Initialize button text on page load
                document.addEventListener('DOMContentLoaded', function() {
                    // Set initial button text based on current state
                    updateExpandCollapseButtonText();
                });
            </script>

            <%- include('partials/footer') %>
</body>

</html>
