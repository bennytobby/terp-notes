<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard - Terp Notes</title>
    <!-- Favicon and App Icons -->
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <meta name="msapplication-TileColor" content="#E21833" />
    <meta name="theme-color" content="#E21833" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="stylesheet" href="/styles/main.css" />
    <style>
        /* Hide any extra checkboxes that might appear in file cards */
        .file-card input[type="checkbox"]:not(.file-select-checkbox) {
            display: none !important;
        }

        /* Hide any extra checkboxes that might appear in list view */
        .file-list-item input[type="checkbox"]:not(.file-select-checkbox) {
            display: none !important;
        }

        /* Ensure our bulk select checkboxes are visible */
        .file-card .file-select-checkbox {
            display: block !important;
        }

        .file-list-item .file-select-checkbox {
            display: block !important;
        }

        /* Filename truncation styles */
        .filename-truncated {
            max-width: 100%;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            cursor: help;
            position: relative;
            display: inline-block;
        }

        .filename-truncated:hover {
            background: #F3F4F6;
            border-radius: 4px;
            padding: 2px 4px;
        }

        /* Files Section Styles */
        .files-section {
            margin-top: 2rem;
        }

        .files-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            padding: 1rem 0;
        }

        .files-list {
            padding: 1rem 0;
        }

        .files-grouped {
            padding: 1rem 0;
        }

        /* Empty State Styles */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #6B7280;
        }

        .empty-state-content {
            max-width: 400px;
            margin: 0 auto;
        }

        .empty-state h3 {
            margin: 1rem 0 0.5rem 0;
            color: #374151;
            font-size: 1.5rem;
        }

        .empty-state p {
            margin: 0;
            font-size: 1rem;
            opacity: 0.8;
        }

        /* Active Filters Styles */
        .active-filters {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            padding: 1rem;
            background: #F9FAFB;
            border-radius: 8px;
            border: 1px solid #E5E7EB;
        }

        .filter-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            flex: 1;
        }

        .clear-filters-btn {
            padding: 0.5rem 1rem;
            background: #EF4444;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 600;
        }

        .clear-filters-btn:hover {
            background: #DC2626;
        }
    </style>
</head>

<body>
    <header class="topbar">
        <h2><a href="/dashboard" style="text-decoration: none; color: inherit; display: flex; align-items: center; cursor: pointer; transition: opacity 0.2s ease;" onmouseover="this.style.opacity='0.8'" onmouseout="this.style.opacity='1'">
            <img src="/logo.png" alt="Terp Notes Logo" style="width: 32px; height: 32px; vertical-align: middle; margin-right: 8px; pointer-events: none;" />
            Terp Notes
        </a></h2>
        <div class="user-info">
            Welcome, <strong>
                <%= firstname %>
            </strong>
            <span class="user-role role-<%= user.role %>">
                <%= user.role %>
            </span>
            <% if (user.role==='admin' ) { %>
                | <a href="/admin" class="logout-btn">Admin Panel</a>
                <% } %>
                    | <a href="/profile" class="logout-btn">My Profile</a>
                    | <a href="/logout" class="logout-btn">Logout</a>
        </div>
    </header>

    <main class="container">
        <!-- Announcements Section -->
        <% if (announcements && announcements.length > 0) { %>
            <% announcements.forEach(announcement=> { %>
                <div class="announcement-banner announcement-banner-<%= announcement.type %>">
                    <div style="flex: 1; font-weight: 600;">
                        <%= announcement.message %>
                    </div>
                </div>
                <% }); %>
                    <% } %>

                        <div class="dashboard-controls">
                            <div class="search-bar">
                                <input type="text" id="searchInput" placeholder="Search notes..." />
                                <button type="button" onclick="applyFilters()">Search</button>
                            </div>

                            <!-- Sort Options -->
                            <div style="display: flex; align-items: center; gap: 0.75rem; margin: 0.5rem 0;">
                                <label style="color: #374151; font-weight: 600; font-size: 0.875rem;">Sort by:</label>
                                <select id="sortFilter" class="filter-select" onchange="applyFilters()"
                                    style="flex: 0 0 auto; min-width: 180px;">
                                    <!-- Sort options will be populated dynamically -->
                                </select>
                            </div>

                            <div
                                style="display: flex; justify-content: space-between; align-items: center; margin: 0.5rem 0; flex-wrap: wrap; gap: 1rem;">
                                <p style="color: #6B7280; font-size: 0.875rem; margin: 0;">
                                    💡 <strong>Tip:</strong> Click Category, Semester, Year, or Class filters to select multiple options
                                </p>
                                <div style="display: flex; align-items: center; gap: 1rem;">
                                    <!-- View Toggle -->
                                    <div
                                        style="display: flex; gap: 0.5rem; background: #F3F4F6; padding: 4px; border-radius: 8px;">
                                        <button id="groupedViewBtn" onclick="switchView('grouped')"
                                            style="padding: 6px 12px; border: none; background: var(--umd-red); color: white; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            Grouped
                                        </button>
                                        <button id="gridViewBtn" onclick="switchView('grid')"
                                            style="padding: 6px 12px; border: none; background: transparent; color: #6B7280; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            Grid
                                        </button>
                                        <button id="listViewBtn" onclick="switchView('list')"
                                            style="padding: 6px 12px; border: none; background: transparent; color: #6B7280; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            List
                                        </button>
                                    </div>

                                    <!-- Bulk Actions -->
                                    <div id="bulkActions" style="display: none; margin-left: 1rem;">
                                        <button id="selectAllBtn" onclick="toggleSelectAll()"
                                            style="padding: 6px 12px; border: 1px solid #D1D5DB; background: white; color: #374151; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            Select All
                                        </button>
                                        <button id="bulkDeleteBtn" onclick="bulkDeleteFiles()"
                                            style="padding: 6px 12px; border: none; background: var(--umd-red); color: white; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s; margin-left: 0.5rem;">
                                            Delete Selected (<span id="selectedCount">0</span>)
                                        </button>
                                    </div>
                                    <label
                                        style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer; font-size: 0.875rem; color: var(--umd-red); font-weight: 600;">
                                        <input type="checkbox" id="myFilesToggle" onchange="applyFilters()"
                                            style="width: 24px; height: 24px; cursor: pointer; accent-color: var(--umd-red);">
                                        <span><img src="/images/icons/folder.png" alt="Folder" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> Show Only My Files</span>
                                    </label>
                                </div>
                            </div>

                            <div class="filter-controls">
                                <!-- Category Multi-Select Dropdown (1st) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="categoryBtn"
                                        onclick="toggleDropdown('category')">
                                        <span id="categoryLabel">All Categories</span>
                                        <span class="dropdown-arrow">↓</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="categoryDropdown">
                                        <!-- Categories will be populated dynamically -->
                                    </div>
                                </div>

                                <!-- Semester Multi-Select Dropdown (2nd) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="semesterBtn"
                                        onclick="toggleDropdown('semester')">
                                        <span id="semesterLabel">All Semesters</span>
                                        <span class="dropdown-arrow">↓</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="semesterDropdown">
                                        <% semesters.forEach(semester=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= semester %>"
                                                    onchange="updateMultiSelect('semester')">
                                                <span>
                                                    <%= semester %>
                                                </span>
                                            </label>
                                        <% }); %>
                                    </div>
                                </div>

                                <!-- Year Multi-Select Dropdown (3rd) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="yearBtn"
                                        onclick="toggleDropdown('year')">
                                        <span id="yearLabel">All Years</span>
                                        <span class="dropdown-arrow">↓</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="yearDropdown">
                                        <% years.forEach(year=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= year %>"
                                                    onchange="updateMultiSelect('year')">
                                                <span>
                                                    <%= year %>
                                                </span>
                                            </label>
                                            <% }); %>
                                    </div>
                                </div>

                                <!-- Major Multi-Select Dropdown (4th) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="majorBtn"
                                        onclick="toggleDropdown('major')">
                                        <span id="majorLabel">All Majors</span>
                                        <span class="dropdown-arrow">↓</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="majorDropdown">
                                        <% majors.forEach(major=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= major %>"
                                                    onchange="updateMultiSelect('major')">
                                                <span>
                                                    <%= major %>
                                                </span>
                                            </label>
                                            <% }); %>
                                    </div>
                                </div>

                                <!-- Class Multi-Select Dropdown (5th) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="classBtn"
                                        onclick="toggleDropdown('class')">
                                        <span id="classLabel">All Classes</span>
                                        <span class="dropdown-arrow">↓</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="classDropdown">
                                        <% classCodes.forEach(code=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= code %>"
                                                    data-major="<%= code.replace(/[0-9]/g, '').trim() %>"
                                                    onchange="updateMultiSelect('class')">
                                                <span>
                                                    <%= code %>
                                                </span>
                                            </label>
                                            <% }); %>
                                    </div>
                                </div>

                                <!-- Professor Multi-Select Dropdown (6th) -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="professorBtn"
                                        onclick="toggleDropdown('professor')">
                                        <span id="professorLabel">All Professors</span>
                                        <span class="dropdown-arrow">↓</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="professorDropdown">
                                        <div class="search-box">
                                            <input type="text" id="professorSearch" placeholder="Search professors..."
                                                   onkeyup="filterProfessorOptions(this.value)" />
                                        </div>
                                        <div id="professorList">
                                            <!-- Options will be populated dynamically -->
                                        </div>
                                    </div>
                            </div>
                        </div>

                            <!-- Active Filters Display (Grid View Only) -->
                            <div id="activeFilters" style="display: none; margin: 1rem 0; padding: 0.75rem; background: #F9FAFB; border-radius: 8px; border: 1px solid #E5E7EB;">
                                <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 0.5rem;">
                                    <div style="display: flex; align-items: center; gap: 0.5rem; flex-wrap: wrap;">
                                        <span style="font-weight: 600; color: #374151; font-size: 0.875rem;">Active Filters:</span>
                                        <div id="filterTags" style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                                            <!-- Hidden filter to maintain consistent width -->
                                            <span style="display: none;" id="hiddenFilter">All Files</span>
                                </div>
                                    </div>
                                    <button onclick="clearAllFilters()" style="background: var(--umd-red); color: white; border: none; padding: 4px 12px; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                        Clear All
                                    </button>
                                </div>
                            </div>
                        </div>

                        <section class="file-list">
                            <% if (files.length > 0) { %>
                                    <!-- Grid View (Hidden by default) -->
                                    <div id="gridView" class="file-grid" style="display: none;">
                                        <% files.forEach(file=> { %>
                                            <div class="file-card animate-fade-in" data-class="<%= file.classCode %>"
                                                data-major="<%= file.major || '' %>"
                                                data-semester="<%= file.semester || '' %>"
                                                data-year="<%= file.year || '' %>"
                                                data-category="<%= (file.category || '').toLowerCase() %>"
                                                data-professor="<%= (file.professor || '').toLowerCase() %>"
                                                data-uploader="<%= file.uploadedBy %>"
                                                data-name="<%= file.originalName.toLowerCase() %>"
                                                data-date="<%= new Date(file.uploadDate).getTime() %>"
                                                data-downloads="<%= file.downloadCount || 0 %>"
                                                data-size="<%= file.size || 0 %>">
                                                <div class="file-header" style="position: relative;">
                                                    <!-- Bulk select checkbox -->
                                                    <div style="position: absolute; top: 0.5rem; left: 0.5rem; z-index: 20; background: rgba(255,255,255,0.9); padding: 2px; border-radius: 4px; border: 1px solid #D1D5DB;">
                                                        <input type="checkbox" class="file-select-checkbox" data-filename="<%= file.filename %>"
                                                            style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--umd-red); transform: scale(1.2);"
                                                            onchange="updateSelectedCount()" />
                                                    </div>
                                                    <div style="position: absolute; top: 0.5rem; right: 0.5rem; background: #FEF3C7; color: #92400E; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600; cursor: help; z-index: 10;" title="<%= file.downloadCount || 0 %> downloads">
                                                        <%= file.downloadCount || 0 %>
                                                    </div>
                                                    <%
                                                        // Dynamic file icon based on mimetype
                                                        let fileIcon = '<img src="/images/icons/document.png" alt="Document" style="width: 80px; height: 80px;" />';
                                                        let fileTypeLabel = '';
                                                        if (file.mimetype) {
                                                            if (file.mimetype.includes('pdf')) {
                                                                fileIcon = '<img src="/images/icons/pdf-file.png" alt="PDF" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'PDF';
                                                            } else if (file.mimetype.includes('word') || file.mimetype.includes('document')) {
                                                                fileIcon = '<img src="/images/icons/word-file.png" alt="Word" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'DOC';
                                                            } else if (file.mimetype.includes('presentation') || file.mimetype.includes('powerpoint')) {
                                                                fileIcon = '<img src="/images/icons/powerpoint-file.png" alt="PowerPoint" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'PPT';
                                                            } else if (file.mimetype.includes('spreadsheet') || file.mimetype.includes('excel')) {
                                                                fileIcon = '<img src="/images/icons/excel-file.png" alt="Excel" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'XLS';
                                                            } else if (file.mimetype.includes('image')) {
                                                                fileIcon = '<img src="/images/icons/image-file.png" alt="Image" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'IMG';
                                                            } else if (file.mimetype.includes('text')) {
                                                                fileIcon = '<img src="/images/icons/text-file.png" alt="Text" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'TXT';
                                                            } else if (file.mimetype.includes('zip') || file.mimetype.includes('compressed')) {
                                                                fileIcon = '<img src="/images/icons/zip-file.png" alt="Archive" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'ZIP';
                                                            } else if (file.mimetype.includes('python')) {
                                                                fileIcon = '<img src="/images/icons/python-file.png" alt="Python" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'PY';
                                                            } else if (file.mimetype.includes('java')) {
                                                                fileIcon = '<img src="/images/icons/java-file.png" alt="Java" style="width: 80px; height: 80px;" />';
                                                                fileTypeLabel = 'JAVA';
                                                            }
                                                        }
                                                    %>
                                                        <div class="file-icon" style="font-size: 2.5rem;">
                                                            <%= fileIcon %>
                                                        </div>
                                                        <div class="file-info">
                                                            <h3 style="margin: 0 0 0.1rem 0; font-size: 1rem;">
                                                                <%= file.originalName %>
                                                            </h3>
                                                            <div
                                                                style="display: flex; flex-wrap: wrap; gap: 0.5rem; align-items: center;">
                                                                        <% if (file.category) { let
                                                                            categoryClass='category-other' ; if
                                                                            (file.category==='Exam' ) {
                                                                                categoryClass = 'category-exam';
                                                                            } else if
                                                                            (file.category==='Lecture Notes' ) {
                                                                            categoryClass='category-lecture' ; } else if
                                                                            (file.category==='Homework' ) {
                                                                            categoryClass='category-homework' ; } else
                                                                            if (file.category==='Study Guide' ) {
                                                                            categoryClass='category-study' ; } else if
                                                                            (file.category==='Cheat Sheet' ) {
                                                                            categoryClass='category-cheat' ; } else if
                                                                            (file.category==='Project' ) {
                                                                            categoryClass='category-project' ; } else if
                                                                            (file.category==='Lab' ) {
                                                                            categoryClass='category-lab' ; } %>
                                                                            <span class="category-badge <%= categoryClass %>">
                                                                                <%= file.category %>
                                                                            </span>
                                                                            <% } %>
                                                                                        <%
                                                                                            // Calculate days ago
                                                                                            const uploadDate = new Date(file.uploadDate);
                                                                                            const now = new Date();
                                                                                            const daysAgo = Math.floor((now - uploadDate) / (1000 * 60 * 60 * 24));
                                                                                        %>
                                                                                            <% if (daysAgo <= 7) { %>
                                                                                                <span
                                                                                                    style="background: #D1FAE5; color: #065F46; padding: 2px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">
                                                                                                    <img src="/images/icons/new-badge.png" alt="New" style="width: 24px; height: 24px; vertical-align: middle; margin-right: 6px;" /> New
                                                                                                </span>
                                                                                                <% } %>
                                                                                                    <%
                                                                                                        const sizeKB = file.size / 1024;
                                                                                                        let sizeClass = 'size-normal';
                                                                                                        let sizeLabel = '';
                                                                                                        if (sizeKB < 1024) {
                                                                                                            sizeLabel = sizeKB.toFixed(0) + ' KB';
                                                                                                        } else {
                                                                                                            sizeLabel = (sizeKB / 1024).toFixed(1) + ' MB';
                                                                                                            if (sizeKB / 1024 > 10) {
                                                                                                                sizeClass = 'size-large';
                                                                                                            }
                                                                                                        }
                                                                                                    %>
                                                                                                        <span class="size-badge <%= sizeClass %>">
                                                                                                            <%= sizeLabel %>
                                                                                                        </span>
                                                            </div>
                                                        </div>
                                                </div>

                                                <div class="file-meta">
                                                    <% if (file.virusScanStatus) { %>
                                                        <div class="file-meta-item">
                                                            <strong>Security:</strong>
                                                            <% if (file.virusScanStatus==='clean' ) { %>
                                                                <span class="scan-badge scan-clean">Virus
                                                                    Scanned</span>
                                                                <% } else if (file.virusScanStatus==='pending' ) { %>
                                                                    <span class="scan-badge scan-pending">
                                                                        ⏳ Scanning...</span>
                                                                    <% } else if (file.virusScanStatus==='error' ) { %>
                                                                        <span class="scan-badge scan-error">❌ Scan
                                                                            Error</span>
                                                                        <% } %>
                                                        </div>
                                                        <% } %>
                                                            <% if (file.major) { %>
                                                                <div class="file-meta-item">
                                                                    <strong>Major:</strong> <span class="major-badge">
                                                                        <%= file.major %>
                                                                    </span>
                                                                </div>
                                                                <% } %>
                                                                    <% if (file.classCode) { %>
                                                                        <div class="file-meta-item">
                                                                            <strong>Class:</strong> <span
                                                                                class="class-code-badge">
                                                                                <%= file.classCode %>
                                                                            </span>
                                                                        </div>
                                                                        <% } %>
                                                                            <% if (file.professor) { %>
                                                                                <div class="file-meta-item">
                                                                                    <strong>Professor:</strong>
                                                                                    <%= file.professor %>
                                                                                </div>
                                                                                <% } %>
                                                                                    <% if (file.semester && file.year) {
                                                                                        %>
                                                                                        <div class="file-meta-item">
                                                                                            <strong>Term:</strong>
                                                                                            <%= file.semester %>
                                                                                                <%= file.year %>
                                                                                        </div>
                                                                                        <% } %>
                                                                                            <div class="file-meta-item">
                                                                                                <strong>Uploaded
                                                                                                    by:</strong>
                                                                                                <%= file.uploadedBy %>
                                                                                            </div>
                                                                                            <div class="file-meta-item">
                                                                                                <strong>Size:</strong>
                                                                                                <%= (file.size /
                                                                                                    1024).toFixed(1) %>
                                                                                                    KB
                                                                                            </div>
                                                                                            <% if (file.description) {
                                                                                                %>
                                                                                                <div
                                                                                                    class="file-meta-item">
                                                                                                    <strong>Description:</strong>
                                                                                                    <%= file.description
                                                                                                        %>
                                                                                                </div>
                                                                                                <% } %>
                                                </div>

                                                <div class="file-actions">
                                                    <a href="/download/<%= encodeURIComponent(file.filename) %>"
                                                        class="button download" target="_blank">Download</a>
                                                    <% if (user.role==='viewer' ) { %>
                                                        <button class="button danger disabled"
                                                            onclick="showViewerAlert(); return false;"
                                                            title="View-only mode">Delete</button>
                                                        <% } else if (user.role==='admin' ||
                                                            file.uploadedBy===user.userid) { %>
                                                            <a href="/delete/<%= encodeURIComponent(file.filename) %>"
                                                                class="button danger"
                                                                onclick="return confirm('Are you sure you want to delete this file?')">Delete</a>
                                                            <% } else { %>
                                                                <button class="button danger disabled" disabled
                                                                    title="You can only delete your own files">Delete</button>
                                                                <% } %>
                                                                    <button class="button secondary small report-btn"
                                                                        data-filename="<%= file.filename %>"
                                                                        data-original-name="<%= file.originalName %>">🚩
                                                                        Report</button>
                                                </div>
                                            </div>
                                            <% }); %>
                                    </div>

                                    <!-- Grouped View (Default) -->
                                    <div id="groupedView" class="file-grid" style="display: block;">
                                        <!-- This will be populated by JavaScript -->
                                    </div>

                                    <!-- List View (Hidden by default) -->
                                    <div id="listView" class="file-list" style="display: none;">
                                        <!-- This will be populated by JavaScript -->
                                    </div>
                                    <% } %>

                                    <!-- Empty state will be handled by JavaScript -->
                        </section>

                        <section class="upload-section">
                            <% if (user.role==='viewer' ) { %>
                                <div class="upload-disabled">
                                    <div class="upload-disabled-content">
                                        <div class="upload-disabled-icon"><img src="/images/icons/lock.png" alt="Locked" style="width: 234px; height: 234px;" /></div>
                                        <h4>Upload Restricted - View-Only Mode</h4>
                                        <p>Your account has been set to view-only access. You can download files but
                                            cannot upload or
                                            delete.</p>
                                        <p style="margin-top: 1rem;">Contact an administrator if you need upload/delete
                                            permissions.</p>
                                        <button class="button primary" style="margin-top: 1rem;"
                                            onclick="showViewerAlert()">
                                            Learn More
                                        </button>
                                    </div>
                                </div>
                                <% } else { %>
                                    <div class="upload-header">
                                        <h3>Upload Notes</h3>
                                        <p>Share your class notes with fellow Terps. Select one or multiple files!</p>
                                        <div class="file-type-notice">
                                            <strong>Supported File Types:</strong> Documents (.pdf, .docx, .pptx,
                                            .xlsx, .txt),
                                            Images (.jpg, .png, .gif, .svg), Code files (.py, .java, .c, .cpp, .js,
                                            .html, .css),
                                            Archives (.zip)
                                            <br>
                                            <small style="color: #6B7280; margin-top: 0.5rem; display: block;">
                                                <img src="/images/icons/shield-check.png" alt="Security" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> For your safety, we currently limit file types to those commonly used
                                                in academic
                                                settings. We're actively working on implementing virus scanning to
                                                support additional
                                                file formats in the future!
                                            </small>
                                        </div>
                                    </div>

                                    <form action="/upload" method="POST" enctype="multipart/form-data"
                                        class="upload-form" id="uploadForm">
                                        <div class="form-group">
                                            <label for="documents" class="form-label">
                                                Select Files<span class="required">*</span>
                                            </label>
                                            <div class="upload-drop-zone" id="dropZone">
                                                <input type="file" name="documents" id="documents"
                                                    class="file-input-hidden" multiple />
                                                <div class="drop-zone-content">
                                                    <div class="drop-zone-icon"><img src="/images/icons/upload-cloud.png" alt="Upload" style="width: 234px; height: 234px;" /></div>
                                                    <p class="drop-zone-text">
                                                        <strong>Click to browse</strong> or drag and drop files here
                                                    </p>
                                                    <p class="drop-zone-hint">
                                                        Upload one or multiple files (up to 50 files, 100MB each)
                                                    </p>
                                                </div>
                                                <div class="selected-files" id="selectedFiles"></div>
                                            </div>
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="classCode" class="form-label">Class Code<span
                                                        class="required">*</span></label>
                                                <div class="custom-dropdown-wrapper">
                                                    <input type="text" name="classCode" id="classCode"
                                                        class="form-input" placeholder="e.g. CMSC330, HIST000"
                                                        autocomplete="off" />
                                                    <div class="custom-dropdown" id="coursesDropdown"></div>
                                                </div>
                                                <small class="form-help" id="courseInfo"
                                                    style="color: #6B7280; font-size: 0.75rem;">
                                                    Start typing to see course suggestions...
                                                </small>
                                            </div>

                                            <div class="form-group">
                                                <label for="professor" class="form-label">Professor<span
                                                        class="required">*</span></label>
                                                <div class="custom-dropdown-wrapper">
                                                    <input type="text" name="professor" id="professor"
                                                        class="form-input" placeholder="e.g., Dr. Nelson, Prof. Smith"
                                                        autocomplete="off" />
                                                    <div class="custom-dropdown" id="professorsDropdown"></div>
                                                </div>
                                                <small class="form-help" id="professorHelp"
                                                    style="color: #9CA3AF; font-size: 0.75rem;">
                                                    Select a course first to see professors, then type to filter
                                                </small>
                                                <div id="professorSemesterInfo" style="margin-top: 4px;"></div>
                                            </div>
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="semester" class="form-label">Semester<span
                                                        class="required">*</span></label>
                                                <select name="semester" id="semester" class="form-input">
                                                    <option value="">Select semester</option>
                                                    <option value="Fall">Fall</option>
                                                    <option value="Spring">Spring</option>
                                                    <option value="Summer">Summer</option>
                                                    <option value="Winter">Winter</option>
                                                </select>
                                            </div>

                                            <div class="form-group">
                                                <label for="year" class="form-label">Year<span
                                                        class="required">*</span></label>
                                                <select name="year" id="year" class="form-input">
                                                    <option value="">Select year</option>
                                                    <% for (let y=new Date().getFullYear(); y >= 2020; y--) { %>
                                                        <option value="<%= y %>">
                                                            <%= y %>
                                                        </option>
                                                        <% } %>
                                                </select>
                                                <small class="form-help" style="color: #9CA3AF; font-size: 0.75rem;">
                                                    Past semesters only (2021-present)
                                                </small>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label for="category" class="form-label">Category<span
                                                    class="required">*</span></label>
                                            <select name="category" id="category" class="form-input">
                                                <option value="">Select category</option>
                                                <option value="Exam">📝 Exam</option>
                                                <option value="Lecture Notes">📚 Lecture Notes</option>
                                                <option value="Homework">✏️ Homework</option>
                                                <option value="Study Guide">📖 Study Guide</option>
                                                <option value="Cheat Sheet">🗒️ Cheat Sheet</option>
                                                <option value="Project">💻 Project</option>
                                                <option value="Lab">🧪 Lab</option>
                                                <option value="Textbook">📕 Textbook</option>
                                                <option value="Practice Problems">🔢 Practice Problems</option>
                                                <option value="Other">📎 Other</option>
                                            </select>
                                            <small class="form-help">
                                                Help others find your notes by categorizing them
                                            </small>
                                        </div>

                                        <div class="form-group">
                                            <label for="description" class="form-label">Description<span
                                                    class="required">*</span></label>
                                            <textarea name="description" id="description" class="form-textarea"
                                                placeholder="e.g., Week 1 Lectures, Midterm Study Guide, Chapter 3 Summary"
                                                rows="2"></textarea>
                                            <small class="form-help">
                                                Examples: "Week 5 Lectures", "Midterm Review", "Chapter 1-3 Notes"
                                            </small>
                                        </div>

                                        <div class="form-group">
                                            <label class="checkbox-label" style="display: flex; align-items: flex-start; gap: 0.75rem; cursor: pointer; font-size: 0.875rem; line-height: 1.5;">
                                                <input type="checkbox" id="academicIntegrity"
                                                       style="width: 18px; height: 18px; margin-top: 2px; accent-color: var(--umd-red); flex-shrink: 0;">
                                                <span>
                                                    <strong>Academic Integrity Agreement</strong><span class="required" style="color: #EF4444;">*</span><br>
                                                      <span style="color: #6B7280; font-size: 0.8rem;">
                                                         I confirm that all uploaded materials are my own work or properly cited, and do not violate University of Maryland's academic integrity policies. I understand that sharing copyrighted materials or violating academic honesty policies may result in account suspension and reporting to UMD's Academic Integrity committee.
                                                      </span>
                                                </span>
                                            </label>
                                        </div>

                                        <div class="form-actions">
                                            <button type="submit" class="button primary" id="uploadSubmitBtn">
                                                Upload Files
                                            </button>
                                        </div>
                                    </form>
                                    <% } %>
                        </section>

        <!-- Files Display Section -->
        <section class="files-section">
            <!-- Active Filters Display -->
            <div id="activeFilters" class="active-filters" style="display: none;">
                <div class="filter-tags" id="filterTags"></div>
                <button onclick="clearAllFilters()" class="clear-filters-btn">Clear All</button>
            </div>

            <!-- Grid View -->
            <div id="gridView" class="files-grid" style="display: none;">
                <!-- Grid view files will be rendered here -->
            </div>

            <!-- Grouped View -->
            <div id="groupedView" class="files-grouped">
                <!-- Grouped view files will be rendered here -->
            </div>

            <!-- List View -->
            <div id="listView" class="files-list" style="display: none;">
                <!-- List view files will be rendered here -->
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="empty-state" style="display: none;">
                <div class="empty-state-content">
                    <img src="/images/icons/folder.png" alt="No files" style="width: 80px; height: 80px; opacity: 0.5; margin-bottom: 1rem;">
                    <h3>No files found</h3>
                    <p>Upload some files to get started!</p>
                </div>
            </div>
                        </section>
    </main>

    <!-- Floating Action Button for Upload -->
    <% if (user.role !=='viewer' ) { %>
        <button class="fab-upload" id="fabUpload" title="Upload Files">
            <span class="fab-icon">+</span>
            <span class="fab-text">Upload</span>
        </button>
        <% } %>

        <!-- Edit File Modal -->
        <div id="editFileModal" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Edit File Details</h3>
                    <span class="close" onclick="closeEditModal()">&times;</span>
                </div>
                <div class="modal-body">
                    <form id="editFileForm">
                        <input type="hidden" id="editFileId" name="fileId">

                        <div class="form-row">
                            <div class="form-group">
                                <label for="editClassCode" class="form-label">Class Code<span class="required">*</span></label>
                                <input type="text" id="editClassCode" name="classCode" class="form-input" required autocomplete="off" list="editClassCodeSuggestions">
                                <datalist id="editClassCodeSuggestions"></datalist>
                            </div>
                            <div class="form-group">
                                <label for="editProfessor" class="form-label">Professor<span class="required">*</span></label>
                                <input type="text" id="editProfessor" name="professor" class="form-input" required autocomplete="off" list="editProfessorSuggestions">
                                <datalist id="editProfessorSuggestions"></datalist>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="editSemester" class="form-label">Semester<span class="required">*</span></label>
                                <select id="editSemester" name="semester" class="form-select" required>
                                    <option value="">Select Semester</option>
                                    <option value="Spring">Spring</option>
                                    <option value="Summer">Summer</option>
                                    <option value="Fall">Fall</option>
                                    <option value="Winter">Winter</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="editYear" class="form-label">Year<span class="required">*</span></label>
                                <select id="editYear" name="year" class="form-select" required>
                                    <option value="">Select Year</option>
                                    <% for (let y=new Date().getFullYear(); y >= 2020; y--) { %>
                                        <option value="<%= y %>"><%= y %></option>
                                    <% } %>
                                </select>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="editCategory" class="form-label">Category<span class="required">*</span></label>
                            <select id="editCategory" name="category" class="form-select" required>
                                <option value="">Select Category</option>
                                <option value="📚 Lecture Notes">📚 Lecture Notes</option>
                                <option value="✏️ Homework">✏️ Homework</option>
                                <option value="📖 Textbook">📖 Textbook</option>
                                <option value="📝 Practice Problems">📝 Practice Problems</option>
                                <option value="📊 Exam">📊 Exam</option>
                                <option value="📋 Study Guide">📋 Study Guide</option>
                                <option value="💻 Project">💻 Project</option>
                                <option value="🔬 Lab Report">🔬 Lab Report</option>
                                <option value="📄 Other">📄 Other</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="editDescription" class="form-label">Description<span class="required">*</span></label>
                            <textarea id="editDescription" name="description" class="form-textarea" rows="3" required placeholder="e.g., Week 1 Lectures, Midterm Study Guide, Chapter 3 Summary"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="button secondary" onclick="closeEditModal()">Cancel</button>
                    <button type="button" class="button primary" onclick="saveFileEdit()">Save Changes</button>
                </div>
            </div>
        </div>

            <script type="application/json" id="filesData"><%- JSON.stringify(files) %></script>

            <!-- App.js functionality now integrated directly in pages -->
            <script>
                // Store all files data in JavaScript for client-side filtering
                let allFilesData = [];
                try {
                    const filesDataElement = document.getElementById('filesData');
                    if (filesDataElement && filesDataElement.textContent) {
                        allFilesData = JSON.parse(filesDataElement.textContent);
                    }
                } catch (error) {
                    console.error('Error parsing files data:', error);
                    allFilesData = [];
                }

                // Dashboard configuration (loaded dynamically)
                let dashboardConfig = null;

                // Current view mode
                let currentView = localStorage.getItem('dashboardView') || 'grouped';

                // Load dashboard configuration
                async function loadDashboardConfig() {
                    try {
                        const response = await fetch('/api/dashboard-config');
                          if (response.ok) {
                              dashboardConfig = await response.json();
                          } else {
                              // Use fallback configuration if loading fails
                              dashboardConfig = getFallbackConfig();
                          }
                      } catch (error) {
                          dashboardConfig = getFallbackConfig();
                      }
                }

                // Fallback configuration in case API fails
                function getFallbackConfig() {
                    return {
                        categories: {
                            'Exam': { icon: '📝', displayName: 'Exam' },
                            'Lecture Notes': { icon: '📚', displayName: 'Lecture Notes' },
                            'Homework': { icon: '✏️', displayName: 'Homework' },
                            'Study Guide': { icon: '📖', displayName: 'Study Guide' },
                            'Cheat Sheet': { icon: '🗒️', displayName: 'Cheat Sheet' },
                            'Project': { icon: '💻', displayName: 'Project' }
                        },
                        statusBadges: {
                            new: { enabled: true, thresholdDays: 7, text: 'New' },
                            scanned: { enabled: true, text: 'Scanned' }
                        },
                        semesters: {
                            colors: {
                                'Fall': { background: 'linear-gradient(135deg, #FFD700 0%, #FFA500 100%)', textColor: '#000000' },
                                'Spring': { background: 'linear-gradient(135deg, #DC143C 0%, #A50E2A 100%)', textColor: 'white' },
                                'Summer': { background: 'linear-gradient(135deg, #000000 0%, #333333 100%)', textColor: 'white' },
                                'Winter': { background: 'linear-gradient(135deg, #4A90E2 0%, #357ABD 100%)', textColor: 'white' }
                            }
                        }
                    };
                }

                // Initialize view on page load
                document.addEventListener('DOMContentLoaded', async function () {
                    // Load configuration first
                    await loadDashboardConfig();

                    // Always initialize the current view to ensure proper state
                    if (currentView === 'grouped') {
                        switchView('grouped', false);
                    } else if (currentView === 'list') {
                        switchView('list', false);
                    } else {
                        switchView('grid', false);
                    }

                    // Initialize bulk actions state
                    initializeBulkActions();

                    // Initialize professor dropdown
                    initializeProfessorDropdown();

                    // Initialize category dropdown
                    initializeCategoryDropdown();

                    // Initialize sort options
                    initializeSortOptions();
                });

                // Smart folder opening based on active filters
                function smartOpenFolders() {
                    // Get active filter values
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);

                    // If no filters are active, don't auto-open anything
                    if (selectedSemesters.length === 0 && selectedYears.length === 0 &&
                        selectedMajors.length === 0 && selectedClasses.length === 0) {
                        return;
                    }

                    // Open semester folders that match selected years or semesters
                    const semesterHeaders = document.querySelectorAll('.semester-header');
                    semesterHeaders.forEach(header => {
                        const fullText = header.textContent.trim();
                        const semesterName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                        // Extract year from semester name (e.g., "Fall 2021" -> "2021")
                        const yearFromSemester = semesterName.split(' ').pop();
                        const semesterPart = semesterName.replace(/\s+\d+$/, '').trim();

                        let shouldOpen = false;

                        // Check if semester matches selected filters
                        if (selectedSemesters.length > 0 && selectedSemesters.includes(semesterPart)) {
                            shouldOpen = true;
                        }
                        if (selectedYears.length > 0 && selectedYears.includes(yearFromSemester)) {
                            shouldOpen = true;
                        }

                        if (shouldOpen) {
                            const majorList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            if (majorList && majorList.style.display === 'none') {
                                majorList.style.display = 'block';
                                if (icon) icon.style.transform = 'rotate(90deg)';
                                persistentFolderStates.semesters[semesterName] = true;
                            }
                        }
                    });

                    // Open major folders that match selected majors
                    if (selectedMajors.length > 0) {
                        const majorHeaders = document.querySelectorAll('.major-header');
                        majorHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const majorName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                            if (selectedMajors.includes(majorName)) {
                                const courseList = header.nextElementSibling;
                                const icon = header.querySelector('.expand-icon');
                                if (courseList && courseList.style.display === 'none') {
                                    courseList.style.display = 'block';
                                    if (icon) icon.style.transform = 'rotate(90deg)';
                                    persistentFolderStates.majors[majorName] = true;
                                }
                            }
                        });
                    }

                    // Open course folders that match selected classes
                    if (selectedClasses.length > 0) {
                        const courseHeaders = document.querySelectorAll('.course-header');
                        courseHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const courseName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            if (selectedClasses.includes(courseName)) {
                                const categoryList = header.nextElementSibling;
                                const icon = header.querySelector('.expand-icon');
                                if (categoryList && categoryList.style.display === 'none') {
                                    categoryList.style.display = 'block';
                                    if (icon) icon.style.transform = 'rotate(90deg)';
                                    persistentFolderStates.courses[courseName] = true;
                                }
                            }
                        });
                    }

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Switch between grid, grouped, and list views
                function switchView(view, savePreference = true) {
                    console.log('switchView function called with:', view);
                    const gridView = document.getElementById('gridView');
                    const groupedView = document.getElementById('groupedView');
                    const listView = document.getElementById('listView');
                    const emptyState = document.getElementById('emptyState');
                    const gridBtn = document.getElementById('gridViewBtn');
                    const groupedBtn = document.getElementById('groupedViewBtn');
                    const listBtn = document.getElementById('listViewBtn');
                    const activeFiltersContainer = document.getElementById('activeFilters');

                    // Check if view elements exist
                    if (!gridView || !groupedView || !listView) {
                        return;
                    }

                    // Get filter elements
                    const majorWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(4)'); // Major dropdown
                    const classWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(5)'); // Class dropdown
                    const categoryWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(1)'); // Category dropdown
                    const professorFilter = document.getElementById('professorFilter');
                    const yearWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(3)'); // Year dropdown
                    const semesterWrapper = document.querySelector('.multi-select-wrapper:nth-of-type(2)'); // Semester dropdown

                    currentView = view;

                    // Hide all views first
                    gridView.style.display = 'none';
                        groupedView.style.display = 'none';
                        listView.style.display = 'none';
                    if (emptyState) emptyState.style.display = 'none';

                    // Check if there are any files
                    const hasFiles = allFilesData && allFilesData.length > 0;

                    if (!hasFiles) {
                        // Show empty state when no files
                        if (emptyState) {
                            emptyState.style.display = 'block';
                        }

                        // Hide bulk actions when no files
                        const bulkActions = document.getElementById('bulkActions');
                        if (bulkActions) {
                            bulkActions.style.display = 'none';
                        }

                        // Hide active filters when no files
                        if (activeFiltersContainer) {
                            activeFiltersContainer.style.display = 'none';
                        }

                        return;
                    }

                    if (view === 'grid') {
                        gridView.style.display = 'grid';
                        gridBtn.style.background = 'var(--umd-red)';
                        gridBtn.style.color = 'white';
                        groupedBtn.style.background = 'transparent';
                        groupedBtn.style.color = '#6B7280';
                        listBtn.style.background = 'transparent';
                        listBtn.style.color = '#6B7280';

                        // Show bulk actions for grid view
                        const bulkActions = document.getElementById('bulkActions');
                        if (bulkActions) {
                            bulkActions.style.display = 'flex';
                        }

                        // Show all filters in grid view
                        if (categoryWrapper) categoryWrapper.style.display = 'block';
                        if (semesterWrapper) semesterWrapper.style.display = 'block';
                        if (yearWrapper) yearWrapper.style.display = 'block';
                        if (majorWrapper) majorWrapper.style.display = 'block';
                        if (classWrapper) classWrapper.style.display = 'block';
                        if (professorFilter) professorFilter.style.display = 'block';

                        // Show active filters in grid view
                        if (activeFiltersContainer) activeFiltersContainer.style.display = 'block';

                        // Apply all filters to grid view
                        applyFilters();
                    } else if (view === 'grouped') {
                        groupedView.style.display = 'block';
                        gridBtn.style.background = 'transparent';
                        gridBtn.style.color = '#6B7280';
                        groupedBtn.style.background = 'var(--umd-red)';
                        groupedBtn.style.color = 'white';
                        listBtn.style.background = 'transparent';
                        listBtn.style.color = '#6B7280';

                        // Show bulk actions for grouped view
                        const bulkActions = document.getElementById('bulkActions');
                        if (bulkActions) {
                            bulkActions.style.display = 'flex';
                        }

                        // Hide most filters in grouped view, keep only professor search
                        if (categoryWrapper) categoryWrapper.style.display = 'none';
                        if (semesterWrapper) semesterWrapper.style.display = 'none';
                        if (yearWrapper) yearWrapper.style.display = 'none';
                        if (majorWrapper) majorWrapper.style.display = 'none';
                        if (classWrapper) classWrapper.style.display = 'none';
                        if (professorFilter) professorFilter.style.display = 'block'; // Keep professor search

                        // Show active filters in grouped view (but only relevant ones)
                        if (activeFiltersContainer) activeFiltersContainer.style.display = 'block';

                        // Render grouped view
                        renderGroupedView();

                        // Smart folder opening based on active filters
                        setTimeout(() => {
                            smartOpenFolders();
                        }, 50);
                    } else if (view === 'list') {
                        listView.style.display = 'block';
                        gridBtn.style.background = 'transparent';
                        gridBtn.style.color = '#6B7280';
                        groupedBtn.style.background = 'transparent';
                        groupedBtn.style.color = '#6B7280';
                        listBtn.style.background = 'var(--umd-red)';
                        listBtn.style.color = 'white';

                        // Show bulk actions for list view
                        const bulkActions = document.getElementById('bulkActions');
                        if (bulkActions) {
                            bulkActions.style.display = 'flex';
                        }

                        // Show all filters in list view
                        if (categoryWrapper) categoryWrapper.style.display = 'block';
                        if (semesterWrapper) semesterWrapper.style.display = 'block';
                        if (yearWrapper) yearWrapper.style.display = 'block';
                        if (majorWrapper) majorWrapper.style.display = 'block';
                        if (classWrapper) classWrapper.style.display = 'block';
                        if (professorFilter) professorFilter.style.display = 'block';

                        // Show active filters in list view
                        if (activeFiltersContainer) activeFiltersContainer.style.display = 'block';

                        // Apply all filters to list view
                        applyFilters();
                    }


                    if (savePreference) {
                        localStorage.setItem('dashboardView', view);
                    }

                    // Reset all file selections when switching views
                    resetAllSelections();
                }

                // Render grouped view with accordion structure

                // Global state management for folder states
                let persistentFolderStates = {
                    majors: {},
                    semesters: {},
                    courses: {},
                    categories: {}
                };

                // Function to check if an element is visually visible (considering parent visibility)
                function isElementVisuallyVisible(element) {
                    if (!element) return false;

                    // Check if element itself is hidden
                    if (element.style.display === 'none') return false;

                    // Check if any parent containers are hidden
                    let parent = element.parentElement;
                    while (parent && parent !== document.body) {
                        if (parent.style.display === 'none') return false;
                        parent = parent.parentElement;
                    }

                    return true;
                }

                // Function to update the expand/collapse all button text
                function updateExpandCollapseButtonText() {
                    const button = document.getElementById('expandAllBtn');
                    if (!button) return;


                    // Check actual visual state of folders, not just persistent state
                    let hasVisuallyOpenFolders = false;
                    let openFolders = [];

                    // Check major folders
                    const majorHeaders = document.querySelectorAll('.major-header');
                    majorHeaders.forEach(header => {
                        const semesterList = header.nextElementSibling;
                        const display = semesterList ? semesterList.style.display : 'none';
                        const isVisible = isElementVisuallyVisible(semesterList);
                        if (semesterList && semesterList.style.display === 'block' && isVisible) {
                            hasVisuallyOpenFolders = true;
                            openFolders.push(`Major: ${header.textContent.trim()}`);
                        }
                    });

                    // Check semester folders
                    const semesterHeaders = document.querySelectorAll('.semester-header');
                    semesterHeaders.forEach(header => {
                        const courseList = header.nextElementSibling;
                        const display = courseList ? courseList.style.display : 'none';
                        const isVisible = isElementVisuallyVisible(courseList);
                        if (courseList && courseList.style.display === 'block' && isVisible) {
                            hasVisuallyOpenFolders = true;
                            openFolders.push(`Semester: ${header.textContent.trim()}`);
                        }
                    });

                    // Check course folders
                    const courseHeaders = document.querySelectorAll('.course-header');
                    courseHeaders.forEach(header => {
                        const categoryList = header.nextElementSibling;
                        const display = categoryList ? categoryList.style.display : 'none';
                        const isVisible = isElementVisuallyVisible(categoryList);
                        if (categoryList && categoryList.style.display === 'block' && isVisible) {
                            hasVisuallyOpenFolders = true;
                            openFolders.push(`Course: ${header.textContent.trim()}`);
                        }
                    });

                    // Check category folders
                    const categoryHeaders = document.querySelectorAll('.category-header');
                    categoryHeaders.forEach(header => {
                        const fileList = header.nextElementSibling;
                        const display = fileList ? fileList.style.display : 'none';
                        const isVisible = isElementVisuallyVisible(fileList);
                        if (fileList && (fileList.style.display === 'grid' || fileList.style.display === 'block') && isVisible) {
                            hasVisuallyOpenFolders = true;
                            openFolders.push(`Category: ${header.textContent.trim()}`);
                        }
                    });


                    if (hasVisuallyOpenFolders) {
                        button.textContent = 'Collapse All';
                    } else {
                        button.textContent = 'Expand All';
                    }
                }

                // Function to capture current folder states and update persistent state
                function captureFolderStates() {
                    // Only capture states if grouped view exists and has content
                    const groupedView = document.getElementById('groupedView');
                    if (!groupedView || groupedView.innerHTML.includes('empty-state')) {
                        return persistentFolderStates;
                    }

                    // Capture major states
                    const majorHeaders = document.querySelectorAll('.major-header');
                    majorHeaders.forEach(header => {
                        // Extract just the major name, ignoring file count and icons
                        const fullText = header.textContent.trim();
                        const majorName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();
                        const semesterList = header.nextElementSibling;
                        persistentFolderStates.majors[majorName] = semesterList && semesterList.style.display === 'block';
                    });

                    // Capture semester states
                    const semesterHeaders = document.querySelectorAll('.semester-header');
                    semesterHeaders.forEach(header => {
                        // Extract just the semester name, ignoring file count and icons
                        const fullText = header.textContent.trim();
                        const semesterName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();
                        const courseList = header.nextElementSibling;
                        persistentFolderStates.semesters[semesterName] = courseList && courseList.style.display === 'block';
                    });

                    // Capture course states
                    const courseHeaders = document.querySelectorAll('.course-header');
                    courseHeaders.forEach(header => {
                        // Extract just the course name, ignoring file count and icons
                        const fullText = header.textContent.trim();
                        const courseName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();
                        const categoryList = header.nextElementSibling;
                        persistentFolderStates.courses[courseName] = categoryList && categoryList.style.display === 'block';
                    });

                    // Capture category states
                    const categoryHeaders = document.querySelectorAll('.category-header');
                    categoryHeaders.forEach(header => {
                        // Extract just the category name, ignoring file count and icons
                        const fullText = header.textContent.trim();
                        const categoryName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();
                        const fileList = header.nextElementSibling;
                        persistentFolderStates.categories[categoryName] = fileList && (fileList.style.display === 'grid' || fileList.style.display === 'block');
                    });

                    // Update button text based on current state
                    updateExpandCollapseButtonText();

                    return persistentFolderStates;
                }

                // Function to restore folder states
                function restoreFolderStates(states) {
                    if (!states) return;


                    // Restore major states
                    Object.keys(states.majors).forEach(majorName => {
                        const majorHeader = Array.from(document.querySelectorAll('.major-header'))
                            .find(header => {
                                const fullText = header.textContent.trim();
                                const extractedName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();
                                return extractedName === majorName;
                            });
                        if (majorHeader && states.majors[majorName]) {
                            const semesterList = majorHeader.nextElementSibling;
                            if (semesterList) {
                                semesterList.style.display = 'block';
                                const icon = majorHeader.querySelector('.expand-icon');
                                if (icon) icon.style.transform = 'rotate(90deg)';
                            }
                        }
                    });

                    // Restore semester states
                    Object.keys(states.semesters).forEach(semesterName => {
                        const semesterHeader = Array.from(document.querySelectorAll('.semester-header'))
                            .find(header => {
                                const fullText = header.textContent.trim();
                                const extractedName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();
                                return extractedName === semesterName;
                            });
                        if (semesterHeader && states.semesters[semesterName]) {
                            const courseList = semesterHeader.nextElementSibling;
                            if (courseList) {
                                courseList.style.display = 'block';
                                const icon = semesterHeader.querySelector('.expand-icon');
                                if (icon) icon.style.transform = 'rotate(90deg)';
                            }
                        }
                    });

                    // Restore course states
                    Object.keys(states.courses).forEach(courseName => {
                        const courseHeader = Array.from(document.querySelectorAll('.course-header'))
                            .find(header => {
                                const fullText = header.textContent.trim();
                                const extractedName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();
                                return extractedName === courseName;
                            });
                        if (courseHeader && states.courses[courseName]) {
                            const categoryList = courseHeader.nextElementSibling;
                            if (categoryList) {
                                categoryList.style.display = 'block';
                                const icon = courseHeader.querySelector('.expand-icon');
                                if (icon) icon.style.transform = 'rotate(90deg)';
                            }
                        }
                    });

                    // Restore category states
                    Object.keys(states.categories).forEach(categoryName => {
                        const categoryHeader = Array.from(document.querySelectorAll('.category-header'))
                            .find(header => {
                                const fullText = header.textContent.trim();
                                const extractedName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();
                                return extractedName === categoryName;
                            });
                        if (categoryHeader && states.categories[categoryName]) {
                            const fileList = categoryHeader.nextElementSibling;
                            if (fileList) {
                                fileList.style.display = 'grid';
                                fileList.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
                                fileList.style.gap = '1rem';
                                const icon = categoryHeader.querySelector('.expand-icon');
                                if (icon) icon.style.transform = 'rotate(90deg)';
                            }
                        }
                    });

                    // Update button text after restoration
                    updateExpandCollapseButtonText();
                }

                function renderGroupedView() {
                    const groupedView = document.getElementById('groupedView');
                    if (!groupedView) return;

                    // Get filtered files using only Professor and Search filters
                    const filteredFiles = getFilteredFilesForGroupedView();

                    if (filteredFiles.length === 0) {
                        groupedView.innerHTML = '<div class="empty-state"><h3>No notes found</h3><p>Try different filters or search terms</p></div>';
                        return;
                    }

                    // Group files: Semester/Year > Major > Course > Category > Files
                    const grouped = {};
                    filteredFiles.forEach(function (file) {
                        const semester = file.semester || 'Unknown Semester';
                        const year = file.year || 'Unknown Year';
                        const major = file.major || 'Other';
                        const classCode = file.classCode || 'Unknown';

                        // Normalize category name to prevent duplicates (remove emojis and normalize)
                        let category = file.category || 'Other';
                        const originalCategory = category;
                        // Remove emojis and normalize the category name
                        category = category.replace(/[📚✏️📖📝📊📋💻🔬📄]/g, '').trim();
                        // If empty after removing emojis, use 'Other'
                        if (!category) category = 'Other';


                        const semesterKey = `${semester} ${year}`;

                        if (!grouped[semesterKey]) grouped[semesterKey] = {};
                        if (!grouped[semesterKey][major]) grouped[semesterKey][major] = {};
                        if (!grouped[semesterKey][major][classCode]) grouped[semesterKey][major][classCode] = {};
                        if (!grouped[semesterKey][major][classCode][category]) grouped[semesterKey][major][classCode][category] = [];

                        grouped[semesterKey][major][classCode][category].push(file);
                    });

                    // Sort semesters chronologically (newest first) using dynamic configuration
                    function sortSemesters(semesters) {
                        const semesterOrder = dashboardConfig?.semesters?.order || { 'Spring': 1, 'Summer': 2, 'Fall': 3, 'Winter': 4 };
                        return semesters.sort(function (a, b) {
                            const aParts = a.split(' ');
                            const bParts = b.split(' ');
                            const semA = aParts[0];
                            const yearA = aParts[1];
                            const semB = bParts[0];
                            const yearB = bParts[1];
                            if (yearB !== yearA) return parseInt(yearB) - parseInt(yearA);
                            return (semesterOrder[semB] || 0) - (semesterOrder[semA] || 0);
                        });
                    }

                    // Use dynamic category configuration
                    const categoryIcons = {};
                    if (dashboardConfig?.categories) {
                        Object.keys(dashboardConfig.categories).forEach(category => {
                            categoryIcons[category.toLowerCase()] = dashboardConfig.categories[category].icon;
                        });
                    }

                    // Generate HTML
                    let html = '<div class="expand-collapse-all" style="margin-bottom: 1rem;"><button id="expandAllBtn" onclick="toggleAllGroups()" style="background: var(--umd-red); color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-weight: 600;">Expand All</button></div>';

                    // Sort semesters chronologically (newest first)
                    const sortedSemesters = sortSemesters(Object.keys(grouped));

                    sortedSemesters.forEach(function (semesterKey) {
                        const majors = grouped[semesterKey];

                        // Calculate semester file count using a simple approach
                        let semesterFileCount = 0;
                        Object.values(majors).forEach(function (courses) {
                            Object.values(courses).forEach(function (categories) {
                                Object.values(categories).forEach(function (files) {
                                    // files is an array of file cards
                                    if (Array.isArray(files)) {
                                        semesterFileCount += files.length;
                                    }
                                });
                            });
                        });

                        // Get dynamic semester colors from configuration
                        const semesterName = semesterKey.split(' ')[0];
                        const semesterConfig = dashboardConfig?.semesters?.colors?.[semesterName] ||
                                             dashboardConfig?.semesters?.defaultColor ||
                                             { background: 'linear-gradient(135deg, #FFD700 0%, #FFA500 100%)', textColor: '#000000' };
                        const semesterColor = semesterConfig.background;
                        const textColor = semesterConfig.textColor;

                        html += `
                            <div class="semester-group file-card" style="margin-bottom: 1rem; border: 2px solid #E5E7EB; border-radius: 12px; overflow: hidden; background: white;">
                                <div class="semester-header" onclick="toggleSemester(this)" style="background: ${semesterColor}; color: ${textColor}; padding: 1rem 1.25rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; transition: all 0.2s;">
                                    <div style="display: flex; align-items: center; gap: 0.75rem;">
                                        <span class="expand-icon" style="font-size: 0.875rem; transition: transform 0.2s;">▶</span>
                                        <strong style="font-size: 1.125rem;"><img src="/images/icons/calendar.png" alt="Calendar" style="width: 24px; height: 24px; vertical-align: middle; margin-right: 6px;" /> ${semesterKey}</strong>
                                    </div>
                                    <span class="file-count" style="background: rgba(255,255,255,0.2); padding: 4px 12px; border-radius: 12px; font-size: 0.875rem; font-weight: 600;">${semesterFileCount} file${semesterFileCount !== 1 ? 's' : ''}</span>
                                </div>
                                <div class="major-list" style="display: none; padding: 1rem;">
                        `;

                        // Sort majors alphabetically
                        Object.keys(majors).sort().forEach(function (major) {
                            const courses = majors[major];

                            // Calculate major file count using a simple approach
                            let majorFileCount = 0;
                            Object.values(courses).forEach(function (courseCategories) {
                                Object.values(courseCategories).forEach(function (categories) {
                                    // categories is an array of file cards
                                    if (Array.isArray(categories)) {
                                        majorFileCount += categories.length;
                                    }
                                });
                            });

                            html += `
                                <div class="major-group" style="margin-bottom: 0.75rem; border: 1px solid #E5E7EB; border-radius: 8px; overflow: hidden;">
                                    <div class="major-header" onclick="toggleMajor(this)" style="background: linear-gradient(135deg, #DC143C 0%, #A50E2A 100%); color: white; padding: 0.875rem 1rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #E5E7EB;">
                                        <div style="display: flex; align-items: center; gap: 0.625rem;">
                                            <span class="expand-icon" style="font-size: 0.75rem; transition: transform 0.2s; color: white; font-weight: bold;">▶</span>
                                            <strong style="color: white; font-size: 1rem;"><img src="/images/icons/folder.png" alt="Folder" style="width: 24px; height: 24px; vertical-align: middle; margin-right: 6px;" /> ${major}</strong>
                                        </div>
                                        <span class="file-count" style="background: rgba(255,255,255,0.2); color: white; padding: 3px 10px; border-radius: 10px; font-size: 0.8rem; font-weight: 600;">${majorFileCount} file${majorFileCount !== 1 ? 's' : ''}</span>
                                    </div>
                                    <div class="course-list" style="display: none; padding: 0.75rem;">
                            `;

                            Object.keys(courses).sort().forEach(function (course) {
                                const categories = courses[course];
                                // Calculate course file count using a simple approach
                                let courseFileCount = 0;
                                Object.values(categories).forEach(function (categoryFiles) {
                                    // categoryFiles is an array of file cards
                                    if (Array.isArray(categoryFiles)) {
                                        courseFileCount += categoryFiles.length;
                                    }
                                });

                                html += `
                                    <div class="course-group" style="margin-bottom: 0.625rem; border: 1px solid #E5E7EB; border-radius: 6px; overflow: hidden;">
                                        <div class="course-header" onclick="toggleCourse(this)" style="background: #18202B; color: white; padding: 0.75rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #F3F4F6;">
                                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                                <span class="expand-icon" style="font-size: 0.7rem; transition: transform 0.2s; color: white;">▶</span>
                                                <strong style="color: white; font-size: 0.9375rem;"><img src="/images/icons/briefcase.png" alt="Course" style="width: 24px; height: 24px; vertical-align: middle; margin-right: 6px;" /> ${course}</strong>
                                            </div>
                                            <span class="file-count" style="background: rgba(255,255,255,0.2); color: white; padding: 2px 8px; border-radius: 8px; font-size: 0.75rem; font-weight: 600;">${courseFileCount} files</span>
                                        </div>
                                        <div class="category-list" style="display: none; padding: 0.5rem;">
                                `;

                                Object.keys(categories).sort().forEach(function (category) {
                                    const files = categories[category];


                                    const categoryIcon = categoryIcons[category.toLowerCase()] || categoryIcons[category] || '';
                                    const categoryLabel = category.split(' ').map(function (word) { return word.charAt(0).toUpperCase() + word.slice(1); }).join(' ');

                                    html += `
                                        <div class="category-group" style="margin-bottom: 0.5rem;">
                                            <div class="category-header" onclick="toggleCategory(this)" style="background: #F9FAFB; padding: 0.625rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; border-radius: 4px; border: 1px solid #F3F4F6;">
                                                <div style="display: flex; align-items: center; gap: 0.375rem;">
                                                    <span class="expand-icon" style="font-size: 0.65rem; transition: transform 0.2s;">▶</span>
                                                    <span style="color: #4B5563; font-size: 0.875rem; font-weight: 600;">${categoryIcon} ${categoryLabel}</span>
                                                </div>
                                                <span style="background: #E5E7EB; color: #374151; padding: 2px 6px; border-radius: 6px; font-size: 0.7rem; font-weight: 600;">${files.length} files</span>
                                            </div>
                                            <div class="category-files" style="display: none; padding: 0.5rem 0 0 1.5rem;">
                                                ${files.map(function (card) { return createGroupedFileCard(card); }).join('')}
                                            </div>
                                        </div>
                                    `;
                                });

                                html += '</div></div>';
                            });

                            html += '</div></div>';
                        });

                        html += '</div></div>';
                    });

                    // No wrapper div to close
                    groupedView.innerHTML = html;

                    // Update selected count after rendering grouped view
                    setTimeout(() => {
                        updateSelectedCount();
                    }, 100);

                    // Restore folder states immediately after DOM is updated
                    restoreFolderStates(persistentFolderStates);
                }

                // Dynamic helper functions using configuration

                // Get file icon based on filename extension
                function getFileIcon(filename) {
                    const ext = filename.split('.').pop().toLowerCase();

                    // Fallback icon mapping if config is not loaded
                    const fallbackIcons = {
                        pdf: '/images/icons/pdf-file.png',
                        doc: '/images/icons/word-file.png',
                        docx: '/images/icons/word-file.png',
                        xls: '/images/icons/excel-file.png',
                        xlsx: '/images/icons/excel-file.png',
                        ppt: '/images/icons/powerpoint-file.png',
                        pptx: '/images/icons/powerpoint-file.png',
                        txt: '/images/icons/text-file.png',
                        zip: '/images/icons/zip-file.png',
                        rar: '/images/icons/zip-file.png',
                        jpg: '/images/icons/image-file.png',
                        jpeg: '/images/icons/image-file.png',
                        png: '/images/icons/image-file.png',
                        gif: '/images/icons/image-file.png',
                        mp4: '/images/icons/video-file.png',
                        mov: '/images/icons/video-file.png',
                        mp3: '/images/icons/audio-file.png'
                    };

                    // Use PDF size as the default for all file types
                    const defaultSize = 80; // PDF default size

                    const config = dashboardConfig?.fileTypeIcons || {};
                    const defaultConfig = dashboardConfig?.defaultFileIcon || {
                        icon: '/images/icons/document.png',
                        alt: 'Document',
                        width: defaultSize,
                        height: defaultSize
                    };

                    const fileConfig = config[ext] || {
                        icon: fallbackIcons[ext] || defaultConfig.icon,
                        alt: ext.toUpperCase() || 'Document',
                        width: defaultSize, // Use PDF size for all
                        height: defaultSize  // Use PDF size for all
                    };

                    // Override with PDF size for consistency and add error handling
                    return `<img src="${fileConfig.icon}" alt="${fileConfig.alt}" style="width: ${defaultSize}px; height: ${defaultSize}px;" onerror="this.style.display='none'; this.nextElementSibling.style.display='inline';" /><span style="display: none; background: #E5E7EB; color: #6B7280; padding: 0.5rem; border-radius: 4px; font-size: 0.75rem;">${fileConfig.alt}</span>`;
                }

                // Get category emoji/icon
                function getCategoryEmoji(category) {
                    const config = dashboardConfig?.categories || {};
                    const categoryConfig = config[category] || config['Other'] || { icon: '📎' };
                    return categoryConfig.icon || '📎';
                }

                // Get category display name
                function getCategoryDisplayName(category) {
                    const config = dashboardConfig?.categories || {};
                    const categoryConfig = config[category] || config['Other'] || { displayName: category };
                    return categoryConfig.displayName || category;
                }

                // Format file size dynamically
                function formatFileSize(sizeInBytes) {
                    const config = dashboardConfig?.fileSize || {
                        units: ['B', 'KB', 'MB', 'GB'],
                        decimalPlaces: 1,
                        threshold: 1024
                    };

                    let size = sizeInBytes;
                    let unitIndex = 0;

                    while (size >= config.threshold && unitIndex < config.units.length - 1) {
                        size /= config.threshold;
                        unitIndex++;
                    }

                    return `${size.toFixed(config.decimalPlaces)} ${config.units[unitIndex]}`;
                }

                // Check if file is "new" based on configurable threshold
                function isFileNew(uploadDate) {
                    const config = dashboardConfig?.statusBadges?.new || { thresholdDays: 7 };
                    const uploadDateObj = new Date(uploadDate);
                    const now = new Date();
                    const daysAgo = Math.floor((now - uploadDateObj) / (1000 * 60 * 60 * 24));
                    return daysAgo <= config.thresholdDays;
                }

                // Get delete button based on user permissions
                function getDeleteButton(file) {
                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';

                    if (userRole === 'viewer') {
                        return '';
                    }

                    if (userRole !== 'admin' && file.uploadedBy !== userId) {
                        return '';
                    }

                    return `<button class="button danger small delete-btn" data-filename="${file.filename}" data-original-name="${escapeHtml(file.originalName)}">Delete</button>`;
                }

                // Get edit button based on user permissions
                function getEditButton(file) {
                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';

                    if (userRole === 'viewer') {
                        return '';
                    }

                    if (userRole !== 'admin' && file.uploadedBy !== userId) {
                        return '';
                    }

                    return `<button class="button info small edit-btn" data-filename="${file.filename}" data-file-data='${JSON.stringify(file)}'>Edit</button>`;
                }

                // Generate status badges dynamically
                function generateStatusBadges(file, isNew) {
                    const badges = [];
                    const config = dashboardConfig?.statusBadges || {};

                    // New badge
                    if (config.new?.enabled && isNew) {
                        const newConfig = config.new;
                        badges.push(`<span style="background: ${newConfig.background}; color: ${newConfig.color}; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;"><img src="${newConfig.icon}" alt="${newConfig.alt}" style="width: ${newConfig.width}px; height: ${newConfig.height}px; vertical-align: middle; margin-right: 4px;" onerror="this.style.display='none';" /> ${newConfig.text}</span>`);
                    }

                    // Handle virus scan status badges with proper logic
                    if (file.virusScanStatus) {
                        const status = file.virusScanStatus.toString().toLowerCase();

                        // Error badge
                        if (config.error?.enabled && (status.includes('error') || status.includes('failed') || status.includes('virus'))) {
                            const errorConfig = config.error;
                            badges.push(`<span style="background: ${errorConfig.background}; color: ${errorConfig.color}; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;"><img src="${errorConfig.icon}" alt="${errorConfig.alt}" style="width: ${errorConfig.width}px; height: ${errorConfig.height}px; vertical-align: middle; margin-right: 4px;" onerror="this.style.display='none';" /> ${errorConfig.text}</span>`);
                        }
                        // Pending badge
                        else if (config.pending?.enabled && (status.includes('pending') || status.includes('scanning'))) {
                            const pendingConfig = config.pending;
                            badges.push(`<span style="background: ${pendingConfig.background}; color: ${pendingConfig.color}; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;"><img src="${pendingConfig.icon}" alt="${pendingConfig.alt}" style="width: ${pendingConfig.width}px; height: ${pendingConfig.height}px; vertical-align: middle; margin-right: 4px;" onerror="this.style.display='none';" /> ${pendingConfig.text}</span>`);
                        }
                        // Scanned badge (only for clean/successful scans)
                        else if (config.scanned?.enabled && (status.includes('clean') || status.includes('scanned') || status === 'true')) {
                            const scannedConfig = config.scanned;
                            badges.push(`<span style="background: ${scannedConfig.background}; color: ${scannedConfig.color}; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;"><img src="${scannedConfig.icon}" alt="${scannedConfig.alt}" style="width: ${scannedConfig.width}px; height: ${scannedConfig.height}px; vertical-align: middle; margin-right: 4px;" onerror="this.style.display='none';" /> ${scannedConfig.text}</span>`);
                        }
                    }

                    // Category badge
                    if (config.category?.enabled && file.category) {
                        const categoryConfig = config.category;
                        badges.push(`<span style="background: ${categoryConfig.background}; color: ${categoryConfig.color}; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">${getCategoryEmoji(file.category)} ${escapeHtml(getCategoryDisplayName(file.category))}</span>`);
                    }

                    return badges.join('');
                }

                // Get filtered files for grouped view (only Professor and Search filters)
                function getFilteredFilesForGroupedView() {
                    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;

                    return allFilesData.filter(function(file) {
                        // Search term filter
                        if (searchTerm && !file.originalName.toLowerCase().includes(searchTerm) &&
                            !(file.description && file.description.toLowerCase().includes(searchTerm))) {
                            return false;
                        }

                        // My files filter
                        const currentUserId = '<%= user.userid %>';
                        if (myFilesOnly && file.uploadedBy !== currentUserId) {
                            return false;
                        }

                        // Professor filter
                        if (selectedProfessors.length > 0) {
                            if (!file.professor || !selectedProfessors.some(selectedProf =>
                                file.professor.toLowerCase() === selectedProf.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        return true;
                    });
                }

                // Get filtered files based on current filters (for Grid and List views)
                function getFilteredFiles() {
                    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked')).map(cb => cb.value);
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;

                    return allFilesData.filter(function(file) {
                        // Search term filter
                        if (searchTerm && !file.originalName.toLowerCase().includes(searchTerm) &&
                            !(file.description && file.description.toLowerCase().includes(searchTerm))) {
                            return false;
                        }

                        // My files filter
                        const currentUserId = '<%= user.userid %>';
                        if (myFilesOnly && file.uploadedBy !== currentUserId) {
                            return false;
                        }

                        // Category filter
                        if (selectedCategories.length > 0) {
                            const fileCategory = file.category || 'Other';
                            if (!selectedCategories.includes(fileCategory)) {
                                return false;
                            }
                        }

                        // Semester filter
                        if (selectedSemesters.length > 0 && !selectedSemesters.includes(file.semester)) {
                            return false;
                        }

                        // Year filter
                        if (selectedYears.length > 0 && !selectedYears.includes(file.year.toString())) {
                            return false;
                        }

                        // Major filter
                        if (selectedMajors.length > 0 && !selectedMajors.includes(file.major)) {
                            return false;
                        }

                        // Class filter
                        if (selectedClasses.length > 0 && !selectedClasses.includes(file.classCode)) {
                            return false;
                        }

                        // Professor filter
                        if (selectedProfessors.length > 0) {
                            if (!file.professor || !selectedProfessors.some(selectedProf =>
                                file.professor.toLowerCase() === selectedProf.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        return true;
                    });
                }

                // Render list view
                function renderListView() {
                    const listView = document.getElementById('listView');
                    if (!listView) return;

                    // Get filtered files using all filters (same as grid view)
                    const filteredFiles = getFilteredFiles();

                    if (filteredFiles.length === 0) {
                        listView.innerHTML = '<div class="empty-state"><h3>No notes found</h3><p>Try different filters or search terms</p></div>';
                        return;
                    }

                    let html = '';
                    filteredFiles.forEach(function(file) {
                        const fileName = file.originalName;
                        const major = file.major || '';
                        const classCode = file.classCode || '';
                        const semester = file.semester || '';
                        const year = file.year || '';
                        const professor = file.professor || '';
                        const uploader = file.uploadedBy || '';
                        const downloadCount = file.downloadCount || 0;

                        // Format file size
                        const size = file.size ? `<span style="font-size: 0.75rem;">${formatFileSize(file.size || 0)}</span>` : '';
                        const description = file.description || '';

                        // Get file icon based on file type
                        const fileIcon = getFileIcon(file.originalName);

                        // Check if file is "new" (within 7 days)
                        const uploadDate = new Date(file.uploadDate);
                        const now = new Date();
                        const daysAgo = Math.floor((now - uploadDate) / (1000 * 60 * 60 * 24));
                        const isNew = daysAgo <= 7;

                        // Create download and delete links
                        const downloadLink = `/download/${file.filename}`;
                        const filename = file.filename || '';
                        const originalName = file.originalName || fileName;

                        html += `
                            <div class="file-list-item" style="padding: 0.75rem; margin-bottom: 0.5rem; position: relative;">
                                <!-- Bulk select checkbox -->
                                <div style="position: absolute; top: 0.75rem; left: 0.75rem; z-index: 20; background: rgba(255,255,255,0.9); padding: 2px; border-radius: 4px; border: 1px solid #D1D5DB;">
                                    <input type="checkbox" class="file-select-checkbox" data-filename="${file.filename}"
                                        style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--umd-red); transform: scale(1.2);"
                                        onchange="updateSelectedCount()" />
                                </div>
                                <div class="file-list-icon" style="margin-left: 2rem;">${fileIcon}</div>
                                <div class="file-list-main">
                                    <div class="file-list-name">${truncateFilename(fileName, 15, false)}</div>
                                    <div class="file-list-meta">
                                        ${size ? `<span><strong>Size:</strong> ${size}</span>` : ''}
                                        ${professor ? `<span><strong>Professor:</strong> ${professor}</span>` : ''}
                                        ${semester && year ? `<span><strong>Term:</strong> ${semester} ${year}</span>` : ''}
                                        <span><strong>Uploaded by:</strong> ${uploader}</span>
                                    </div>
                                    <div class="file-list-tags" style="display: flex; flex-wrap: wrap; gap: 0.3rem; margin-top: 0.3rem;">
                                        ${generateStatusBadges(file, isNew)}
                                        ${major ? `<span style="background: #E0E7FF; color: #4338CA; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;"><img src="/images/icons/folder.png" alt="Folder" style="width: 16px; height: 16px; vertical-align: middle; margin-right: 4px;" /> ${major}</span>` : ''}
                                        ${classCode ? `<span style="background: #FEF2F2; color: #DC2626; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600;"><img src="/images/icons/briefcase.png" alt="Course" style="width: 16px; height: 16px; vertical-align: middle; margin-right: 4px;" /> ${classCode}</span>` : ''}
                                    </div>
                                </div>
                                <div class="file-list-downloads" title="${downloadCount} downloads">${downloadCount}</div>
                                <div class="file-list-actions">
                                    <a href="${downloadLink}" class="button download" target="_blank" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">Download</a>
                                    ${getEditButton(file)}
                                    ${getDeleteButton(file)}
                                    <button class="button secondary small report-btn" data-filename="${filename}" data-original-name="${originalName}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">🚩</button>
                                </div>
                            </div>
                        `;
                    });

                    listView.innerHTML = html;

                    // Update selected count after rendering list view
                    setTimeout(() => {
                        updateSelectedCount();
                    }, 100);
                }

                // Create a grouped file card from file data (using grid view structure)
                function createGroupedFileCard(file) {
                    // Calculate if file is "new" using dynamic configuration
                    const isNew = isFileNew(file.uploadDate);

                    return `
                <div class="file-card animate-fade-in"
                     data-class="${escapeHtml(file.classCode || '')}"
                     data-major="${escapeHtml(file.major || '')}"
                     data-semester="${escapeHtml(file.semester || '')}"
                     data-year="${escapeHtml(file.year || '')}"
                     data-category="${escapeHtml((file.category || '').toLowerCase())}"
                     data-professor="${escapeHtml((file.professor || '').toLowerCase())}"
                     data-uploader="${escapeHtml(file.uploadedBy)}"
                     data-name="${escapeHtml(file.originalName.toLowerCase())}"
                     data-date="${new Date(file.uploadDate).getTime()}"
                     data-downloads="${file.downloadCount || 0}"
                     data-size="${file.size || 0}">
                    <div class="file-header" style="position: relative; display: flex; align-items: center; justify-content: center; gap: 0.75rem; margin-bottom: 1rem;">
                        <!-- Bulk select checkbox -->
                        <div style="position: absolute; top: 0.5rem; left: 0.5rem; z-index: 20; background: rgba(255,255,255,0.9); padding: 2px; border-radius: 4px; border: 1px solid #D1D5DB;">
                            <input type="checkbox" class="file-select-checkbox" data-filename="${file.filename}"
                                style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--umd-red); transform: scale(1.2);"
                                onchange="updateSelectedCount()" />
                            </div>
                        <div style="position: absolute; top: 0.5rem; right: 0.5rem; background: #FEF3C7; color: #92400E; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600; cursor: help; z-index: 10;" title="${file.downloadCount || 0} downloads">
                            ${file.downloadCount || 0}
                            </div>
                        <div class="file-icon">${getFileIcon(file.originalName)}</div>
                        <div class="file-info">
                            <h3 style="margin: 0 0 0.1rem 0; font-size: 1rem;">${truncateFilename(file.originalName, 15)}</h3>
                            </div>
                    </div>
                    <div class="file-meta" style="margin-top: 0.1rem;">
                        <div class="tags-section" style="display: flex; flex-wrap: wrap; gap: 0.3rem; margin-bottom: 0.5rem;">
                            ${generateStatusBadges(file, isNew)}
                        </div>
                        ${file.major ? `<div class="file-meta-item"><strong>Major:</strong> <span class="major-badge">${escapeHtml(file.major)}</span></div>` : ''}
                        ${file.classCode ? `<div class="file-meta-item"><strong>Class:</strong> <span class="class-code-badge">${escapeHtml(file.classCode)}</span></div>` : ''}
                        ${file.professor ? `<div class="file-meta-item"><strong>Professor:</strong> ${escapeHtml(file.professor)}</div>` : ''}
                        ${file.semester && file.year ? `<div class="file-meta-item"><strong>Term:</strong> ${file.semester} ${file.year}</div>` : ''}
                        <div class="file-meta-item"><strong>Uploaded by:</strong> ${escapeHtml(file.uploadedBy)}</div>
                        ${file.description ? `<div class="file-meta-item"><strong>Description:</strong> ${escapeHtml(file.description)}</div>` : ''}
                        <div class="file-meta-item"><strong>Size:</strong> ${formatFileSize(file.size || 0)}</div>
                    </div>
                    <div class="file-actions" style="display: flex; gap: 0.5rem; flex-wrap: wrap; justify-content: center;">
                        <a href="/download/${encodeURIComponent(file.filename)}" class="button download" target="_blank">Download</a>
                        ${getEditButton(file)}
                                ${getDeleteButton(file)}
                        <button class="button secondary small report-btn" data-filename="${file.filename}" data-original-name="${escapeHtml(file.originalName)}">🚩 Report</button>
                            </div>
                        </div>
                    `;
                }

                // Clear filters when closing folders (consistent with Clear All behavior)
                function clearFiltersForClosedFolder(folderType, folderName) {
                    if (folderType === 'semester') {
                        // Extract year and semester from folder name (e.g., "Fall 2021" -> "Fall", "2021")
                        const parts = folderName.split(' ');
                        const semesterPart = parts[0]; // "Fall"
                        const yearPart = parts[1]; // "2021"

                        // Clear semester filter - escape special characters for CSS selector
                        const escapedSemesterPart = semesterPart.replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, '\\$&');
                        const semesterCheckbox = document.querySelector(`#semesterDropdown input[type="checkbox"][value="${escapedSemesterPart}"]`);
                        if (semesterCheckbox && semesterCheckbox.checked) {
                            semesterCheckbox.checked = false;
                            updateMultiSelect('semester');
                        }

                        // Clear year filter
                        const yearCheckbox = document.querySelector(`#yearDropdown input[type="checkbox"][value="${yearPart}"]`);
                        if (yearCheckbox && yearCheckbox.checked) {
                            yearCheckbox.checked = false;
                            updateMultiSelect('year');
                        }

                        // Clear all child filters (major, class, category)
                        clearAllChildFilters();

                    } else if (folderType === 'major') {
                        // Clear major filter - escape special characters for CSS selector
                        const escapedFolderName = folderName.replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, '\\$&');
                        const majorCheckbox = document.querySelector(`#majorDropdown input[type="checkbox"][value="${escapedFolderName}"]`);
                        if (majorCheckbox && majorCheckbox.checked) {
                            majorCheckbox.checked = false;
                            updateMultiSelect('major');
                        }

                        // Clear child filters (class, category)
                        clearAllChildFilters();

                    } else if (folderType === 'course') {
                        // Clear course filter - escape special characters for CSS selector
                        const escapedFolderName = folderName.replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, '\\$&');
                        const classCheckbox = document.querySelector(`#classDropdown input[type="checkbox"][value="${escapedFolderName}"]`);
                        if (classCheckbox && classCheckbox.checked) {
                            classCheckbox.checked = false;
                            updateMultiSelect('class');
                        }

                        // Clear category filters
                        document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked').forEach(cb => {
                            cb.checked = false;
                        });
                        updateMultiSelect('category');

                    } else if (folderType === 'category') {

                        // Clear category filter - escape special characters for CSS selector
                        const escapedFolderName = folderName.replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, '\\$&');
                        const categoryCheckbox = document.querySelector(`#categoryDropdown input[type="checkbox"][value="${escapedFolderName}"]`);
                        if (categoryCheckbox && categoryCheckbox.checked) {
                            categoryCheckbox.checked = false;
                            updateMultiSelect('category');
                        }
                    }

                    // Apply filters and update display
                    applyFilters();
                    updateActiveFilters();
                }

                // Helper function to clear all child filters
                function clearAllChildFilters() {
                    // Clear class filters
                    document.querySelectorAll('#classDropdown input[type="checkbox"]:checked').forEach(cb => {
                        cb.checked = false;
                    });
                    updateMultiSelect('class');

                    // Clear category filters
                    document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked').forEach(cb => {
                        cb.checked = false;
                    });
                    updateMultiSelect('category');
                }

                // Toggle major accordion
                function toggleMajor(header) {
                    // Extract just the major name, ignoring file count and icons
                    const fullText = header.textContent.trim();
                    // Remove expand/collapse arrows, file counts, and any extra whitespace/newlines
                    const majorName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?.*$/i, '').replace(/\s+/g, ' ').trim();

                    const courseList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    const isCurrentlyExpanded = courseList.style.display !== 'none';

                    courseList.style.display = isCurrentlyExpanded ? 'none' : 'block';
                    icon.style.transform = isCurrentlyExpanded ? 'rotate(0deg)' : 'rotate(90deg)';

                    // Update persistent state
                    persistentFolderStates.majors[majorName] = !isCurrentlyExpanded;

                    // If closing folder, clear related filters
                    if (isCurrentlyExpanded) {
                        clearFiltersForClosedFolder('major', majorName);
                    }

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Toggle course accordion
                function toggleCourse(header) {
                    // Extract just the course name, ignoring file count and icons
                    const fullText = header.textContent.trim();
                    // Remove expand/collapse arrows, file counts, and any extra whitespace/newlines
                    const courseName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?.*$/i, '').replace(/\s+/g, ' ').trim();

                    const categoryList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    const isCurrentlyExpanded = categoryList.style.display !== 'none';

                    categoryList.style.display = isCurrentlyExpanded ? 'none' : 'block';
                    icon.style.transform = isCurrentlyExpanded ? 'rotate(0deg)' : 'rotate(90deg)';

                    // Update persistent state
                    persistentFolderStates.courses[courseName] = !isCurrentlyExpanded;

                    // If closing folder, clear related filters
                    if (isCurrentlyExpanded) {
                        clearFiltersForClosedFolder('course', courseName);
                    }

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Toggle semester accordion
                function toggleSemester(header) {
                    // Extract just the semester name, ignoring file count and icons
                    const fullText = header.textContent.trim();
                    // Remove expand/collapse arrows, file counts, and any extra whitespace/newlines
                    const semesterName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?.*$/i, '').replace(/\s+/g, ' ').trim();

                    const majorList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    const isCurrentlyExpanded = majorList.style.display !== 'none';

                    majorList.style.display = isCurrentlyExpanded ? 'none' : 'block';
                    icon.style.transform = isCurrentlyExpanded ? 'rotate(0deg)' : 'rotate(90deg)';

                    // Update persistent state
                    persistentFolderStates.semesters[semesterName] = !isCurrentlyExpanded;

                    // If closing folder, clear related filters
                    if (isCurrentlyExpanded) {
                        clearFiltersForClosedFolder('semester', semesterName);
                    }

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Toggle category accordion
                function toggleCategory(header) {
                    // Extract just the category name, ignoring file count and icons
                    const fullText = header.textContent.trim();
                    // Remove expand/collapse arrows, emojis, file counts, and any extra whitespace/newlines
                    const categoryName = fullText.replace(/^[▶▼]\s*/, '').replace(/[📚✏️📖📝📊📋💻🔬📄]\s*/, '').replace(/\s+\d+\s+files?.*$/i, '').replace(/\s+/g, ' ').trim();


                    const fileList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    const isCurrentlyExpanded = fileList.style.display !== 'none';

                    if (isCurrentlyExpanded) {
                        fileList.style.display = 'none';
                        icon.style.transform = 'rotate(0deg)';
                    } else {
                        fileList.style.display = 'grid';
                        fileList.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
                        fileList.style.gap = '1rem';
                        icon.style.transform = 'rotate(90deg)';
                    }

                    // Update persistent state
                    persistentFolderStates.categories[categoryName] = !isCurrentlyExpanded;

                    // Update button text
                    updateExpandCollapseButtonText();
                }

                // Toggle all groups (expand/collapse all)
                function toggleAllGroups() {
                    const button = event.target;
                    const isExpanding = button.textContent === 'Expand All';

                    if (isExpanding) {
                        // Expanding all folders - don't clear filters

                        // Toggle all semester headers
                        const semesterHeaders = document.querySelectorAll('.semester-header');
                        semesterHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const semesterName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                            const majorList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            majorList.style.display = 'block';
                            if (icon) icon.style.transform = 'rotate(90deg)';
                            persistentFolderStates.semesters[semesterName] = true;
                        });

                        // Toggle all major headers
                        const majorHeaders = document.querySelectorAll('.major-header');
                    majorHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const majorName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                        const courseList = header.nextElementSibling;
                        const icon = header.querySelector('.expand-icon');
                            courseList.style.display = 'block';
                            if (icon) icon.style.transform = 'rotate(90deg)';
                            persistentFolderStates.majors[majorName] = true;
                        });

                        // Toggle all course headers
                        const courseHeaders = document.querySelectorAll('.course-header');
                        courseHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const courseName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            const categoryList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            categoryList.style.display = 'block';
                            if (icon) icon.style.transform = 'rotate(90deg)';
                            persistentFolderStates.courses[courseName] = true;
                        });

                        // Toggle all category headers
                        const categoryHeaders = document.querySelectorAll('.category-header');
                        categoryHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const categoryName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            const fileList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            fileList.style.display = 'grid';
                            fileList.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
                            fileList.style.gap = '1rem';
                            if (icon) icon.style.transform = 'rotate(90deg)';
                            persistentFolderStates.categories[categoryName] = true;
                        });

                        button.textContent = 'Collapse All';

                        } else {
                        // Collapsing all folders - clear only folder-related filters (keep My Files filter)
                        clearFolderFilters();

                        // Then collapse all folders
                        const semesterHeaders = document.querySelectorAll('.semester-header');
                        semesterHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const semesterName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                            const majorList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            majorList.style.display = 'none';
                            if (icon) icon.style.transform = 'rotate(0deg)';
                            persistentFolderStates.semesters[semesterName] = false;
                        });

                        const majorHeaders = document.querySelectorAll('.major-header');
                        majorHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const majorName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s+files?$/, '').trim();

                            const courseList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            courseList.style.display = 'none';
                            if (icon) icon.style.transform = 'rotate(0deg)';
                            persistentFolderStates.majors[majorName] = false;
                        });

                        const courseHeaders = document.querySelectorAll('.course-header');
                        courseHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const courseName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            const categoryList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            categoryList.style.display = 'none';
                            if (icon) icon.style.transform = 'rotate(0deg)';
                            persistentFolderStates.courses[courseName] = false;
                        });

                        const categoryHeaders = document.querySelectorAll('.category-header');
                        categoryHeaders.forEach(header => {
                            const fullText = header.textContent.trim();
                            const categoryName = fullText.replace(/^[▶▼]\s*/, '').replace(/\s+\d+\s*$/, '').trim();

                            const fileList = header.nextElementSibling;
                            const icon = header.querySelector('.expand-icon');
                            fileList.style.display = 'none';
                            if (icon) icon.style.transform = 'rotate(0deg)';
                            persistentFolderStates.categories[categoryName] = false;
                        });

                        button.textContent = 'Expand All';
                    }

                    // Update button text based on new state
                    updateExpandCollapseButtonText();
                }

                // Note: Major filter is now multi-select, so no need for handleMajorChange or updateClassDropdownVisibility

                // Toggle multi-select dropdown
                function toggleDropdown(type) {
                    const dropdown = document.getElementById(`${type}Dropdown`);
                    const allDropdowns = document.querySelectorAll('.multi-select-dropdown');

                    // Close other dropdowns
                    allDropdowns.forEach(dd => {
                        if (dd.id !== `${type}Dropdown`) {
                            dd.classList.remove('show');
                        }
                    });

                    // Toggle current dropdown
                    dropdown.classList.toggle('show');
                }

                // Update multi-select label and apply filters
                function updateMultiSelect(type) {
                    const checkboxes = document.querySelectorAll(`#${type}Dropdown input[type="checkbox"]:checked`);
                    const label = document.getElementById(`${type}Label`);
                    const values = Array.from(checkboxes).map(cb => cb.value);

                    if (values.length === 0) {
                        const defaults = {
                            'year': 'All Years',
                            'semester': 'All Semesters',
                            'category': 'All Categories',
                            'major': 'All Majors',
                            'class': 'All Classes',
                            'professor': 'All Professors'
                        };
                        label.textContent = defaults[type] || 'All';
                    } else if (values.length === 1) {
                        label.textContent = values[0];
                    } else {
                        label.textContent = `${values.length} selected`;
                    }

                    // Apply filters but keep the dropdown open
                    applyFilters();

                    // Ensure the dropdown stays open after filtering
                    setTimeout(() => {
                        const dropdown = document.getElementById(`${type}Dropdown`);
                        if (dropdown && !dropdown.classList.contains('show')) {
                            dropdown.classList.add('show');
                        }
                    }, 10);
                }

                // Initialize professor dropdown with dynamic data
                function initializeProfessorDropdown() {
                    const professorList = document.getElementById('professorList');
                    const allFileCards = document.querySelectorAll('.file-card');

                    // Extract unique professors from existing files
                    const professorSet = new Set();
                    allFileCards.forEach(card => {
                        const professor = card.dataset.professor;
                        if (professor && professor.trim()) {
                            professorSet.add(professor.trim());
                        }
                    });

                    // Convert to sorted array
                    const professors = Array.from(professorSet).sort();

                    // Clear existing options
                    professorList.innerHTML = '';

                    // Add options for each professor
                    professors.forEach(professor => {
                        const option = document.createElement('label');
                        option.className = 'multi-select-option';
                        option.innerHTML = `
                            <input type="checkbox" value="${escapeHtml(professor)}" onchange="updateMultiSelect('professor')">
                            <span>${escapeHtml(professor)}</span>
                        `;
                        professorList.appendChild(option);
                    });

                    // If no professors found, show message
                    if (professors.length === 0) {
                        const message = document.createElement('div');
                        message.className = 'no-options';
                        message.textContent = 'No professors found in uploaded files';
                        professorList.appendChild(message);
                    }
                }

                // Initialize category dropdown with dynamic configuration
                function initializeCategoryDropdown() {
                    const categoryDropdown = document.getElementById('categoryDropdown');
                    if (!categoryDropdown || !dashboardConfig?.categories) {
                        return;
                    }

                    const categories = Object.keys(dashboardConfig.categories);
                    const sortedCategories = categories.sort();

                    categoryDropdown.innerHTML = sortedCategories.map(category => {
                        const categoryConfig = dashboardConfig.categories[category];
                        return `
                            <label class="multi-select-option">
                                <input type="checkbox" value="${escapeHtml(category)}" onchange="updateMultiSelect('category')">
                                <span>${categoryConfig.icon} ${escapeHtml(categoryConfig.displayName || category)}</span>
                            </label>
                        `;
                    }).join('');
                }

                // Initialize sort options with dynamic configuration
                function initializeSortOptions() {
                    const sortFilter = document.getElementById('sortFilter');
                    if (!sortFilter || !dashboardConfig?.sortOptions) {
                        return;
                    }

                    const sortOptions = Object.keys(dashboardConfig.sortOptions);
                    sortFilter.innerHTML = sortOptions.map(optionKey => {
                        const optionConfig = dashboardConfig.sortOptions[optionKey];
                        return `<option value="${optionConfig.value}">${optionConfig.label}</option>`;
                    }).join('');
                }

                // Filter professor options based on search term
                function filterProfessorOptions(searchTerm) {
                    const options = document.querySelectorAll('#professorList .multi-select-option');
                    const searchLower = searchTerm.toLowerCase();

                    options.forEach(option => {
                        const professorName = option.querySelector('span').textContent.toLowerCase();
                        if (professorName.includes(searchLower)) {
                            option.style.display = 'flex';
                        } else {
                            option.style.display = 'none';
                        }
                    });
                }

                // Close dropdowns when clicking outside
                document.addEventListener('click', function (e) {
                    if (!e.target.closest('.multi-select-wrapper')) {
                        document.querySelectorAll('.multi-select-dropdown').forEach(dd => {
                            dd.classList.remove('show');
                        });
                    }
                });

                // Clear only folder-related filters (keep My Files filter)
                function clearFolderFilters() {
                    // Clear all multi-select checkboxes (categories, semesters, years, majors, classes, professors)
                    document.querySelectorAll('.multi-select-dropdown input[type="checkbox"]:checked').forEach(cb => {
                        cb.checked = false;
                    });

                    // Reset all multi-select labels
                    document.getElementById('categoryLabel').textContent = 'All Categories';
                    document.getElementById('semesterLabel').textContent = 'All Semesters';
                    document.getElementById('yearLabel').textContent = 'All Years';
                    document.getElementById('majorLabel').textContent = 'All Majors';
                    document.getElementById('classLabel').textContent = 'All Classes';
                    document.getElementById('professorLabel').textContent = 'All Professors';

                    // Clear search input
                    document.getElementById('searchInput').value = '';

                    // DO NOT clear "My Files" toggle - keep user's preference

                    // Apply filters
                    applyFilters();
                }

                // Clear all filters
                function clearAllFilters() {
                    // Clear all multi-select checkboxes
                    document.querySelectorAll('.multi-select-dropdown input[type="checkbox"]:checked').forEach(cb => {
                        cb.checked = false;
                    });

                    // Reset all multi-select labels
                    document.getElementById('categoryLabel').textContent = 'All Categories';
                    document.getElementById('semesterLabel').textContent = 'All Semesters';
                    document.getElementById('yearLabel').textContent = 'All Years';
                    document.getElementById('majorLabel').textContent = 'All Majors';
                    document.getElementById('classLabel').textContent = 'All Classes';
                    document.getElementById('professorLabel').textContent = 'All Professors';

                    // Major filter is now handled by multi-select checkboxes (cleared above)
                    // Professor filter is now handled by multi-select checkboxes (cleared above)

                    // Clear search input
                    document.getElementById('searchInput').value = '';

                    // Uncheck "My Files" toggle
                    document.getElementById('myFilesToggle').checked = false;

                    // Apply filters to show all files
                    applyFilters();
                }

                // Remove a specific filter
                function removeFilter(type, value) {
                    if (type === 'major') {
                        document.getElementById('majorFilter').value = '';
                    } else if (type === 'professor') {
                        document.getElementById('professorFilter').value = '';
                    } else if (type === 'search') {
                        document.getElementById('searchInput').value = '';
                    } else if (type === 'myFiles') {
                        document.getElementById('myFilesToggle').checked = false;
                    } else {
                        // For multi-select filters (category, semester, year, class)
                        const checkbox = document.querySelector(`#${type}Dropdown input[type="checkbox"][value="${value}"]`);
                        if (checkbox) {
                            checkbox.checked = false;
                            updateMultiSelect(type);
                        }
                    }
                    applyFilters();
                }

                // Update active filters display
                function updateActiveFilters() {
                    const activeFiltersContainer = document.getElementById('activeFilters');
                    const filterTags = document.getElementById('filterTags');

                    // Active filters are now always processed but made invisible in grouped view
                    // No early return needed

                    const tags = [];

                    // Get selected categories
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'category', value: cb.value, label: `<img src="/images/icons/folder-open.png" alt="Category" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedCategories);

                    // Get selected semesters
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'semester', value: cb.value, label: `<img src="/images/icons/calendar.png" alt="Calendar" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedSemesters);

                    // Get selected years
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'year', value: cb.value, label: `<img src="/images/icons/calendar.png" alt="Year" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedYears);

                    // Get selected majors
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'major', value: cb.value, label: `<img src="/images/icons/folder.png" alt="Major" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedMajors);

                    // Get selected classes
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'class', value: cb.value, label: `<img src="/images/icons/briefcase.png" alt="Course" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedClasses);

                    // Get selected professors
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'professor', value: cb.value, label: `<img src="/images/icons/user.png" alt="Professor" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedProfessors);

                    // Get search filter
                    const searchTerm = document.getElementById('searchInput').value;
                    if (searchTerm) {
                        tags.push({ type: 'search', value: searchTerm, label: `Search: ${searchTerm}` });
                    }

                    // Get "My Files" toggle
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;
                    if (myFilesOnly) {
                        tags.push({ type: 'myFiles', value: 'true', label: 'My Files Only' });
                    }

                    // Show/hide active filters container based on whether there are active filters
                    if (tags.length > 0) {
                        activeFiltersContainer.style.display = 'block';
                        filterTags.innerHTML = tags.map(tag => `
                            <span style="display: inline-flex; align-items: center; gap: 0.375rem; background: white; border: 1px solid var(--umd-red); color: var(--umd-red); padding: 4px 8px; border-radius: 6px; font-size: 0.813rem; font-weight: 500;">
                                ${tag.label}
                                <button onclick="removeFilter('${tag.type}', '${escapeHtml(tag.value)}')" style="background: none; border: none; color: var(--umd-red); cursor: pointer; padding: 0; font-size: 1rem; line-height: 1; font-weight: bold;" title="Remove filter">
                                    ×
                                </button>
                            </span>
                        `).join('');
                    } else {
                        activeFiltersContainer.style.display = 'none';
                        filterTags.innerHTML = '';
                    }
                }

                // Update active filters display for grouped view (only Professor, Search, and My Files)
                function updateActiveFiltersForGroupedView() {
                    const activeFiltersContainer = document.getElementById('activeFilters');
                    const filterTags = document.getElementById('filterTags');

                    const tags = [];

                    // Only show filters that are shared between grouped view and other views:
                    // - Professor filter (shared globally)
                    // - Search filter (shared globally)
                    // - My Files filter (shared globally)

                    // Get professor filter (from multi-select)
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'professor', value: cb.value, label: cb.value }));
                    tags.push(...selectedProfessors);

                    // Get search filter
                    const searchTerm = document.getElementById('searchInput').value.trim();
                    if (searchTerm) {
                        tags.push({ type: 'search', value: searchTerm, label: `🔍 "${searchTerm}"` });
                    }

                    // Get "My Files" toggle
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;
                    if (myFilesOnly) {
                        tags.push({ type: 'myFiles', value: 'true', label: `👤 My Files Only` });
                    }

                    // Show/hide active filters container based on whether there are active filters
                    if (tags.length > 0) {
                        activeFiltersContainer.style.display = 'block';
                        filterTags.innerHTML = tags.map(tag => `
                            <span style="display: inline-flex; align-items: center; gap: 0.375rem; background: white; border: 1px solid var(--umd-red); color: var(--umd-red); padding: 4px 8px; border-radius: 6px; font-size: 0.813rem; font-weight: 500;">
                                ${tag.label}
                                <button onclick="removeFilter('${tag.type}', '${escapeHtml(tag.value)}')" style="background: none; border: none; color: var(--umd-red); cursor: pointer; padding: 0; font-size: 1rem; line-height: 1; font-weight: bold;" title="Remove filter">
                                    ×
                                </button>
                            </span>
                        `).join('');
                    } else {
                        activeFiltersContainer.style.display = 'none';
                        filterTags.innerHTML = '';
                    }
                }

                // Client-side filtering - instant, no page reloads!
                function applyFilters() {
                    // Preserve dropdown states before filtering
                    const yearDropdown = document.getElementById('yearDropdown');
                    const semesterDropdown = document.getElementById('semesterDropdown');
                    const categoryDropdown = document.getElementById('categoryDropdown');
                    const classDropdown = document.getElementById('classDropdown');
                    const professorDropdown = document.getElementById('professorDropdown');
                    const yearDropdownOpen = yearDropdown && yearDropdown.classList.contains('show');
                    const semesterDropdownOpen = semesterDropdown && semesterDropdown.classList.contains('show');
                    const categoryDropdownOpen = categoryDropdown && categoryDropdown.classList.contains('show');
                    const classDropdownOpen = classDropdown && classDropdown.classList.contains('show');
                    const professorDropdownOpen = professorDropdown && professorDropdown.classList.contains('show');

                    // Update persistent folder states if currently in grouped view
                    if (currentView === 'grouped') {
                        captureFolderStates();
                    }

                    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                    const sortBy = document.getElementById('sortFilter').value;
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;

                    // Get multi-select values from checkboxes
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);

                    // Current user's userid for "My Files" filter
                    const currentUserid = '<%= user.userid %>';

                    // Filter files
                    let filteredFiles = allFilesData.filter(file => {
                        // "My Files" filter - show only files uploaded by current user
                        const matchesMyFiles = !myFilesOnly || file.uploadedBy === currentUserid;

                        // Search filter - searches by filename, uploader, class, description, category, and professor
                        const matchesSearch = !searchTerm ||
                            file.originalName.toLowerCase().includes(searchTerm) ||
                            file.uploadedBy.toLowerCase().includes(searchTerm) ||
                            (file.classCode && file.classCode.toLowerCase().includes(searchTerm)) ||
                            (file.description && file.description.toLowerCase().includes(searchTerm)) ||
                            (file.category && file.category.toLowerCase().includes(searchTerm)) ||
                            (file.professor && file.professor.toLowerCase().includes(searchTerm));

                        // Category filter (multi-select)
                        // Treat files without category as "Other"
                        const fileCategory = file.category || 'Other';
                        const matchesCategory = selectedCategories.length === 0 || selectedCategories.includes(fileCategory);

                        // Semester filter (multi-select)
                        const matchesSemester = selectedSemesters.length === 0 || selectedSemesters.includes(file.semester);

                        // Year filter (multi-select)
                        const matchesYear = selectedYears.length === 0 || selectedYears.includes(file.year);

                        // Major filter (multi-select)
                        const matchesMajor = selectedMajors.length === 0 || selectedMajors.includes(file.major);

                        // Class filter (multi-select)
                        const matchesClass = selectedClasses.length === 0 || selectedClasses.includes(file.classCode);

                        // Professor filter (multi-select)
                        const matchesProfessor = selectedProfessors.length === 0 ||
                            (file.professor && selectedProfessors.some(selectedProf =>
                                file.professor.toLowerCase() === selectedProf.toLowerCase()
                            ));

                        return matchesMyFiles && matchesSearch && matchesMajor && matchesClass && matchesCategory && matchesYear && matchesSemester && matchesProfessor;
                    });

                    // Sort files
                    filteredFiles.sort((a, b) => {
                        switch (sortBy) {
                            case 'oldest':
                                return new Date(a.uploadDate) - new Date(b.uploadDate);
                            case 'popular':
                                return (b.downloadCount || 0) - (a.downloadCount || 0);
                            case 'name':
                                return a.originalName.localeCompare(b.originalName);
                            case 'size-desc':
                                return (b.size || 0) - (a.size || 0);
                            case 'size-asc':
                                return (a.size || 0) - (b.size || 0);
                            case 'newest':
                            default:
                                return new Date(b.uploadDate) - new Date(a.uploadDate);
                        }
                    });

                    // Update only the active view with appropriate filtering
                    if (currentView === 'grid') {
                    displayFiles(filteredFiles);
                    } else if (currentView === 'grouped') {
                        renderGroupedView();
                    } else if (currentView === 'list') {
                        renderListView();
                    }

                    // Restore dropdown states after filtering
                    setTimeout(() => {
                        if (categoryDropdownOpen && categoryDropdown) {
                            categoryDropdown.classList.add('show');
                        }
                        if (semesterDropdownOpen && semesterDropdown) {
                            semesterDropdown.classList.add('show');
                        }
                        if (yearDropdownOpen && yearDropdown) {
                            yearDropdown.classList.add('show');
                        }
                        if (classDropdownOpen && classDropdown) {
                            classDropdown.classList.add('show');
                        }
                        if (professorDropdownOpen && professorDropdown) {
                            professorDropdown.classList.add('show');
                        }
                    }, 10);

                    // Update active filters display based on current view
                    if (currentView === 'grouped') {
                        updateActiveFiltersForGroupedView();
                    } else {
                        updateActiveFilters();
                    }
                }

                // Update active filters display (Grid view only)
                function updateActiveFilters() {
                    const activeFiltersContainer = document.getElementById('activeFilters');
                    const filterTags = document.getElementById('filterTags');

                    // Active filters are now always processed but made invisible in grouped view
                    // No early return needed

                    const tags = [];

                    // Get selected categories
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'category', value: cb.value, label: `<img src="/images/icons/folder-open.png" alt="Category" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedCategories);

                    // Get selected semesters
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'semester', value: cb.value, label: `<img src="/images/icons/calendar.png" alt="Calendar" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedSemesters);

                    // Get selected years
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'year', value: cb.value, label: `<img src="/images/icons/calendar.png" alt="Year" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedYears);

                    // Get selected majors
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'major', value: cb.value, label: `<img src="/images/icons/folder.png" alt="Major" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedMajors);

                    // Get selected classes
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'class', value: cb.value, label: `<img src="/images/icons/briefcase.png" alt="Course" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedClasses);

                    // Get selected professors
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                        .map(cb => ({ type: 'professor', value: cb.value, label: `<img src="/images/icons/user.png" alt="Professor" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> ${cb.value}` }));
                    tags.push(...selectedProfessors);

                    // Get search term
                    const searchTerm = document.getElementById('searchInput').value.trim();
                    if (searchTerm) {
                        tags.push({ type: 'search', value: searchTerm, label: `🔍 "${searchTerm}"` });
                    }

                    // Get "My Files" toggle
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;
                    if (myFilesOnly) {
                        tags.push({ type: 'myFiles', value: 'true', label: `👤 My Files Only` });
                    }

                    // Update filter tags content
                    if (activeFiltersContainer && filterTags) {
                        if (tags.length > 0) {
                            filterTags.innerHTML = tags.map(tag => `
                                <span style="display: inline-flex; align-items: center; gap: 0.375rem; background: white; border: 1px solid var(--umd-red); color: var(--umd-red); padding: 4px 8px; border-radius: 6px; font-size: 0.813rem; font-weight: 500;">
                                    ${tag.label}
                                    <button onclick="removeFilter('${tag.type}', '${escapeHtml(tag.value)}')" style="background: none; border: none; color: var(--umd-red); cursor: pointer; padding: 0; font-size: 1rem; line-height: 1; font-weight: bold;" title="Remove filter">
                                        ×
                                    </button>
                                </span>
                            `).join('');
                        } else {
                            filterTags.innerHTML = '<span style="color: #6B7280; font-style: italic;">No filters applied</span>';
                        }

                        // Active filters updated
                    }
                }

                // Remove a specific filter
                function removeFilter(type, value) {
                    if (type === 'search') {
                        document.getElementById('searchInput').value = '';
                    } else if (type === 'myFiles') {
                        document.getElementById('myFilesToggle').checked = false;
                    } else {
                        const checkbox = document.querySelector(`#${type}Dropdown input[type="checkbox"][value="${escapeHtml(value)}"]`);
                        if (checkbox) {
                            checkbox.checked = false;
                            updateMultiSelect(type);
                        }
                    }
                    applyFilters();
                }


                function displayFiles(files) {
                    const gridView = document.getElementById('gridView');

                    if (files.length === 0) {
                        gridView.innerHTML = '<div class="empty-state"><h3>No notes found</h3><p>Try different filters or search terms</p></div>';
                        return;
                    }

                    // Always update grid view with new data
                    if (gridView) {
                        // Set display based on current view
                        gridView.style.display = currentView === 'grid' ? 'grid' : 'none';
                        gridView.innerHTML = files.map(file => {
                            // Calculate if file is "new" (within 7 days)
                            const uploadDate = new Date(file.uploadDate);
                            const now = new Date();
                            const daysAgo = Math.floor((now - uploadDate) / (1000 * 60 * 60 * 24));
                            const isNew = daysAgo <= 7;

                            return `
                <div class="file-card animate-fade-in"
                     data-class="${escapeHtml(file.classCode || '')}"
                     data-major="${escapeHtml(file.major || '')}"
                     data-semester="${escapeHtml(file.semester || '')}"
                     data-year="${escapeHtml(file.year || '')}"
                     data-category="${escapeHtml((file.category || '').toLowerCase())}"
                     data-professor="${escapeHtml((file.professor || '').toLowerCase())}"
                     data-uploader="${escapeHtml(file.uploadedBy)}"
                     data-name="${escapeHtml(file.originalName.toLowerCase())}"
                     data-date="${new Date(file.uploadDate).getTime()}"
                     data-downloads="${file.downloadCount || 0}"
                     data-size="${file.size || 0}">
                    <div class="file-header" style="position: relative; display: flex; align-items: center; justify-content: center; gap: 0.75rem; margin-bottom: 1rem;">
                        <!-- Bulk select checkbox -->
                        <div style="position: absolute; top: 0.5rem; left: 0.5rem; z-index: 20; background: rgba(255,255,255,0.9); padding: 2px; border-radius: 4px; border: 1px solid #D1D5DB;">
                            <input type="checkbox" class="file-select-checkbox" data-filename="${file.filename}"
                                style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--umd-red); transform: scale(1.2);"
                                onchange="updateSelectedCount()" />
                        </div>
                        <div style="position: absolute; top: 0.5rem; right: 0.5rem; background: #FEF3C7; color: #92400E; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600; cursor: help; z-index: 10;" title="${file.downloadCount || 0} downloads">
                            ${file.downloadCount || 0}
                        </div>
                        <div class="file-icon">${getFileIcon(file.originalName)}</div>
                        <div class="file-info">
                            <h3 style="margin: 0 0 0.1rem 0; font-size: 1rem;">${truncateFilename(file.originalName, 18)}</h3>
                        </div>
                    </div>
                    <div class="file-meta" style="margin-top: 0.1rem;">
                        <div class="tags-section" style="display: flex; flex-wrap: wrap; gap: 0.3rem; margin-bottom: 0.5rem;">
                            ${generateStatusBadges(file, isNew)}
                        </div>
                        ${file.major ? `<div class="file-meta-item"><strong>Major:</strong> <span class="major-badge">${escapeHtml(file.major)}</span></div>` : ''}
                        ${file.classCode ? `<div class="file-meta-item"><strong>Class:</strong> <span class="class-code-badge">${escapeHtml(file.classCode)}</span></div>` : ''}
                        ${file.professor ? `<div class="file-meta-item"><strong>Professor:</strong> ${escapeHtml(file.professor)}</div>` : ''}
                        ${file.semester && file.year ? `<div class="file-meta-item"><strong>Term:</strong> ${file.semester} ${file.year}</div>` : ''}
                        <div class="file-meta-item"><strong>Uploaded by:</strong> ${escapeHtml(file.uploadedBy)}</div>
                        ${file.description ? `<div class="file-meta-item"><strong>Description:</strong> ${escapeHtml(file.description)}</div>` : ''}
                        <div class="file-meta-item"><strong>Size:</strong> ${formatFileSize(file.size || 0)}</div>
                    </div>
                    <div class="file-actions" style="display: flex; gap: 0.5rem; flex-wrap: wrap; justify-content: center;">
                        <a href="/download/${encodeURIComponent(file.filename)}" class="button download" target="_blank">Download</a>
                        ${getEditButton(file)}
                        ${getDeleteButton(file)}
                        <button class="button secondary small report-btn" data-filename="${file.filename}" data-original-name="${escapeHtml(file.originalName)}">🚩 Report</button>
                    </div>
                </div>
            `;
                        }).join('');

                        // Update selected count after populating grid
                        setTimeout(() => {
                            updateSelectedCount();
                        }, 100);
                    }

                    // Update grouped view display
                    if (groupedView) {
                        groupedView.style.display = currentView === 'grouped' ? 'block' : 'none';
                    }
                }

                function canDeleteFile(file) {
                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';
                    return userRole === 'admin' || file.uploadedBy === userId;
                }

                // Duplicate function removed - using the one defined earlier that uses dashboardConfig

                function getDeleteButton(file) {
                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';

                    if (userRole === 'viewer') {
                        return `<button class="button danger disabled" onclick="showViewerAlert(); return false;" title="View-only mode" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">Delete</button>`;
                    } else if (userRole === 'admin' || file.uploadedBy === userId) {
                        return `<a href="/delete/${encodeURIComponent(file.filename)}" class="button danger" onclick="return confirm('Are you sure you want to delete this file?')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">Delete</a>`;
                    } else {
                        return `<button class="button danger disabled" disabled title="You can only delete your own files" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">Delete</button>`;
                    }
                }

                function showViewerAlert() {
                    alert('🔒 View-Only Mode\n\nYour account has been set to view-only access. You can download files but cannot upload or delete.\n\nPlease contact an administrator if you need upload/delete permissions.');
                }

                // Edit file functionality
                function openEditModal(fileData) {
                    const modal = document.getElementById('editFileModal');
                    const form = document.getElementById('editFileForm');

                    // Populate form with current file data
                    document.getElementById('editFileId').value = fileData.filename;
                    document.getElementById('editClassCode').value = fileData.classCode || '';
                    document.getElementById('editProfessor').value = fileData.professor || '';
                    document.getElementById('editSemester').value = fileData.semester || '';
                    document.getElementById('editYear').value = fileData.year || '';

                    // Set category selection - ensure exact match
                    const categorySelect = document.getElementById('editCategory');
                    const currentCategory = fileData.category || '';

                    // Try to find exact match first
                    for (let option of categorySelect.options) {
                        if (option.value === currentCategory) {
                            option.selected = true;
                            break;
                        }
                    }

                    // If no exact match found, try to find by display text
                    if (categorySelect.value !== currentCategory) {
                        for (let option of categorySelect.options) {
                            if (option.text.includes(currentCategory) || currentCategory.includes(option.text)) {
                                option.selected = true;
                                break;
                            }
                        }
                    }

                    document.getElementById('editDescription').value = fileData.description || '';

                    // Initialize UMD.io autocomplete for edit form
                    initializeEditFormAutocomplete();

                    // Show modal
                    modal.style.display = 'block';
                }

                function closeEditModal() {
                    const modal = document.getElementById('editFileModal');
                    modal.style.display = 'none';
                }

                // Initialize UMD.io autocomplete for edit form
                function initializeEditFormAutocomplete() {
                    const editClassCodeInput = document.getElementById('editClassCode');
                    const editProfessorInput = document.getElementById('editProfessor');

                    if (!editClassCodeInput || !editProfessorInput) return;

                    // Course autocomplete for edit form
                    let editCourseData = [];
                    let editProfessorData = [];
                    let editCourseTimeout;

                    // Fetch course data for edit form
                    async function fetchEditCourseData() {
                        try {
                            const response = await fetch('/api/umd/courses');
                            if (response.ok) {
                                editCourseData = await response.json();
                            }
                        } catch (error) {
                        }
                    }

                    // Fetch professor data for edit form
                    async function fetchEditProfessorData(courseId) {
                        try {
                            const queryParams = new URLSearchParams();
                            if (courseId) queryParams.append('course_id', courseId);

                            const response = await fetch(`/api/umd/professors?${queryParams}`);
                            if (response.ok) {
                                editProfessorData = await response.json();
                            }
                        } catch (error) {
                        }
                    }

                    // Initialize autocomplete on edit form inputs
                    editClassCodeInput.addEventListener('input', function(e) {
                        const value = e.target.value.trim();

                        // Update course suggestions
                        if (value.length >= 2 && editCourseData.length > 0) {
                            const filtered = editCourseData.filter(course =>
                                course.course_id.toLowerCase().includes(value.toLowerCase())
                            );

                            const datalist = document.getElementById('editClassCodeSuggestions');
                            datalist.innerHTML = '';

                            filtered.slice(0, 10).forEach(course => {
                                const option = document.createElement('option');
                                option.value = course.course_id;
                                option.textContent = `${course.course_id} - ${course.course_name || ''}`;
                                datalist.appendChild(option);
                            });
                        }

                        clearTimeout(editCourseTimeout);
                        editCourseTimeout = setTimeout(async () => {
                            if (value.length >= 2) {
                                await fetchEditProfessorData(value);
                            }
                        }, 300);
                    });

                    editProfessorInput.addEventListener('input', function(e) {
                        const value = e.target.value.trim();

                        if (value.length >= 2 && editProfessorData.length > 0) {
                            const filtered = editProfessorData.filter(prof =>
                                prof.name.toLowerCase().includes(value.toLowerCase())
                            );

                            const datalist = document.getElementById('editProfessorSuggestions');
                            datalist.innerHTML = '';

                            filtered.slice(0, 10).forEach(prof => {
                                const option = document.createElement('option');
                                option.value = prof.name;
                                datalist.appendChild(option);
                            });
                        }
                    });

                    // Initialize course data
                    fetchEditCourseData();
                }

                async function saveFileEdit() {
                    const form = document.getElementById('editFileForm');
                    const formData = new FormData(form);
                    const fileId = formData.get('fileId');

                    try {
                        const response = await fetch('/edit-file', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                filename: fileId,
                                classCode: formData.get('classCode'),
                                professor: formData.get('professor'),
                                semester: formData.get('semester'),
                                year: formData.get('year'),
                                category: formData.get('category'),
                                description: formData.get('description')
                            })
                        });

                        if (response.ok) {
                            showNotification('File updated successfully!', 'success', 3000);
                            closeEditModal();
                            // Refresh the current view
                            applyFilters();
                        } else {
                            const error = await response.text();
                            showNotification(`Error updating file: ${error}`, 'error', 5000);
                        }
                    } catch (error) {
                        showNotification(`Error updating file: ${error.message}`, 'error', 5000);
                    }
                }

                // Add event delegation for edit buttons
                document.addEventListener('click', function (e) {
                    if (e.target.classList.contains('edit-btn') || e.target.closest('.edit-btn')) {
                        const button = e.target.classList.contains('edit-btn') ? e.target : e.target.closest('.edit-btn');
                        const fileData = JSON.parse(button.getAttribute('data-file-data'));
                        openEditModal(fileData);
                    }
                });

                // Add event delegation for report buttons
                document.addEventListener('click', function (e) {
                    if (e.target.classList.contains('report-btn') || e.target.closest('.report-btn')) {
                        const btn = e.target.classList.contains('report-btn') ? e.target : e.target.closest('.report-btn');
                        const filename = btn.dataset.filename;
                        const originalName = btn.dataset.originalName;
                        reportFile(filename, originalName);
                    }
                });

                // File reporting function
                async function reportFile(filename, originalName) {
                    const reasons = [
                        'Inappropriate content',
                        'Copyright violation',
                        'Malicious file',
                        'Academic integrity violation (unauthorized exam/project)',
                        'Spam or irrelevant content',
                        'Other'
                    ];

                    const reason = prompt(`Why are you reporting "${originalName}"?\n\nEnter the reason:\n1. ${reasons[0]}\n2. ${reasons[1]}\n3. ${reasons[2]}\n4. ${reasons[3]}\n5. ${reasons[4]}\n6. ${reasons[5]}\n\nEnter number (1-6):`);

                    if (!reason) return; // User cancelled

                    const reasonIndex = parseInt(reason) - 1;
                    if (reasonIndex < 0 || reasonIndex >= reasons.length) {
                        alert('Invalid selection. Please try again.');
                        return;
                    }

                    const selectedReason = reasons[reasonIndex];
                    const additionalDetails = prompt(`Optional: Add more details about the issue:`) || '';

                    try {
                        const response = await fetch('/api/report-file', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                filename: filename,
                                originalName: originalName,
                                reason: selectedReason,
                                details: additionalDetails
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            alert('Report submitted successfully. An admin will review this file.');
                        } else {
                            alert('Error: ' + result.error);
                        }
                    } catch (error) {
                        alert('Failed to submit report. Please try again.');
                    }
                }

                function escapeHtml(text) {
                    const div = document.createElement('div');
                    div.textContent = text;
                    return div.innerHTML;
                }

                function getScanBadge(status) {
                    if (status === 'clean') {
                        return '<span class="scan-badge scan-clean"><img src="/images/icons/security-shield-check.png" alt="Security" style="width: 24px; height: 24px; vertical-align: middle; margin-right: 6px;" />Virus Scanned</span>';
                    } else if (status === 'pending') {
                        return '<span class="scan-badge scan-pending">⏳ Scanning...</span>';
                    } else if (status === 'error') {
                        return '<span class="scan-badge scan-error">❌ Scan Error</span>';
                    }
                    return '';
                }

                // Notification System
                function showNotification(message, type = 'error', duration = 3000) {
                    const notification = document.createElement('div');
                    const bgColor = type === 'success' ? '#10B981' : '#EF4444';
                    const icon = type === 'success' ? '✅' : '⚠️';

                    notification.style.cssText = `
                        position: fixed; top: 20px; right: 20px; background: ${bgColor}; color: white;
                        padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                        font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                        max-width: 350px; line-height: 1.4;
                    `;

                    notification.innerHTML = `
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">${icon}</span>
                            <span>${message}</span>
                        </div>
                    `;

                    document.body.appendChild(notification);
                    setTimeout(() => notification.remove(), duration);
                }

                // Direct S3 Upload Form Handler
                const uploadForm = document.getElementById('uploadForm');
                if (uploadForm) {
                    uploadForm.addEventListener('submit', async function (e) {
                        e.preventDefault(); // Prevent default form submission

                        const submitBtn = document.getElementById('uploadSubmitBtn');
                        const filesInput = document.getElementById('documents');
                        const files = filesInput.files;

                        if (files.length === 0) {
                            showNotification('Please select at least one file to upload');
                            return;
                        }

                        // Get form data
                        const classCode = document.getElementById('classCode').value.trim();
                        const professor = document.getElementById('professor').value.trim();
                        const semester = document.getElementById('semester').value;
                        const year = document.getElementById('year').value;
                        const category = document.getElementById('category').value;
                        const description = document.getElementById('description').value.trim();
                        const academicIntegrity = document.getElementById('academicIntegrity').checked;


                        // Comprehensive validation with specific error messages
                        const missingFields = [];
                        if (!classCode) missingFields.push('Class Code');
                        if (!professor) missingFields.push('Professor');
                        if (!semester) missingFields.push('Semester');
                        if (!year) missingFields.push('Year');
                        if (!category) missingFields.push('Category');
                        if (!description) missingFields.push('Description');
                        if (!academicIntegrity) missingFields.push('Academic Integrity Agreement');

                        if (missingFields.length > 0) {
                            const message = `
                                <div style="margin-bottom: 0.5rem;">
                                    <strong>Missing Required Fields:</strong>
                                </div>
                                <div style="font-size: 0.9rem;">
                                    ${missingFields.map(field => `• ${field}`).join('<br>')}
                                </div>
                            `;
                            showNotification(message, 'error', 5000);
                            return;
                        }

                        // Disable submit button
                        submitBtn.disabled = true;
                        submitBtn.textContent = 'Uploading...';

                        // Show loading overlay
                        const overlay = document.createElement('div');
                        overlay.id = 'uploadOverlay';
                        overlay.innerHTML = `
                            <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.7); display: flex; align-items: center; justify-content: center; z-index: 9999;">
                                <div style="background: white; padding: 3rem; border-radius: 12px; text-align: center; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3); min-width: 400px;">
                                    <div style="width: 60px; height: 60px; border: 4px solid #E5E7EB; border-top-color: #DC2626; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1.5rem;"></div>
                                    <h3 style="color: #DC2626; margin-bottom: 0.5rem;">Uploading Files...</h3>
                                    <p style="color: #6B7280;" id="uploadStatus">Preparing upload...</p>
                                    <p style="color: #9CA3AF; font-size: 0.85rem; margin-top: 1rem;">
                                        <span id="uploadProgress">0</span> / ${files.length} files • Direct S3 upload
                                    </p>
                                </div>
                            </div>
                            <style>
                                @keyframes spin {
                                    0% { transform: rotate(0deg); }
                                    100% { transform: rotate(360deg); }
                                }
                            </style>
                        `;
                        document.body.appendChild(overlay);

                        const statusEl = document.getElementById('uploadStatus');
                        const progressEl = document.getElementById('uploadProgress');

                        let successCount = 0;
                        let errorCount = 0;

                        // Helper function for fetch with timeout
                        const fetchWithTimeout = async (url, options = {}, timeout = 30000) => {
                            const controller = new AbortController();
                            const timeoutId = setTimeout(() => controller.abort(), timeout);

                            try {
                                const response = await fetch(url, {
                                    ...options,
                                    signal: controller.signal
                                });
                                clearTimeout(timeoutId);
                                return response;
                            } catch (error) {
                                clearTimeout(timeoutId);
                                if (error.name === 'AbortError') {
                                    throw new Error(`Request timeout after ${timeout}ms`);
                                }
                                throw error;
                            }
                        };

                        // Upload each file
                        for (let i = 0; i < files.length; i++) {
                            const file = files[i];
                            statusEl.textContent = `Processing ${file.name}... (${i + 1}/${files.length})`;

                            try {

                                // Step 1: Calculate file hash (client-side to avoid server timeout)
                                const arrayBuffer = await file.arrayBuffer();
                                const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);
                                const hashArray = Array.from(new Uint8Array(hashBuffer));
                                const fileHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

                                statusEl.textContent = `Uploading ${file.name}...`;

                                // Step 2: Get presigned URL
                                const urlResponse = await fetchWithTimeout('/api/get-upload-url', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        filename: file.name,
                                        filetype: file.type
                                    })
                                }, 10000); // 10 second timeout for getting upload URL

                                if (!urlResponse.ok) {
                                    const errorText = await urlResponse.text();
                                    throw new Error(`Failed to get upload URL (${urlResponse.status}): ${errorText || 'Unknown error'}`);
                                }

                                let uploadUrl, s3Key, s3Url;
                                try {
                                    const responseData = await urlResponse.json();
                                    uploadUrl = responseData.uploadUrl;
                                    s3Key = responseData.s3Key;
                                    s3Url = responseData.s3Url;
                                } catch (jsonError) {
                                    throw new Error(`Failed to parse upload URL response: ${jsonError.message}`);
                                }

                                // Step 3: Upload directly to S3
                                const s3Response = await fetchWithTimeout(uploadUrl, {
                                    method: 'PUT',
                                    body: file,
                                    headers: {
                                        'Content-Type': file.type
                                    }
                                }, 60000); // 60 second timeout for S3 upload

                                if (!s3Response.ok) {
                                    const errorText = await s3Response.text();
                                    throw new Error(`S3 upload failed (${s3Response.status}): ${errorText || 'Unknown error'}`);
                                }

                                // Step 4: Confirm upload to backend
                                const confirmResponse = await fetchWithTimeout('/api/confirm-upload', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        s3Key: s3Key,
                                        s3Url: s3Url,
                                        filename: file.name,
                                        filetype: file.type,
                                        filesize: file.size,
                                        fileHash: fileHash,
                                        classCode: classCode,
                                        major: classCode.replace(/[0-9]/g, '').trim(), // Extract major from class code
                                        professor: professor,
                                        semester: semester,
                                        year: year,
                                        category: category,
                                        description: description
                                    })
                                }, 15000); // 15 second timeout for confirming upload

                                if (!confirmResponse.ok) {
                                    const errorText = await confirmResponse.text();
                                    throw new Error(`Failed to save file metadata (${confirmResponse.status}): ${errorText || 'Unknown error'}`);
                                }

                                let result;
                                try {
                                    result = await confirmResponse.json();
                                } catch (jsonError) {
                                    throw new Error(`Failed to parse confirm upload response: ${jsonError.message}`);
                                }

                                if (result.duplicate) {
                                    statusEl.textContent = `${file.name} already exists (skipped)`;
                                } else {
                                    successCount++;
                                }

                                progressEl.textContent = i + 1;
                            } catch (error) {
                                errorCount++;
                                statusEl.textContent = `Error uploading ${file.name}: ${error.message}`;
                                statusEl.style.color = '#EF4444';

                                // Show detailed error notification
                                const errorNotification = document.createElement('div');
                                errorNotification.style.cssText = `
                                    position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                    padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                    font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                                    max-width: 400px;
                                `;
                                errorNotification.innerHTML = `
                                    <strong>Upload Failed:</strong> ${file.name}<br>
                                    <small>Error: ${error.message}</small>
                                `;
                                document.body.appendChild(errorNotification);
                                setTimeout(() => errorNotification.remove(), 5000);
                            }
                        }

                        // Show completion message
                        statusEl.textContent = `Upload complete! ${successCount} uploaded, ${errorCount} failed`;

                        // Show success notification
                        if (successCount > 0 && errorCount === 0) {
                            showNotification(`Successfully uploaded ${successCount} file${successCount > 1 ? 's' : ''}!`, 'success', 4000);
                        } else if (successCount > 0 && errorCount > 0) {
                            showNotification(`Uploaded ${successCount} file${successCount > 1 ? 's' : ''}, ${errorCount} failed`, 'error', 5000);
                        } else {
                            showNotification('Upload failed - please try again', 'error', 4000);
                        }

                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    });
                }

                // Initialize on page load
                document.addEventListener('DOMContentLoaded', function () {
                    // Real-time search as you type
                    const searchInput = document.getElementById('searchInput');
                    if (searchInput) {
                        searchInput.addEventListener('input', applyFilters);
                    }

                    // Load UMD.io course data for custom dropdown
                    const classCodeInput = document.getElementById('classCode');
                    const coursesDropdown = document.getElementById('coursesDropdown');
                    const courseInfo = document.getElementById('courseInfo');
                    const professorInput = document.getElementById('professor');
                    const professorsDropdown = document.getElementById('professorsDropdown');

                    let allCourses = [];
                    let selectedCourseIndex = -1;
                    let selectedProfessorIndex = -1;
                    let professorData = []; // Will store {name, semesters: [{semester, year}]}

                    if (classCodeInput && coursesDropdown) {
                        // Fetch courses on load
                        fetch('/api/umd/courses?per_page=100')
                            .then(res => res.json())
                            .then(courses => {
                                if (courses && courses.length > 0) {
                                    allCourses = courses;
                                    courseInfo.textContent = `${courses.length} courses loaded - start typing to search`;
                                    courseInfo.style.color = '#10B981';
                                }
                            })
                            .catch(err => {
                                courseInfo.textContent = 'Type any class code to continue';
                                courseInfo.style.color = '#9CA3AF';
                            });

                        // Flag to prevent input/change events when selecting from dropdown
                        let isSelectingFromDropdown = false;

                        // Auto-uppercase and show dropdown
                        classCodeInput.addEventListener('input', function () {
                            // Skip if we're selecting from dropdown
                            if (isSelectingFromDropdown) return;

                            this.value = this.value.toUpperCase();
                            const searchTerm = this.value.trim();

                            if (searchTerm.length === 0) {
                                coursesDropdown.classList.remove('show');
                                return;
                            }

                            // Filter courses
                            const filteredCourses = allCourses.filter(course => {
                                const courseId = course.course_id.toUpperCase();
                                const courseName = (course.name || '').toUpperCase();
                                const search = searchTerm.toUpperCase();
                                return courseId.includes(search) || courseName.includes(search);
                            });

                            // Reset selection
                            selectedCourseIndex = -1;

                            // Render dropdown
                            renderCoursesDropdown(filteredCourses, searchTerm);
                        });

                        // Keyboard navigation
                        classCodeInput.addEventListener('keydown', function (e) {
                            const items = coursesDropdown.querySelectorAll('.custom-dropdown-item');

                            if (e.key === 'ArrowDown') {
                                e.preventDefault();
                                selectedCourseIndex = Math.min(selectedCourseIndex + 1, items.length - 1);
                                updateSelectedItem(items);
                            } else if (e.key === 'ArrowUp') {
                                e.preventDefault();
                                selectedCourseIndex = Math.max(selectedCourseIndex - 1, 0);
                                updateSelectedItem(items);
                            } else if (e.key === 'Enter' && selectedCourseIndex >= 0) {
                                e.preventDefault();
                                items[selectedCourseIndex].click();
                            } else if (e.key === 'Escape') {
                                coursesDropdown.classList.remove('show');
                            }
                        });

                        // Close dropdown when clicking outside
                        document.addEventListener('click', function (e) {
                            if (!classCodeInput.contains(e.target) && !coursesDropdown.contains(e.target)) {
                                coursesDropdown.classList.remove('show');
                            }
                            if (!professorInput.contains(e.target) && !professorsDropdown.contains(e.target)) {
                                professorsDropdown.classList.remove('show');
                            }
                        });

                        // Professor input event listeners
                        if (professorInput && professorsDropdown) {
                            professorInput.addEventListener('input', async function () {
                                const searchTerm = this.value.trim();

                                // If no search term, show course-specific professors if available
                                if (searchTerm.length === 0) {
                                    if (professorData.length > 0) {
                                        renderProfessorsDropdown(professorData, searchTerm);
                                    } else {
                                        professorsDropdown.classList.remove('show');
                                    }
                                    // Reset course filtering when professor field is cleared
                                    resetCourseDropdown();
                                    // Reset semester/year dropdowns to show all options
                                    resetDropdownsToAllOptions();
                                    return;
                                }

                                // For name search, use local filtering from course data or existing professorData
                                // UMD.io name search is too restrictive for real-time search
                                if (searchTerm.length >= 1) {

                                    // First try to filter from existing professorData (course-specific)
                                    let searchResults = professorData.filter(prof => {
                                        return prof.name.toUpperCase().includes(searchTerm.toUpperCase());
                                    });


                                    // If no results from professor data, show message
                                    if (searchResults.length === 0) {
                                        professorsDropdown.innerHTML = `<div class="custom-dropdown-empty">No professors found for "${searchTerm}" - try typing manually</div>`;
                                        professorsDropdown.classList.add('show');
                                        return;
                                    }


                                    // Reset selection
                                    selectedProfessorIndex = -1;

                                    // Render dropdown with search results
                                    renderProfessorsDropdown(searchResults, searchTerm);
                                } else {
                                    // For 1 character, just filter locally
                                    const filteredProfessors = professorData.filter(prof => {
                                        return prof.name.toUpperCase().includes(searchTerm.toUpperCase());
                                    });
                                    renderProfessorsDropdown(filteredProfessors, searchTerm);
                                }
                            });

                            // Keyboard navigation for professor dropdown
                            professorInput.addEventListener('keydown', function (e) {
                                const items = professorsDropdown.querySelectorAll('.custom-dropdown-item');

                                if (e.key === 'ArrowDown') {
                                    e.preventDefault();
                                    selectedProfessorIndex = Math.min(selectedProfessorIndex + 1, items.length - 1);
                                    updateSelectedProfessorItem(items);
                                } else if (e.key === 'ArrowUp') {
                                    e.preventDefault();
                                    selectedProfessorIndex = Math.max(selectedProfessorIndex - 1, 0);
                                    updateSelectedProfessorItem(items);
                                } else if (e.key === 'Enter' && selectedProfessorIndex >= 0) {
                                    e.preventDefault();
                                    items[selectedProfessorIndex].click();
                                } else if (e.key === 'Escape') {
                                    professorsDropdown.classList.remove('show');
                                }
                            });

                            // Show dropdown when focused if there's data
                            professorInput.addEventListener('focus', async function () {
                                if (professorData.length > 0) {
                                    renderProfessorsDropdown(professorData, '');
                                } else {
                                    // Try to load professor data if course is entered
                                    const selectedCourse = classCodeInput.value.trim();
                                    if (selectedCourse) {
                                        await updateProfessorList();
                                    } else {
                                    }
                                }
                            });
                        }

                        // Render courses dropdown
                        function renderCoursesDropdown(courses, searchTerm) {
                            if (courses.length === 0) {
                                coursesDropdown.innerHTML = '<div class="custom-dropdown-empty">No courses found</div>';
                                coursesDropdown.classList.add('show');
                                return;
                            }

                            coursesDropdown.innerHTML = courses.map((course, index) => {
                                const courseId = course.course_id;
                                const courseName = course.name || courseId;

                                // Highlight matching text
                                const highlightedId = highlightText(courseId, searchTerm);
                                const highlightedName = highlightText(courseName, searchTerm);

                                return `
                                    <div class="custom-dropdown-item" data-course-id="${courseId}" data-course-name="${courseName}">
                                        <span class="course-code">${highlightedId}</span>
                                        <span class="course-name">${highlightedName}</span>
                                    </div>
                                `;
                            }).join('');

                            coursesDropdown.classList.add('show');

                            // Add click handlers
                            coursesDropdown.querySelectorAll('.custom-dropdown-item').forEach((item, index) => {
                                item.addEventListener('mousedown', function (e) {
                                    e.preventDefault(); // Prevent the input from losing focus

                                    const courseId = this.dataset.courseId;

                                    // Set flag to prevent input/change events
                                    isSelectingFromDropdown = true;

                                    // Update input value
                                    classCodeInput.value = courseId;
                                    classCodeInput.blur(); // Commit the value

                                    // Hide dropdown
                                    coursesDropdown.classList.remove('show');

                                    // Fetch course data directly
                                    fetchCourseData();

                                    // Reset flag after a short delay
                                    setTimeout(() => {
                                        isSelectingFromDropdown = false;
                                    }, 100);
                                });

                                item.addEventListener('mouseenter', function () {
                                    selectedCourseIndex = index;
                                    updateSelectedItem(coursesDropdown.querySelectorAll('.custom-dropdown-item'));
                                });
                            });
                        }

                        // Highlight matching text
                        function highlightText(text, searchTerm) {
                            if (!searchTerm) return text;
                            const regex = new RegExp(`(${searchTerm})`, 'gi');
                            return text.replace(regex, '<span class="highlight">$1</span>');
                        }

                        // Update selected item visual
                        function updateSelectedItem(items) {
                            items.forEach((item, index) => {
                                if (index === selectedCourseIndex) {
                                    item.classList.add('selected');
                                    item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
                                } else {
                                    item.classList.remove('selected');
                                }
                            });
                        }

                        // Update selected professor item visual
                        function updateSelectedProfessorItem(items) {
                            items.forEach((item, index) => {
                                if (index === selectedProfessorIndex) {
                                    item.classList.add('selected');
                                    item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
                                } else {
                                    item.classList.remove('selected');
                                }
                            });
                        }

                        // Render professors dropdown
                        function renderProfessorsDropdown(professors, searchTerm) {
                            if (professors.length === 0) {
                                professorsDropdown.innerHTML = '<div class="custom-dropdown-empty">Select a course first or type a professor name</div>';
                                professorsDropdown.classList.add('show');
                                return;
                            }

                            professorsDropdown.innerHTML = professors.map((prof, index) => {
                                const professorName = prof.name;

                                // Highlight matching text
                                const highlightedName = highlightText(professorName, searchTerm);

                                // Create semester tags
                                const semesterTags = prof.semesters.map(sem =>
                                    `<span class="semester-tag">${sem.semester} ${sem.year}</span>`
                                ).join('');

                                return `
                                    <div class="custom-dropdown-item" data-professor-name="${professorName}">
                                        <span class="professor-name">${highlightedName}</span>
                                        <div class="professor-semesters">${semesterTags}</div>
                                    </div>
                                `;
                            }).join('');

                            professorsDropdown.classList.add('show');

                            // Add click handlers
                            professorsDropdown.querySelectorAll('.custom-dropdown-item').forEach((item, index) => {
                                item.addEventListener('click', function () {
                                    const professorName = this.dataset.professorName;
                                    professorInput.value = professorName;
                                    professorsDropdown.classList.remove('show');

                                    // Update semester/year dropdowns based on selected professor's available semesters
                                    updateDropdownsForProfessor(professorName);
                                });

                                item.addEventListener('mouseenter', function () {
                                    selectedProfessorIndex = index;
                                    updateSelectedProfessorItem(professorsDropdown.querySelectorAll('.custom-dropdown-item'));
                                });
                            });
                        }

                        // Update semester/year dropdowns based on selected professor's available semesters
                        function updateDropdownsForProfessor(professorName) {
                            // Find the professor in the current professorData
                            const selectedProfessor = professorData.find(prof => prof.name === professorName);

                            if (!selectedProfessor || !selectedProfessor.semesters || selectedProfessor.semesters.length === 0) {
                                // No semester data for this professor, keep all options
                                return;
                            }

                            // Collect available semesters and years for this professor
                            const availableSemesters = new Set();
                            const availableYears = new Set();

                            selectedProfessor.semesters.forEach(sem => {
                                availableSemesters.add(sem.semester);
                                availableYears.add(sem.year);
                            });

                            // Update semester dropdown with only available semesters
                            const semesterSelect = document.getElementById('semester');
                            const currentSemester = semesterSelect.value;

                            semesterSelect.innerHTML = '<option value="">Select semester</option>';
                            const allSemesterOptions = ['Spring', 'Summer', 'Fall', 'Winter'];

                            allSemesterOptions.forEach(semester => {
                                if (availableSemesters.has(semester)) {
                                    const option = document.createElement('option');
                                    option.value = semester;
                                    option.textContent = semester;
                                    semesterSelect.appendChild(option);
                                }
                            });

                            // Restore current selection if it's still available
                            if (currentSemester && availableSemesters.has(currentSemester)) {
                                semesterSelect.value = currentSemester;
                            }

                            // Update year dropdown with only available years
                            const yearSelect = document.getElementById('year');
                            const currentYear = yearSelect.value;

                            yearSelect.innerHTML = '<option value="">Select year</option>';
                            const availableYearsArray = Array.from(availableYears).sort((a, b) => b - a);

                            availableYearsArray.forEach(year => {
                                const option = document.createElement('option');
                                option.value = year;
                                option.textContent = year;
                                yearSelect.appendChild(option);
                            });

                            // Restore current selection if it's still available
                            if (currentYear && availableYears.has(parseInt(currentYear))) {
                                yearSelect.value = currentYear;
                            }
                        }

                        // Reset semester/year dropdowns to show all options (when professor is cleared)
                        function resetDropdownsToAllOptions() {
                            const semesterSelect = document.getElementById('semester');
                            const yearSelect = document.getElementById('year');

                            // Reset semester dropdown to show all semesters
                            semesterSelect.innerHTML = '<option value="">Select semester</option>';
                            const allSemesterOptions = ['Spring', 'Summer', 'Fall', 'Winter'];

                            allSemesterOptions.forEach(semester => {
                                const option = document.createElement('option');
                                option.value = semester;
                                option.textContent = semester;
                                semesterSelect.appendChild(option);
                            });

                            // Reset year dropdown to show all years from 2021 to current+1
                            yearSelect.innerHTML = '<option value="">Select year</option>';
                            const currentYear = new Date().getFullYear();
                            const years = [];

                            for (let year = currentYear + 1; year >= 2021; year--) {
                                years.push(year.toString());
                            }

                            years.forEach(year => {
                                const option = document.createElement('option');
                                option.value = year;
                                option.textContent = year;
                                yearSelect.appendChild(option);
                            });

                        }

                        // Helper: Convert semester/year to UMD.io semester ID
                        function getSemesterId() {
                            const semester = document.getElementById('semester').value;
                            const year = document.getElementById('year').value;
                            if (!semester || !year) return '202501'; // Default to Spring 2025

                            const semesterMap = {
                                'Spring': '01',
                                'Summer': '05',
                                'Fall': '08',
                                'Winter': '12'
                            };
                            return `${year}${semesterMap[semester] || '01'}`;
                        }

                        // Helper: Reset dropdowns to show all options
                        function resetDropdowns() {
                            // Reset semester dropdown to show all options
                            const semesterSelect = document.getElementById('semester');
                            const semesterOptions = Array.from(semesterSelect.options);
                            semesterOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });

                            // Reset year dropdown to show all options
                            const yearSelect = document.getElementById('year');
                            const yearOptions = Array.from(yearSelect.options);
                            yearOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });
                        }

                        // Store course data globally
                        let currentCourseData = null;

                        // Fetch course data with comprehensive debugging
                        async function fetchCourseData() {
                            const courseCode = classCodeInput.value.trim().toUpperCase();

                            if (!courseCode) {
                                currentCourseData = null;
                                professorData = [];
                                updateProfessorSemesterInfo([]);
                                return;
                            }

                            // Get current filter values
                            const selectedSemester = document.getElementById('semester').value;
                            const selectedYear = document.getElementById('year').value;

                            // Build query parameters
                            let queryParams = '';
                            if (selectedSemester) {
                                queryParams += `&filter_semester=${encodeURIComponent(selectedSemester)}`;
                            }
                            if (selectedYear) {
                                queryParams += `&filter_year=${encodeURIComponent(selectedYear)}`;
                            }


                            try {
                                const response = await fetch(`/api/umd/course/${courseCode}?${queryParams}`);

                                if (response.ok) {
                                    currentCourseData = await response.json();

                                    // Update course info display
                                    if (currentCourseData.name && currentCourseData.name !== 'undefined' && currentCourseData.name !== courseCode) {
                                        courseInfo.innerHTML = `<strong>${currentCourseData.course_id || courseCode}:</strong> ${currentCourseData.name}`;
                                        courseInfo.style.color = '#10B981';
                                    } else {
                                        courseInfo.textContent = '';
                                    }

                                    // Update professor list and dropdowns
                                    await updateProfessorList();
                                } else {
                                    courseInfo.textContent = 'Could not verify course - you can still upload';
                                    courseInfo.style.color = '#9CA3AF';
                                    currentCourseData = null;
                                    professorData = [];
                                    updateProfessorSemesterInfo([]);
                                }
                            } catch (error) {
                                courseInfo.textContent = 'Could not verify course - you can still upload';
                                courseInfo.style.color = '#9CA3AF';
                                currentCourseData = null;
                                professorData = [];
                                updateProfessorSemesterInfo([]);
                            }
                        }

                        // Update professor list based on current selections
                        async function updateProfessorList() {
                            const selectedCourse = classCodeInput.value.trim();

                            if (!selectedCourse) {
                                professorData = [];
                                professorsDropdown.classList.remove('show');
                                professorInput.placeholder = 'Enter professor name';
                                document.getElementById('professorHelp').textContent = 'Enter course first to see professors';
                                document.getElementById('professorSemesterInfo').textContent = '';
                                // Update semester info (will clear dropdowns)
                                updateProfessorSemesterInfo([]);
                                return;
                            }

                            // Get current filter values
                            const selectedSemester = document.getElementById('semester').value;
                            const selectedYear = document.getElementById('year').value;

                            // Build query parameters
                            let queryParams = `course_id=${encodeURIComponent(selectedCourse)}`;
                            if (selectedSemester) {
                                queryParams += `&filter_semester=${encodeURIComponent(selectedSemester)}`;
                            }
                            if (selectedYear) {
                                queryParams += `&filter_year=${encodeURIComponent(selectedYear)}`;
                            }

                            try {

                                // Fetch professors from enhanced UMD.io API
                                const response = await fetch(`/api/umd/professors?${queryParams}`);

                                if (!response.ok) {
                                    throw new Error(`API returned ${response.status}`);
                                }

                                const professors = await response.json();

                                if (Array.isArray(professors) && professors.length > 0) {
                                    // New API returns objects with name and semesters array
                                    professorData = professors.filter(prof => prof.name && prof.name.trim());

                                    // Update UI
                                    professorInput.placeholder = `${professorData.length} professor${professorData.length !== 1 ? 's' : ''} taught ${selectedCourse}`;
                                    document.getElementById('professorHelp').textContent = `${professorData.length} professor${professorData.length !== 1 ? 's' : ''} available - click or type to search`;

                                    // Update semester info banner
                                    updateProfessorSemesterInfo(professorData);

                                } else {
                                    // No professors found for this course
                                    professorData = [];
                                    professorInput.placeholder = 'No professors found - enter manually';
                                    document.getElementById('professorHelp').textContent = 'No professors found in UMD database - you can type any name';
                                    document.getElementById('professorSemesterInfo').textContent = '';
                                    // Update semester info (will clear dropdowns)
                                    updateProfessorSemesterInfo([]);
                                }

                            } catch (error) {

                                // Fallback: Try to use existing course data if available
                                if (currentCourseData && currentCourseData.sections) {
                                    const professorSet = new Set();

                                    currentCourseData.sections.forEach(section => {
                                        if (section.instructors && section.instructors.length > 0) {
                                            section.instructors.forEach(instructor => {
                                                if (instructor && instructor.name && instructor.name.trim()) {
                                                    professorSet.add(instructor.name.trim());
                                                }
                                            });
                                        }
                                    });

                                    professorData = Array.from(professorSet).map(name => ({ name: name, semesters: [] }));

                                    if (professorData.length > 0) {
                                        professorInput.placeholder = `${professorData.length} professor${professorData.length !== 1 ? 's' : ''} taught ${selectedCourse} (fallback data)`;
                                        document.getElementById('professorHelp').textContent = `${professorData.length} professor${professorData.length !== 1 ? 's' : ''} available from course data`;
                                        document.getElementById('professorSemesterInfo').textContent = '';
                                        // Update semester info for fallback data
                                        updateProfessorSemesterInfo(professorData);
                                    } else {
                                        professorData = [];
                                        professorInput.placeholder = 'No professors found - enter manually';
                                        document.getElementById('professorHelp').textContent = 'No professors found - you can type any name';
                                        document.getElementById('professorSemesterInfo').textContent = '';
                                        // Update semester info (will clear dropdowns)
                                        updateProfessorSemesterInfo([]);
                                    }
                                } else {
                                    // No fallback data available
                                    professorData = [];
                                    professorInput.placeholder = 'Enter professor name';
                                    document.getElementById('professorHelp').textContent = 'Search unavailable - please enter professor name manually';
                                    document.getElementById('professorSemesterInfo').textContent = '';
                                    // Update semester info (will clear dropdowns)
                                    updateProfessorSemesterInfo([]);
                                }
                            }
                        }

                        // Update professor semester info banner
                        function updateProfessorSemesterInfo(professors) {
                            const semesterInfoEl = document.getElementById('professorSemesterInfo');
                            const semesterSelect = document.getElementById('semester');
                            const yearSelect = document.getElementById('year');

                            if (!professors || professors.length === 0) {
                                semesterInfoEl.textContent = '';
                                // Reset to default options
                                semesterSelect.innerHTML = `
                                    <option value="">Select semester</option>
                                    <option value="Fall">Fall</option>
                                    <option value="Spring">Spring</option>
                                    <option value="Summer">Summer</option>
                                    <option value="Winter">Winter</option>
                                `;
                                return;
                            }

                            // Collect all unique semesters/years
                            const allSemesters = new Set();
                            const allYears = new Set();
                            professors.forEach(prof => {
                                if (prof.semesters && prof.semesters.length > 0) {
                                    prof.semesters.forEach(sem => {
                                        allSemesters.add(sem.semester);
                                        allYears.add(sem.year);
                                    });
                                }
                            });

                            if (allSemesters.size > 0) {
                                const semesterList = Array.from(allSemesters).sort().join(', ');
                                const yearList = Array.from(allYears).sort((a, b) => b - a).join(', ');
                                semesterInfoEl.innerHTML = `<img src="/images/icons/calendar.png" alt="Calendar" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 10px;" /> Available semesters: ${semesterList} | Available years: ${yearList}`;
                                semesterInfoEl.style.color = '#6B7280';
                                semesterInfoEl.style.fontSize = '0.875rem';
                                semesterInfoEl.style.marginTop = '4px';

                                // Preserve existing semester selection if valid
                                const existingSemester = semesterSelect.value;

                                // Populate semester dropdown with all semesters (not just API data)
                                semesterSelect.innerHTML = '<option value="">Select semester</option>';
                                const allSemesterOptions = ['Spring', 'Summer', 'Fall', 'Winter'];

                                allSemesterOptions.forEach(semester => {
                                    const option = document.createElement('option');
                                    option.value = semester;
                                    option.textContent = semester;
                                    semesterSelect.appendChild(option);
                                });

                                // Restore existing semester selection if valid
                                if (existingSemester && ['Spring', 'Summer', 'Fall', 'Winter'].includes(existingSemester)) {
                                    semesterSelect.value = existingSemester;
                                }

                                // Preserve existing year selection if valid
                                const existingYear = yearSelect.value;

                                // Populate year dropdown with all years from 2021 to current+1 (not just API data)
                                yearSelect.innerHTML = '<option value="">Select year</option>';
                                const currentYear = new Date().getFullYear();
                                const years = [];

                                // Generate years from 2021 to current year + 1
                                for (let year = currentYear + 1; year >= 2021; year--) {
                                    years.push(year.toString());
                                }

                                years.forEach(year => {
                                    const option = document.createElement('option');
                                    option.value = year;
                                    option.textContent = year;
                                    yearSelect.appendChild(option);
                                });

                                // Restore existing year selection if valid
                                if (existingYear && parseInt(existingYear) >= 2021) {
                                    yearSelect.value = existingYear;
                                }

                                // Only set defaults when BOTH semester and year are empty (common sense approach)
                                const hasSemester = existingSemester && ['Spring', 'Summer', 'Fall', 'Winter'].includes(existingSemester);
                                const hasYear = existingYear && parseInt(existingYear) >= 2021;

                                if (!hasSemester && !hasYear) {
                                    // Both are empty - set only current year as default (no semester default)
                                    const currentYear = new Date().getFullYear();
                                    yearSelect.value = currentYear.toString();

                                    // Trigger API update with year default only
                                    setTimeout(() => {
                                        if (classCodeInput.value.trim()) {
                                            updateProfessorList();
                                        }
                                    }, 100);
                                }
                            } else {
                                semesterInfoEl.textContent = '';
                            }
                        }

                        // Update course list based on professor selection (reverse filtering)
                        async function updateCourseListForProfessor(professorName) {
                            if (!professorName || professorName.trim().length < 2) {
                                // Reset to normal course fetching
                                if (classCodeInput.value.trim()) {
                                    await fetchCourseData();
                                }
                                return;
                            }

                            // Get current filter values
                            const selectedSemester = document.getElementById('semester').value;
                            const selectedYear = document.getElementById('year').value;

                            // Build query parameters
                            let queryParams = `professor_name=${encodeURIComponent(professorName.trim())}`;
                            if (selectedSemester) {
                                queryParams += `&filter_semester=${encodeURIComponent(selectedSemester)}`;
                            }
                            if (selectedYear) {
                                queryParams += `&filter_year=${encodeURIComponent(selectedYear)}`;
                            }

                            try {

                                const response = await fetch(`/api/umd/professor-courses?${queryParams}`);

                                if (!response.ok) {
                                    throw new Error(`API returned ${response.status}`);
                                }

                                const courses = await response.json();

                                if (Array.isArray(courses) && courses.length > 0) {
                                    // Update course dropdown with professor's courses
                                    updateCourseDropdownForProfessor(courses, professorName);
                                } else {
                                    // No courses found for this professor
                                    resetCourseDropdown();
                                }

                            } catch (error) {
                                resetCourseDropdown();
                            }
                        }

                        // Update course dropdown to show only professor's courses
                        function updateCourseDropdownForProfessor(courses, professorName) {
                            const courseInfo = document.getElementById('courseInfo');

                            if (courses.length > 0) {
                                const courseList = courses.map(course => course.course_id).join(', ');
                                courseInfo.innerHTML = `<strong>Courses taught by ${professorName}:</strong> ${courseList}`;
                                courseInfo.style.color = '#3B82F6'; // Blue color for professor filtering

                                // Update course data for dropdown filtering
                                currentCourseData = {
                                    name: `Courses taught by ${professorName}`,
                                    professor_courses: courses
                                };
                            }
                        }

                        // Reset course dropdown to normal state
                        function resetCourseDropdown() {
                            const courseInfo = document.getElementById('courseInfo');
                            const selectedCourse = classCodeInput.value.trim();

                            if (selectedCourse) {
                                // Try to fetch normal course data
                                fetchCourseData();
                            } else {
                                courseInfo.textContent = '';
                                currentCourseData = null;
                            }
                        }

                        // Fetch professors based on course/semester/year (simple approach)
                        classCodeInput.addEventListener('change', async function () {
                            // Skip if we're selecting from dropdown
                            if (isSelectingFromDropdown) return;

                            await updateProfessorList();
                        });

                        // Fetch professors when semester changes
                        document.getElementById('semester').addEventListener('change', async function () {
                            const selectedCourse = classCodeInput.value.trim();
                            if (selectedCourse) {
                                await updateProfessorList();
                            }
                        });

                        // Fetch professors when year changes
                        document.getElementById('year').addEventListener('change', async function () {
                            const selectedCourse = classCodeInput.value.trim();
                            if (selectedCourse) {
                                await updateProfessorList();
                            }
                        });

                        // Initialize professor list on page load if course is already entered
                        setTimeout(async function() {
                            const selectedCourse = classCodeInput.value.trim();
                            if (selectedCourse) {
                                await updateProfessorList();
                            }
                        }, 100);

                        // Helper: Reset dropdowns to show all options
                        function resetDropdowns() {
                            // Reset semester dropdown to show all options
                            const semesterSelect = document.getElementById('semester');
                            const semesterOptions = Array.from(semesterSelect.options);
                            semesterOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });

                            // Reset year dropdown to show all options
                            const yearSelect = document.getElementById('year');
                            const yearOptions = Array.from(yearSelect.options);
                            yearOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });
                        }

                        // Validate semester/year selection (prevent future semesters)
                        function validateSemesterYear() {
                            const semester = document.getElementById('semester').value;
                            const year = parseInt(document.getElementById('year').value);
                            if (!semester || !year) return true;

                            const now = new Date();
                            const currentYear = now.getFullYear();
                            const currentMonth = now.getMonth() + 1; // 1-12

                            // Determine current semester
                            let currentSemester;
                            if (currentMonth >= 1 && currentMonth <= 5) currentSemester = 'Spring';
                            else if (currentMonth >= 6 && currentMonth <= 7) currentSemester = 'Summer';
                            else if (currentMonth >= 8 && currentMonth <= 12) currentSemester = 'Fall';

                            const semesterOrder = { 'Spring': 1, 'Summer': 2, 'Fall': 3, 'Winter': 4 };

                            // Check if future semester
                            if (year > currentYear) {
                                const notification = document.createElement('div');
                                notification.style.cssText = `
                                    position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                    padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                    font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                                `;
                                notification.textContent = 'Cannot select future years';
                                document.body.appendChild(notification);
                                setTimeout(() => notification.remove(), 3000);
                                document.getElementById('year').value = '';
                                return false;
                            }

                            if (year === currentYear && semesterOrder[semester] > semesterOrder[currentSemester]) {
                                const notification = document.createElement('div');
                                notification.style.cssText = `
                                    position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                    padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                    font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                                `;
                                notification.textContent = `Cannot select future semesters (currently ${currentSemester} ${currentYear})`;
                                document.body.appendChild(notification);
                                setTimeout(() => notification.remove(), 3000);
                                document.getElementById('semester').value = '';
                                return false;
                            }

                            return true;
                        }

                        // Re-fetch professors when semester or year changes
                        const semesterInput = document.getElementById('semester');
                        const yearInput = document.getElementById('year');

                        if (semesterInput) {
                            semesterInput.addEventListener('change', async function () {
                                if (validateSemesterYear() && classCodeInput.value.trim()) {
                                    await updateProfessorList(); // Update professor list with new semester filter
                                }
                            });
                        }

                        if (yearInput) {
                            yearInput.addEventListener('change', async function () {
                                if (validateSemesterYear() && classCodeInput.value.trim()) {
                                    await updateProfessorList(); // Update professor list with new year filter
                                }
                            });
                        }
                    }

                    // Initialize drag-and-drop upload
                    initDragAndDrop();

                    // Initialize Floating Action Button
                    initFAB();
                });

                // Drag and Drop Upload Functionality
                function initDragAndDrop() {
                    const dropZone = document.getElementById('dropZone');
                    const fileInput = document.getElementById('documents');
                    const selectedFilesContainer = document.getElementById('selectedFiles');

                    if (!dropZone || !fileInput) return;

                    // Click to browse
                    dropZone.addEventListener('click', () => {
                        fileInput.click();
                    });

                    // Prevent default drag behaviors
                    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                        dropZone.addEventListener(eventName, preventDefaults, false);
                        document.body.addEventListener(eventName, preventDefaults, false);
                    });

                    // Highlight drop zone when dragging over
                    ['dragenter', 'dragover'].forEach(eventName => {
                        dropZone.addEventListener(eventName, () => {
                            dropZone.classList.add('drag-over');
                        }, false);
                    });

                    ['dragleave', 'drop'].forEach(eventName => {
                        dropZone.addEventListener(eventName, () => {
                            dropZone.classList.remove('drag-over');
                        }, false);
                    });

                    // Handle dropped files
                    dropZone.addEventListener('drop', (e) => {
                        const dt = e.dataTransfer;
                        const files = dt.files;
                        fileInput.files = files;
                        displaySelectedFiles(files);
                    });

                    // Handle selected files via click
                    fileInput.addEventListener('change', (e) => {
                        displaySelectedFiles(e.target.files);
                    });

                    function preventDefaults(e) {
                        e.preventDefault();
                        e.stopPropagation();
                    }

                    function displaySelectedFiles(files) {
                        if (!files || files.length === 0) {
                            selectedFilesContainer.innerHTML = '';
                            return;
                        }

                        let totalSize = 0;
                        let html = '<div class="selected-files-header">Selected Files:</div>';

                        Array.from(files).forEach((file, index) => {
                            const size = (file.size / 1024).toFixed(1);
                            totalSize += file.size;
                            const icon = getFileIcon(file.name);

                            html += `
                        <div class="file-item">
                            <div class="file-item-info">
                                <span class="file-item-icon">${icon}</span>
                                <span class="file-item-name">${escapeHtml(file.name)}</span>
                            </div>
                            <span class="file-item-size">${size} KB</span>
                        </div>
                    `;
                        });

                        const totalSizeMB = (totalSize / (1024 * 1024)).toFixed(2);
                        html += `<div class="files-summary">Total: ${files.length} file(s) · ${totalSizeMB} MB</div>`;

                        selectedFilesContainer.innerHTML = html;
                    }

                    // Use the main dynamic getFileIcon function
                    // (Function is defined globally above)
                }

                // Floating Action Button functionality
                function initFAB() {
                    const fab = document.getElementById('fabUpload');
                    const uploadSection = document.querySelector('.upload-section');

                    if (!fab || !uploadSection) return;

                    // Smooth scroll to upload section
                    fab.addEventListener('click', () => {
                        uploadSection.scrollIntoView({ behavior: 'smooth', block: 'start' });

                        // Optional: Focus on the drop zone after scrolling
                        setTimeout(() => {
                            const dropZone = document.getElementById('dropZone');
                            if (dropZone) {
                                dropZone.style.animation = 'pulse 0.5s ease-in-out';
                                setTimeout(() => {
                                    dropZone.style.animation = '';
                                }, 500);
                            }
                        }, 500);
                    });

                    // Hide FAB when upload section is visible
                    const observer = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                fab.style.opacity = '0';
                                fab.style.pointerEvents = 'none';
                            } else {
                                fab.style.opacity = '1';
                                fab.style.pointerEvents = 'all';
                            }
                        });
                    }, { threshold: 0.1 });

                    observer.observe(uploadSection);
                }

                // Initialize button text on page load
                document.addEventListener('DOMContentLoaded', function() {
                    // Set initial button text based on current state
                    updateExpandCollapseButtonText();
                });

                // Initialize bulk actions
                function initializeBulkActions() {
                    const bulkActions = document.getElementById('bulkActions');
                    if (bulkActions) {
                        // Show bulk actions in all views
                        bulkActions.style.display = 'flex';
                    }

                    // Initialize selected count
                    updateSelectedCount();
                }

                // Filename truncation helper function
                function truncateFilename(filename, maxLength = 20, shouldTruncate = true) {
                    if (!shouldTruncate || filename.length <= maxLength) {
                        return `<span class="filename-truncated" title="${escapeHtml(filename)}">${escapeHtml(filename)}</span>`;
                    } else {
                        const truncated = filename.substring(0, maxLength) + '...';
                        return `<span class="filename-truncated" title="${escapeHtml(filename)}">${escapeHtml(truncated)}</span>`;
                    }
                }

                // Bulk Delete Functions
                function resetAllSelections() {
                    console.log('Resetting all selections due to view switch');

                    // Uncheck all checkboxes across all views
                    const allCheckboxes = document.querySelectorAll('.file-select-checkbox');
                    allCheckboxes.forEach(checkbox => {
                        checkbox.checked = false;
                    });

                    // Reset the select all button text
                    const selectAllBtn = document.getElementById('selectAllBtn');
                    if (selectAllBtn) {
                        selectAllBtn.textContent = 'Select All';
                    }

                    // Update the selected count to 0
                    const selectedCountSpan = document.getElementById('selectedCount');
                    if (selectedCountSpan) {
                        selectedCountSpan.textContent = '0';
                    }

                    // Disable the bulk delete button
                    const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
                    if (bulkDeleteBtn) {
                        bulkDeleteBtn.disabled = true;
                        bulkDeleteBtn.style.opacity = '0.5';
                    }

                    console.log('All selections reset');
                }

                function toggleSelectAll() {
                    console.log('toggleSelectAll called');

                    // Only work with checkboxes from the currently visible view
                    let checkboxes;
                    const gridView = document.getElementById('gridView');
                    const groupedView = document.getElementById('groupedView');
                    const listView = document.getElementById('listView');

                    if (gridView && gridView.style.display !== 'none') {
                        checkboxes = gridView.querySelectorAll('.file-select-checkbox');
                        console.log('Working with Grid view checkboxes:', checkboxes.length);
                    } else if (groupedView && groupedView.style.display !== 'none') {
                        checkboxes = groupedView.querySelectorAll('.file-select-checkbox');
                        console.log('Working with Grouped view checkboxes:', checkboxes.length);
                    } else if (listView && listView.style.display !== 'none') {
                        checkboxes = listView.querySelectorAll('.file-select-checkbox');
                        console.log('Working with List view checkboxes:', checkboxes.length);
                    } else {
                        // Fallback to all checkboxes if no view is clearly visible
                        checkboxes = document.querySelectorAll('.file-select-checkbox');
                        console.log('Fallback: Working with all checkboxes:', checkboxes.length);
                    }

                    const selectAllBtn = document.getElementById('selectAllBtn');
                    const allChecked = Array.from(checkboxes).every(cb => cb.checked);

                    checkboxes.forEach(checkbox => {
                        checkbox.checked = !allChecked;
                    });

                    selectAllBtn.textContent = allChecked ? 'Select All' : 'Deselect All';
                    updateSelectedCount();
                }

                function updateSelectedCount() {
                    // Only count checkboxes from the currently visible view
                    let checkboxes;
                    const gridView = document.getElementById('gridView');
                    const groupedView = document.getElementById('groupedView');
                    const listView = document.getElementById('listView');

                    if (gridView && gridView.style.display !== 'none') {
                        checkboxes = gridView.querySelectorAll('.file-select-checkbox');
                    } else if (groupedView && groupedView.style.display !== 'none') {
                        checkboxes = groupedView.querySelectorAll('.file-select-checkbox');
                    } else if (listView && listView.style.display !== 'none') {
                        checkboxes = listView.querySelectorAll('.file-select-checkbox');
                    } else {
                        // Fallback to all checkboxes if no view is clearly visible
                        checkboxes = document.querySelectorAll('.file-select-checkbox');
                    }

                    console.log('Found checkboxes in active view:', checkboxes.length);
                    const selectedCount = Array.from(checkboxes).filter(cb => cb.checked).length;
                    const selectedCountSpan = document.getElementById('selectedCount');
                    const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
                    const selectAllBtn = document.getElementById('selectAllBtn');

                    console.log('Selected count:', selectedCount);

                    selectedCountSpan.textContent = selectedCount;

                    // Enable/disable bulk delete button
                    if (selectedCount > 0) {
                        bulkDeleteBtn.disabled = false;
                        bulkDeleteBtn.style.opacity = '1';
                        bulkDeleteBtn.style.cursor = 'pointer';
                    } else {
                        bulkDeleteBtn.disabled = true;
                        bulkDeleteBtn.style.opacity = '0.5';
                        bulkDeleteBtn.style.cursor = 'not-allowed';
                    }

                    // Update select all button text
                    const allChecked = Array.from(checkboxes).every(cb => cb.checked);
                    const someChecked = Array.from(checkboxes).some(cb => cb.checked);

                    if (allChecked && checkboxes.length > 0) {
                        selectAllBtn.textContent = 'Deselect All';
                    } else if (someChecked) {
                        selectAllBtn.textContent = 'Select All';
                    } else {
                        selectAllBtn.textContent = 'Select All';
                    }
                }

                // Clear all filters
                function clearAllFilters() {
                    try {
                        // Clear search input
                        const searchInput = document.getElementById('searchInput');
                        if (searchInput) searchInput.value = '';

                        // Clear sort filter
                        const sortFilter = document.getElementById('sortFilter');
                        if (sortFilter) sortFilter.value = 'newest';

                        // Clear my files toggle
                        const myFilesToggle = document.getElementById('myFilesToggle');
                        if (myFilesToggle) myFilesToggle.checked = false;

                        // Clear all dropdown filters
                        const dropdowns = ['category', 'semester', 'year', 'major', 'class'];
                        dropdowns.forEach(dropdown => {
                            const checkboxes = document.querySelectorAll(`#${dropdown}Dropdown input[type="checkbox"]:checked`);
                            checkboxes.forEach(cb => cb.checked = false);
                            updateMultiSelect(dropdown);
                        });

                        // Clear professor filters
                        const professorCheckboxes = document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked');
                        professorCheckboxes.forEach(cb => cb.checked = false);
                        updateMultiSelect('professor');

                        // Reapply filters
                        applyFilters();

                        console.log('All filters cleared');
                    } catch (error) {
                        console.error('Error clearing filters:', error);
                    }
                }

                // Apply filters to the current view
                function applyFilters() {
                    try {
                        console.log('applyFilters called, current view:', currentView);

                        // Get filter values
                        const searchTerm = document.getElementById('searchInput')?.value.toLowerCase() || '';
                        const sortBy = document.getElementById('sortFilter')?.value || 'newest';
                        const myFilesOnly = document.getElementById('myFilesToggle')?.checked || false;

                        // Get selected filter values
                        const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked'))
                            .map(cb => cb.value);
                        const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                            .map(cb => cb.value);
                        const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                            .map(cb => cb.value);
                        const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                            .map(cb => cb.value);
                        const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                            .map(cb => cb.value);
                        const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                            .map(cb => cb.value);

                        console.log('Filter values:', {
                            searchTerm, sortBy, myFilesOnly,
                            categories: selectedCategories.length,
                            semesters: selectedSemesters.length,
                            years: selectedYears.length,
                            majors: selectedMajors.length,
                            classes: selectedClasses.length,
                            professors: selectedProfessors.length
                        });

                        // Filter files based on current view
                        if (currentView === 'grouped') {
                            renderGroupedView();
                        } else if (currentView === 'grid') {
                            renderGridView();
                        } else if (currentView === 'list') {
                            renderListView();
                        }

                        // Update active filters display
                        updateActiveFilters();

                        console.log('applyFilters completed successfully');
                    } catch (error) {
                        console.error('Error in applyFilters:', error);
                    }
                }

                // Render grid view with filtered files
                function renderGridView() {
                    try {
                        const gridView = document.getElementById('gridView');
                        if (!gridView) {
                            console.error('Grid view element not found');
                            return;
                        }

                        // Get filtered files
                        const filteredFiles = getFilteredFiles();

                        if (!filteredFiles || filteredFiles.length === 0) {
                            gridView.innerHTML = '<div style="text-align: center; padding: 2rem; color: #6B7280;">No files found</div>';
                            return;
                        }

                        // Sort files
                        const sortedFiles = sortFiles(filteredFiles);

                        // Generate grid view HTML
                        const gridHTML = sortedFiles.map(file => createGridViewItem(file)).join('');
                        gridView.innerHTML = gridHTML;

                        console.log('Rendered grid view with', sortedFiles.length, 'files');
                    } catch (error) {
                        console.error('Error rendering grid view:', error);
                        gridView.innerHTML = '<div style="text-align: center; padding: 2rem; color: #EF4444;">Error loading files</div>';
                    }
                }

                // Create a grid view item from file data
                function createGridViewItem(file) {
                    const isNew = isFileNew(file.uploadDate);

                    return `
                        <div class="file-card animate-fade-in"
                             data-class="${escapeHtml(file.classCode || '')}"
                             data-major="${escapeHtml(file.major || '')}"
                             data-semester="${escapeHtml(file.semester || '')}"
                             data-year="${escapeHtml(file.year || '')}"
                             data-category="${escapeHtml((file.category || '').toLowerCase())}"
                             data-professor="${escapeHtml((file.professor || '').toLowerCase())}"
                             data-uploader="${escapeHtml(file.uploadedBy)}"
                             data-name="${escapeHtml(file.originalName.toLowerCase())}"
                             data-date="${new Date(file.uploadDate).getTime()}"
                             data-downloads="${file.downloadCount || 0}"
                             data-size="${file.size || 0}">
                            <div class="file-header" style="position: relative; display: flex; align-items: center; justify-content: center; gap: 0.75rem; margin-bottom: 1rem;">
                                <!-- Bulk select checkbox -->
                                <div style="position: absolute; top: 0.5rem; left: 0.5rem; z-index: 20; background: rgba(255,255,255,0.9); padding: 2px; border-radius: 4px; border: 1px solid #D1D5DB;">
                                    <input type="checkbox" class="file-select-checkbox" data-filename="${file.filename}"
                                        style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--umd-red); transform: scale(1.2);"
                                        onchange="updateSelectedCount()" />
                                </div>
                                <div style="position: absolute; top: 0.5rem; right: 0.5rem; background: #FEF3C7; color: #92400E; padding: 2px 6px; border-radius: 4px; font-size: 0.7rem; font-weight: 600; cursor: help; z-index: 10;" title="${file.downloadCount || 0} downloads">
                                    ${file.downloadCount || 0}
                                </div>
                                <div class="file-icon">${getFileIcon(file.originalName)}</div>
                                <div class="file-info">
                                    <h3 style="margin: 0 0 0.1rem 0; font-size: 1rem;">${truncateFilename(file.originalName, 15)}</h3>
                                </div>
                            </div>
                            <div class="file-meta" style="margin-top: 0.1rem;">
                                <div class="tags-section" style="display: flex; flex-wrap: wrap; gap: 0.3rem; margin-bottom: 0.5rem;">
                                    ${generateStatusBadges(file, isNew)}
                                </div>

                                ${file.major ? `<div class="file-meta-item"><strong>Major:</strong> <span class="major-badge">${escapeHtml(file.major)}</span></div>` : ''}
                                ${file.classCode ? `<div class="file-meta-item"><strong>Class:</strong> <span class="class-code-badge">${escapeHtml(file.classCode)}</span></div>` : ''}
                                ${file.professor ? `<div class="file-meta-item"><strong>Professor:</strong> ${escapeHtml(file.professor)}</div>` : ''}
                                ${file.semester && file.year ? `<div class="file-meta-item"><strong>Term:</strong> ${file.semester} ${file.year}</div>` : ''}
                                <div class="file-meta-item"><strong>Uploaded by:</strong> ${escapeHtml(file.uploadedBy)}</div>
                                ${file.description ? `<div class="file-meta-item"><strong>Description:</strong> ${escapeHtml(file.description)}</div>` : ''}
                                <div class="file-meta-item"><strong>Size:</strong> ${formatFileSize(file.size || 0)}</div>
                            </div>
                            <div class="file-actions" style="display: flex; gap: 0.5rem; flex-wrap: wrap; justify-content: center;">
                                <a href="/download/${encodeURIComponent(file.filename)}" class="button download" target="_blank">Download</a>
                                ${getEditButton(file)}
                                ${getDeleteButton(file)}
                                <button class="button secondary small report-btn" data-filename="${file.filename}" data-original-name="${escapeHtml(file.originalName)}">🚩 Report</button>
                            </div>
                        </div>
                    `;
                }

                // Render list view with filtered files
                function renderListView() {
                    try {
                        const listView = document.getElementById('listView');
                        if (!listView) {
                            console.error('List view element not found');
                            return;
                        }

                        // Get filtered files
                        const filteredFiles = getFilteredFiles();

                        if (!filteredFiles || filteredFiles.length === 0) {
                            listView.innerHTML = '<div style="text-align: center; padding: 2rem; color: #6B7280;">No files found</div>';
                            return;
                        }

                        // Sort files
                        const sortedFiles = sortFiles(filteredFiles);

                        // Generate list view HTML
                        const listHTML = sortedFiles.map(file => createListViewItem(file)).join('');
                        listView.innerHTML = listHTML;

                        console.log('Rendered list view with', sortedFiles.length, 'files');
                    } catch (error) {
                        console.error('Error rendering list view:', error);
                        listView.innerHTML = '<div style="text-align: center; padding: 2rem; color: #EF4444;">Error loading files</div>';
                    }
                }

                // Create a list view item from file data
                function createListViewItem(file) {
                    const isNew = isFileNew(file.uploadDate);

                    return `
                        <div class="file-list-item"
                             data-class="${escapeHtml(file.classCode || '')}"
                             data-major="${escapeHtml(file.major || '')}"
                             data-semester="${escapeHtml(file.semester || '')}"
                             data-year="${escapeHtml(file.year || '')}"
                             data-category="${escapeHtml((file.category || '').toLowerCase())}"
                             data-professor="${escapeHtml((file.professor || '').toLowerCase())}"
                             data-uploader="${escapeHtml(file.uploadedBy)}"
                             data-name="${escapeHtml(file.originalName.toLowerCase())}"
                             data-date="${new Date(file.uploadDate).getTime()}"
                             data-downloads="${file.downloadCount || 0}"
                             data-size="${file.size || 0}"
                             style="display: flex; align-items: center; padding: 1rem; border: 1px solid #E5E7EB; border-radius: 8px; margin-bottom: 0.5rem; background: white; transition: all 0.2s;">

                            <!-- Checkbox -->
                            <div style="margin-right: 1rem;">
                                <input type="checkbox" class="file-select-checkbox" data-filename="${file.filename}"
                                    style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--umd-red);"
                                    onchange="updateSelectedCount()" />
                            </div>

                            <!-- File Icon -->
                            <div style="margin-right: 1rem; flex-shrink: 0;">
                                ${getFileIcon(file.originalName)}
                            </div>

                            <!-- File Info -->
                            <div style="flex: 1; min-width: 0;">
                                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
                                    <h3 style="margin: 0; font-size: 1rem; color: #374151; flex: 1; min-width: 0;">
                                        <span class="filename-truncated" title="${escapeHtml(file.originalName)}">${truncateFilename(file.originalName, 25)}</span>
                                    </h3>
                                    <div style="display: flex; gap: 0.25rem; flex-shrink: 0;">
                                        ${generateStatusBadges(file, isNew)}
                                    </div>
                                </div>

                                <div style="display: flex; flex-wrap: wrap; gap: 0.5rem; font-size: 0.875rem; color: #6B7280; margin-bottom: 0.5rem;">
                                    ${file.major ? `<span style="background: #E0E7FF; color: #4338CA; padding: 2px 6px; border-radius: 4px; font-size: 0.75rem;">${escapeHtml(file.major)}</span>` : ''}
                                    ${file.classCode ? `<span style="background: #FEE2E2; color: #DC2626; padding: 2px 6px; border-radius: 4px; font-size: 0.75rem;">${escapeHtml(file.classCode)}</span>` : ''}
                                    ${file.professor ? `<span>Prof: ${escapeHtml(file.professor)}</span>` : ''}
                                    ${file.semester && file.year ? `<span>${file.semester} ${file.year}</span>` : ''}
                                    <span>${formatFileSize(file.size || 0)}</span>
                                    <span style="background: #FEF3C7; color: #D97706; padding: 2px 6px; border-radius: 4px; font-size: 0.75rem;">📥 ${file.downloadCount || 0} downloads</span>
                                </div>

                                ${file.description ? `<div style="font-size: 0.875rem; color: #374151; font-style: italic; margin-top: 0.25rem;">${escapeHtml(file.description)}</div>` : ''}
                            </div>

                            <!-- Actions -->
                            <div style="display: flex; gap: 0.5rem; flex-shrink: 0;">
                                <a href="/download/${encodeURIComponent(file.filename)}" class="button download" target="_blank" style="padding: 0.5rem 1rem; font-size: 0.875rem;">Download</a>
                                ${getEditButton(file)}
                                ${getDeleteButton(file)}
                                <button class="button secondary small report-btn" data-filename="${file.filename}" data-original-name="${escapeHtml(file.originalName)}" style="padding: 0.5rem 1rem; font-size: 0.875rem;">🚩 Report</button>
                            </div>
                        </div>
                    `;
                }

                // Get filtered files based on current filters
                function getFilteredFiles() {
                    const searchTerm = document.getElementById('searchInput')?.value.toLowerCase() || '';
                    const sortBy = document.getElementById('sortFilter')?.value || 'newest';
                    const myFilesOnly = document.getElementById('myFilesToggle')?.checked || false;

                    // Get selected filter values
                    const selectedCategories = Array.from(document.querySelectorAll('#categoryDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedMajors = Array.from(document.querySelectorAll('#majorDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedClasses = Array.from(document.querySelectorAll('#classDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedProfessors = Array.from(document.querySelectorAll('#professorDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);

                    return allFilesData.filter(file => {
                        // Search term filter
                        if (searchTerm && !file.originalName.toLowerCase().includes(searchTerm) &&
                            !(file.description && file.description.toLowerCase().includes(searchTerm))) {
                            return false;
                        }

                        // My files filter
                        const currentUserId = '<%= user.userid %>';
                        if (myFilesOnly && file.uploadedBy !== currentUserId) {
                            return false;
                        }

                        // Category filter (case insensitive)
                        if (selectedCategories.length > 0) {
                            if (!file.category || !selectedCategories.some(selectedCat =>
                                file.category.toLowerCase() === selectedCat.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        // Semester filter (case insensitive)
                        if (selectedSemesters.length > 0) {
                            if (!file.semester || !selectedSemesters.some(selectedSem =>
                                file.semester.toLowerCase() === selectedSem.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        // Year filter (case insensitive)
                        if (selectedYears.length > 0) {
                            if (!file.year || !selectedYears.some(selectedYear =>
                                file.year.toLowerCase() === selectedYear.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        // Major filter (case insensitive)
                        if (selectedMajors.length > 0) {
                            if (!file.major || !selectedMajors.some(selectedMajor =>
                                file.major.toLowerCase() === selectedMajor.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        // Class filter (case insensitive)
                        if (selectedClasses.length > 0) {
                            if (!file.classCode || !selectedClasses.some(selectedClass =>
                                file.classCode.toLowerCase() === selectedClass.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        // Professor filter (case insensitive)
                        if (selectedProfessors.length > 0) {
                            if (!file.professor || !selectedProfessors.some(selectedProf =>
                                file.professor.toLowerCase() === selectedProf.toLowerCase()
                            )) {
                                return false;
                            }
                        }

                        return true;
                    });
                }

                // Sort files based on current sort option
                function sortFiles(files) {
                    const sortBy = document.getElementById('sortFilter')?.value || 'newest';

                    return files.sort((a, b) => {
                        switch (sortBy) {
                            case 'newest':
                                return new Date(b.uploadDate) - new Date(a.uploadDate);
                            case 'oldest':
                                return new Date(a.uploadDate) - new Date(b.uploadDate);
                            case 'popular':
                                return (b.downloadCount || 0) - (a.downloadCount || 0);
                            case 'name':
                                return a.originalName.localeCompare(b.originalName);
                            case 'size-desc':
                                return (b.size || 0) - (a.size || 0);
                            case 'size-asc':
                                return (a.size || 0) - (b.size || 0);
                            default:
                                return new Date(b.uploadDate) - new Date(a.uploadDate);
                        }
                    });
                }


                async function bulkDeleteFiles() {
                    // Only work with checkboxes from the currently visible view
                    let checkboxes;
                    const gridView = document.getElementById('gridView');
                    const groupedView = document.getElementById('groupedView');
                    const listView = document.getElementById('listView');

                    if (gridView && gridView.style.display !== 'none') {
                        checkboxes = gridView.querySelectorAll('.file-select-checkbox:checked');
                    } else if (groupedView && groupedView.style.display !== 'none') {
                        checkboxes = groupedView.querySelectorAll('.file-select-checkbox:checked');
                    } else if (listView && listView.style.display !== 'none') {
                        checkboxes = listView.querySelectorAll('.file-select-checkbox:checked');
                    } else {
                        // Fallback to all checkboxes if no view is clearly visible
                        checkboxes = document.querySelectorAll('.file-select-checkbox:checked');
                    }

                    const selectedFiles = Array.from(checkboxes).map(cb => cb.dataset.filename);

                    if (selectedFiles.length === 0) {
                        showNotification('Please select files to delete.');
                        return;
                    }

                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';

                    // Check if user can delete files
                    if (userRole === 'viewer') {
                        showNotification('You are in view-only mode and cannot delete files.');
                        return;
                    }

                    // Get file details for confirmation
                    const fileDetails = selectedFiles.map(filename => {
                        const fileCard = document.querySelector(`[data-filename="${filename}"]`)?.closest('.file-card');
                        const fileName = fileCard?.querySelector('h3')?.textContent || filename;
                        const uploader = fileCard?.dataset.uploader;

                        // Check if user can delete this specific file
                        if (userRole !== 'admin' && uploader !== userId) {
                            return { filename, fileName, canDelete: false };
                        }
                        return { filename, fileName, canDelete: true };
                    });

                    const deletableFiles = fileDetails.filter(f => f.canDelete);
                    const nonDeletableFiles = fileDetails.filter(f => !f.canDelete);

                    if (deletableFiles.length === 0) {
                        showNotification('You do not have permission to delete any of the selected files.');
                        return;
                    }

                    let confirmMessage = `Are you sure you want to delete ${deletableFiles.length} file(s)?\n\n`;
                    confirmMessage += `Files to delete:\n${deletableFiles.map(f => `• ${f.fileName}`).join('\n')}`;

                    if (nonDeletableFiles.length > 0) {
                        confirmMessage += `\n\nNote: ${nonDeletableFiles.length} file(s) will be skipped (you don't have permission to delete them):\n${nonDeletableFiles.map(f => `• ${f.fileName}`).join('\n')}`;
                    }

                    if (!confirm(confirmMessage)) {
                        return;
                    }

                    // Use bulk delete endpoint for better performance
                    try {
                        const response = await fetch('/api/bulk-delete', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                filenames: deletableFiles.map(f => f.filename)
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            // Show success notification
                            if (result.summary.success > 0 && result.summary.failed === 0 && result.summary.skipped === 0) {
                                showNotification(`Successfully deleted ${result.summary.success} file${result.summary.success > 1 ? 's' : ''}!`, 'success', 4000);
                            } else if (result.summary.success > 0) {
                                // Mixed results - show detailed message
                                let message = `Deleted ${result.summary.success} file${result.summary.success > 1 ? 's' : ''}`;
                                if (result.summary.failed > 0) message += `, ${result.summary.failed} failed`;
                                if (result.summary.skipped > 0) message += `, ${result.summary.skipped} skipped`;
                                showNotification(message, 'error', 5000);
                            } else {
                                showNotification('No files were deleted', 'error', 4000);
                            }
                        } else {
                            showNotification(`Bulk delete failed: ${result.error}`, 'error', 5000);
                        }

                        // Reload page to show updated file list
                        window.location.reload();

                    } catch (error) {
                        alert(`Bulk delete failed: ${error.message}`);
                    }
                }

                // Debug: Confirm functions are loaded
                console.log('Dashboard JavaScript loaded successfully');
                console.log('switchView function available:', typeof switchView);
            </script>

            <%- include('partials/footer') %>
</body>

</html>
