<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard - Terp Notes</title>
    <link rel="stylesheet" href="/styles/main.css" />
</head>

<body>
    <header class="topbar">
        <h2>Terp Notes</h2>
        <div class="user-info">
            Welcome, <strong>
                <%= firstname %>
            </strong>
            <span class="user-role role-<%= user.role %>">
                <%= user.role %>
            </span>
            <% if (user.role==='admin' ) { %>
                | <a href="/admin" class="logout-btn">Admin Panel</a>
                <% } %>
                    | <a href="/profile" class="logout-btn">My Profile</a>
                    | <a href="/logout" class="logout-btn">Logout</a>
        </div>
    </header>

    <main class="container">
        <!-- Announcements Section -->
        <% if (announcements && announcements.length> 0) { %>
            <% announcements.forEach(announcement=> { %>
                <div class="announcement-banner announcement-banner-<%= announcement.type %>">
                    <div style="flex: 1; font-weight: 600;">
                        <%= announcement.message %>
                    </div>
                </div>
                <% }); %>
                    <% } %>

                        <div class="dashboard-controls">
                            <div class="search-bar">
                                <input type="text" id="searchInput" placeholder="Search notes..." />
                                <button type="button" onclick="applyFilters()">Search</button>
                            </div>
                            <div
                                style="display: flex; justify-content: space-between; align-items: center; margin: 0.5rem 0; flex-wrap: wrap; gap: 1rem;">
                                <p style="color: #6B7280; font-size: 0.875rem; margin: 0;">
                                    üí° <strong>Tip:</strong> Click Year or Semester filters to select multiple options
                                </p>
                                <div style="display: flex; align-items: center; gap: 1rem;">
                                    <!-- View Toggle -->
                                    <div
                                        style="display: flex; gap: 0.5rem; background: #F3F4F6; padding: 4px; border-radius: 8px;">
                                        <button id="gridViewBtn" onclick="switchView('grid')"
                                            style="padding: 6px 12px; border: none; background: var(--umd-red); color: white; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            üìä Grid
                                        </button>
                                        <button id="groupedViewBtn" onclick="switchView('grouped')"
                                            style="padding: 6px 12px; border: none; background: transparent; color: #6B7280; border-radius: 6px; cursor: pointer; font-size: 0.875rem; font-weight: 600; transition: all 0.2s;">
                                            üìÅ Grouped
                                        </button>
                                    </div>
                                    <label
                                        style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer; font-size: 0.875rem; color: var(--umd-red); font-weight: 600;">
                                        <input type="checkbox" id="myFilesToggle" onchange="applyFilters()"
                                            style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--umd-red);">
                                        <span>üìÅ Show Only My Files</span>
                                    </label>
                                </div>
                            </div>

                            <div class="filter-controls">
                                <select id="majorFilter" class="filter-select" onchange="handleMajorChange()">
                                    <option value="">All Majors</option>
                                    <% majors.forEach(major=> { %>
                                        <option value="<%= major %>">
                                            <%= major %>
                                        </option>
                                        <% }); %>
                                </select>

                                <select id="classFilter" class="filter-select" onchange="handleClassChange()">
                                    <option value="">All Classes</option>
                                    <% classCodes.forEach(code=> { %>
                                        <option value="<%= code %>"
                                            data-major="<%= code.replace(/[0-9]/g, '').trim() %>">
                                            <%= code %>
                                        </option>
                                        <% }); %>
                                </select>

                                <!-- Year Multi-Select Dropdown -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="yearBtn"
                                        onclick="toggleDropdown('year')">
                                        <span id="yearLabel">All Years</span>
                                        <span class="dropdown-arrow">‚ñº</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="yearDropdown">
                                        <% years.forEach(year=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= year %>"
                                                    onchange="updateMultiSelect('year')">
                                                <span>
                                                    <%= year %>
                                                </span>
                                            </label>
                                            <% }); %>
                                    </div>
                                </div>

                                <!-- Semester Multi-Select Dropdown -->
                                <div class="multi-select-wrapper">
                                    <button type="button" class="multi-select-btn" id="semesterBtn"
                                        onclick="toggleDropdown('semester')">
                                        <span id="semesterLabel">All Semesters</span>
                                        <span class="dropdown-arrow">‚ñº</span>
                                    </button>
                                    <div class="multi-select-dropdown" id="semesterDropdown">
                                        <% semesters.forEach(semester=> { %>
                                            <label class="multi-select-option">
                                                <input type="checkbox" value="<%= semester %>"
                                                    onchange="updateMultiSelect('semester')">
                                                <span>
                                                    <%= semester %>
                                                </span>
                                            </label>
                                            <% }); %>
                                    </div>
                                </div>

                                <input type="text" id="professorFilter" class="filter-select"
                                    placeholder="üîç Search Professor..." onkeyup="applyFilters()"
                                    style="padding: 0.5rem 1rem;" />

                                <select id="sortFilter" class="filter-select" onchange="applyFilters()">
                                    <option value="newest">Newest First</option>
                                    <option value="oldest">Oldest First</option>
                                    <option value="name">Name A-Z</option>
                                </select>
                            </div>
                        </div>

                        <section class="file-list">
                            <% if (files.length===0) { %>
                                <div class="empty-state">
                                    <h3>No notes found</h3>
                                    <p>Be the first to share notes for your class!</p>
                                </div>
                                <% } else { %>
                                    <!-- Grid View (Default) -->
                                    <div id="gridView" class="file-grid">
                                        <% files.forEach(file=> { %>
                                            <div class="file-card animate-fade-in" data-class="<%= file.classCode %>"
                                                data-major="<%= file.major || '' %>"
                                                data-semester="<%= file.semester || '' %>"
                                                data-year="<%= file.year || '' %>"
                                                data-professor="<%= (file.professor || '').toLowerCase() %>"
                                                data-uploader="<%= file.uploadedBy %>"
                                                data-name="<%= file.originalName.toLowerCase() %>"
                                                data-date="<%= new Date(file.uploadDate).getTime() %>">
                                                <div class="file-header">
                                                    <div class="file-icon">üìÑ</div>
                                                    <div class="file-info">
                                                        <h3>
                                                            <%= file.originalName %>
                                                        </h3>
                                                    </div>
                                                </div>

                                                <div class="file-meta">
                                                    <% if (file.virusScanStatus) { %>
                                                        <div class="file-meta-item">
                                                            <strong>Security:</strong>
                                                            <% if (file.virusScanStatus==='clean' ) { %>
                                                                <span class="scan-badge scan-clean">‚úì Virus
                                                                    Scanned</span>
                                                                <% } else if (file.virusScanStatus==='pending' ) { %>
                                                                    <span class="scan-badge scan-pending">‚è≥
                                                                        Scanning...</span>
                                                                    <% } else if (file.virusScanStatus==='error' ) { %>
                                                                        <span class="scan-badge scan-error">‚ö†Ô∏è Scan
                                                                            Error</span>
                                                                        <% } %>
                                                        </div>
                                                        <% } %>
                                                            <% if (file.major) { %>
                                                                <div class="file-meta-item">
                                                                    <strong>Major:</strong> <span class="major-badge">
                                                                        <%= file.major %>
                                                                    </span>
                                                                </div>
                                                                <% } %>
                                                                    <% if (file.classCode) { %>
                                                                        <div class="file-meta-item">
                                                                            <strong>Class:</strong> <span
                                                                                class="class-code-badge">
                                                                                <%= file.classCode %>
                                                                            </span>
                                                                        </div>
                                                                        <% } %>
                                                                            <% if (file.professor) { %>
                                                                                <div class="file-meta-item">
                                                                                    <strong>Professor:</strong>
                                                                                    <%= file.professor %>
                                                                                </div>
                                                                                <% } %>
                                                                                    <% if (file.semester && file.year) {
                                                                                        %>
                                                                                        <div class="file-meta-item">
                                                                                            <strong>Term:</strong>
                                                                                            <%= file.semester %>
                                                                                                <%= file.year %>
                                                                                        </div>
                                                                                        <% } %>
                                                                                            <div class="file-meta-item">
                                                                                                <strong>Uploaded
                                                                                                    by:</strong>
                                                                                                <%= file.uploadedBy %>
                                                                                            </div>
                                                                                            <div class="file-meta-item">
                                                                                                <strong>Size:</strong>
                                                                                                <%= (file.size /
                                                                                                    1024).toFixed(1) %>
                                                                                                    KB
                                                                                            </div>
                                                                                            <% if (file.description) {
                                                                                                %>
                                                                                                <div
                                                                                                    class="file-meta-item">
                                                                                                    <strong>Description:</strong>
                                                                                                    <%= file.description
                                                                                                        %>
                                                                                                </div>
                                                                                                <% } %>
                                                </div>

                                                <div class="file-actions">
                                                    <a href="/download/<%= encodeURIComponent(file.filename) %>"
                                                        class="button primary" target="_blank">Download</a>
                                                    <% if (user.role==='viewer' ) { %>
                                                        <button class="button danger disabled"
                                                            onclick="showViewerAlert(); return false;"
                                                            title="View-only mode">Delete</button>
                                                        <% } else if (user.role==='admin' ||
                                                            file.uploadedBy===user.userid) { %>
                                                            <a href="/delete/<%= encodeURIComponent(file.filename) %>"
                                                                class="button danger"
                                                                onclick="return confirm('Are you sure you want to delete this file?')">Delete</a>
                                                            <% } else { %>
                                                                <button class="button danger disabled" disabled
                                                                    title="You can only delete your own files">Delete</button>
                                                                <% } %>
                                                                    <button class="button secondary small report-btn"
                                                                        data-filename="<%= file.filename %>"
                                                                        data-original-name="<%= file.originalName %>">üö©
                                                                        Report</button>
                                                </div>
                                            </div>
                                            <% }); %>
                                    </div>

                                    <!-- Grouped View (Hidden by default) -->
                                    <div id="groupedView" style="display: none;">
                                        <!-- This will be populated by JavaScript -->
                                    </div>
                                    <% } %>
                        </section>

                        <section class="upload-section">
                            <% if (user.role==='viewer' ) { %>
                                <div class="upload-disabled">
                                    <div class="upload-disabled-content">
                                        <div class="upload-disabled-icon">üîí</div>
                                        <h4>Upload Restricted - View-Only Mode</h4>
                                        <p>Your account has been set to view-only access. You can download files but
                                            cannot upload or
                                            delete.</p>
                                        <p style="margin-top: 1rem;">Contact an administrator if you need upload/delete
                                            permissions.</p>
                                        <button class="button primary" style="margin-top: 1rem;"
                                            onclick="showViewerAlert()">
                                            Learn More
                                        </button>
                                    </div>
                                </div>
                                <% } else { %>
                                    <div class="upload-header">
                                        <h3>Upload Notes</h3>
                                        <p>Share your class notes with fellow Terps. Select one or multiple files!</p>
                                        <div class="file-type-notice">
                                            <strong>Supported File Types:</strong> Documents (.pdf, .docx, .pptx,
                                            .xlsx, .txt),
                                            Images (.jpg, .png, .gif, .svg), Code files (.py, .java, .c, .cpp, .js,
                                            .html, .css),
                                            Archives (.zip)
                                            <br>
                                            <small style="color: #6B7280; margin-top: 0.5rem; display: block;">
                                                üîí For your safety, we currently limit file types to those commonly used
                                                in academic
                                                settings. We're actively working on implementing virus scanning to
                                                support additional
                                                file formats in the future!
                                            </small>
                                        </div>
                                    </div>

                                    <form action="/upload" method="POST" enctype="multipart/form-data"
                                        class="upload-form" id="uploadForm">
                                        <div class="form-group">
                                            <label for="documents" class="form-label">
                                                Select Files<span class="required">*</span>
                                            </label>
                                            <div class="upload-drop-zone" id="dropZone">
                                                <input type="file" name="documents" id="documents" required
                                                    class="file-input-hidden" multiple />
                                                <div class="drop-zone-content">
                                                    <div class="drop-zone-icon">üìÅ</div>
                                                    <p class="drop-zone-text">
                                                        <strong>Click to browse</strong> or drag and drop files here
                                                    </p>
                                                    <p class="drop-zone-hint">
                                                        Upload one or multiple files (up to 50 files, 100MB each)
                                                    </p>
                                                </div>
                                                <div class="selected-files" id="selectedFiles"></div>
                                            </div>
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="classCode" class="form-label">Class Code<span
                                                        class="required">*</span></label>
                                                <input type="text" name="classCode" id="classCode" required
                                                    class="form-input" list="coursesList"
                                                    placeholder="e.g. CMSC330, HIST000" autocomplete="off" />
                                                <datalist id="coursesList"></datalist>
                                                <small class="form-help" id="courseInfo"
                                                    style="color: #6B7280; font-size: 0.75rem;">
                                                    Start typing to see course suggestions...
                                                </small>
                                            </div>

                                            <div class="form-group">
                                                <label for="professor" class="form-label">Professor<span
                                                        class="required">*</span></label>
                                                <input type="text" name="professor" id="professor" required
                                                    class="form-input" list="professorsList"
                                                    placeholder="e.g., Dr. Nelson, Prof. Smith" autocomplete="off" />
                                                <datalist id="professorsList"></datalist>
                                                <small class="form-help" id="professorHelp"
                                                    style="color: #9CA3AF; font-size: 0.75rem;">
                                                    Select course first to see professors
                                                </small>
                                            </div>
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="semester" class="form-label">Semester<span
                                                        class="required">*</span></label>
                                                <select name="semester" id="semester" required class="form-input">
                                                    <option value="">Select semester</option>
                                                    <option value="Fall">Fall</option>
                                                    <option value="Spring">Spring</option>
                                                    <option value="Summer">Summer</option>
                                                    <option value="Winter">Winter</option>
                                                </select>
                                            </div>

                                            <div class="form-group">
                                                <label for="year" class="form-label">Year<span
                                                        class="required">*</span></label>
                                                <select name="year" id="year" required class="form-input">
                                                    <option value="">Select year</option>
                                                    <% for (let y=new Date().getFullYear(); y>= 2020; y--) { %>
                                                        <option value="<%= y %>">
                                                            <%= y %>
                                                        </option>
                                                        <% } %>
                                                </select>
                                                <small class="form-help" style="color: #9CA3AF; font-size: 0.75rem;">
                                                    Past semesters only (2020-2025)
                                                </small>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label for="description" class="form-label">Description<span
                                                    class="required">*</span></label>
                                            <textarea name="description" id="description" class="form-textarea" required
                                                placeholder="e.g., Week 1 Lectures, Midterm Study Guide, Chapter 3 Summary"
                                                rows="2"></textarea>
                                            <small class="form-help">
                                                Examples: "Week 5 Lectures", "Midterm Review", "Chapter 1-3 Notes"
                                            </small>
                                        </div>

                                        <div class="form-actions">
                                            <button type="submit" class="button primary" id="uploadSubmitBtn">
                                                Upload Files
                                            </button>
                                        </div>
                                    </form>
                                    <% } %>
                        </section>
    </main>

    <!-- Floating Action Button for Upload -->
    <% if (user.role !=='viewer' ) { %>
        <button class="fab-upload" id="fabUpload" title="Upload Files">
            <span class="fab-icon">+</span>
            <span class="fab-text">Upload</span>
        </button>
        <% } %>

            <script type="application/json" id="filesData"><%- JSON.stringify(files) %></script>

            <!-- App.js functionality now integrated directly in pages -->
            <script>
                // Store all files data in JavaScript for client-side filtering
                const allFilesData = JSON.parse(document.getElementById('filesData').textContent);

                // Current view mode
                let currentView = localStorage.getItem('dashboardView') || 'grid';

                // Initialize view on page load
                document.addEventListener('DOMContentLoaded', function () {
                    if (currentView === 'grouped') {
                        switchView('grouped', false);
                    }
                });

                // Switch between grid and grouped views
                function switchView(view, savePreference = true) {
                    const gridView = document.getElementById('gridView');
                    const groupedView = document.getElementById('groupedView');
                    const gridBtn = document.getElementById('gridViewBtn');
                    const groupedBtn = document.getElementById('groupedViewBtn');

                    currentView = view;

                    if (view === 'grid') {
                        gridView.style.display = 'grid';
                        groupedView.style.display = 'none';
                        gridBtn.style.background = 'var(--umd-red)';
                        gridBtn.style.color = 'white';
                        groupedBtn.style.background = 'transparent';
                        groupedBtn.style.color = '#6B7280';
                    } else {
                        gridView.style.display = 'none';
                        groupedView.style.display = 'block';
                        gridBtn.style.background = 'transparent';
                        gridBtn.style.color = '#6B7280';
                        groupedBtn.style.background = 'var(--umd-red)';
                        groupedBtn.style.color = 'white';
                        renderGroupedView();
                    }

                    if (savePreference) {
                        localStorage.setItem('dashboardView', view);
                    }
                }

                // Render grouped view with accordion structure
                function renderGroupedView() {
                    const groupedView = document.getElementById('groupedView');
                    if (!groupedView) return;

                    const fileCards = Array.from(document.querySelectorAll('#gridView .file-card'));

                    if (fileCards.length === 0) {
                        groupedView.innerHTML = '<div class="empty-state"><h3>No notes found</h3><p>Try different filters or search terms</p></div>';
                        return;
                    }

                    // Group files by major and then by course
                    const grouped = {};
                    fileCards.forEach(card => {
                        const major = card.dataset.major || 'Other';
                        const classCode = card.dataset.class || 'Unknown';

                        if (!grouped[major]) {
                            grouped[major] = {};
                        }
                        if (!grouped[major][classCode]) {
                            grouped[major][classCode] = [];
                        }
                        grouped[major][classCode].push(card);
                    });

                    // Generate HTML
                    let html = '<div class="expand-collapse-all"><button onclick="toggleAllGroups()">Expand All</button></div>';

                    Object.keys(grouped).sort().forEach(major => {
                        const majorFileCount = Object.values(grouped[major]).reduce((sum, files) => sum + files.length, 0);
                        const majors = Object.keys(grouped[major]).sort();

                        html += `
                            <div class="major-group">
                                <div class="major-header" onclick="toggleMajor(this)">
                                    <div>
                                        <span class="expand-icon">‚ñ∂</span>
                                        <strong>${major}</strong>
                                    </div>
                                    <span class="file-count">${majorFileCount} file${majorFileCount !== 1 ? 's' : ''}</span>
                                </div>
                                <div class="course-list">
                        `;

                        majors.forEach(course => {
                            const files = grouped[major][course];
                            html += `
                                <div class="course-group">
                                    <div class="course-header" onclick="toggleCourse(this)">
                                        <div>
                                            <span class="expand-icon">‚ñ∂</span>
                                            <strong>${course}</strong>
                                        </div>
                                        <span class="file-count">${files.length} file${files.length !== 1 ? 's' : ''}</span>
                                    </div>
                                    <div class="course-files">
                                        ${files.map(card => createGroupedFileCard(card)).join('')}
                                    </div>
                                </div>
                            `;
                        });

                        html += '</div></div>';
                    });

                    groupedView.innerHTML = html;
                }

                // Create a grouped file card from original card data
                function createGroupedFileCard(originalCard) {
                    const fileName = originalCard.querySelector('h3').textContent.trim();
                    const major = originalCard.dataset.major;
                    const classCode = originalCard.dataset.class;
                    const semester = originalCard.dataset.semester;
                    const year = originalCard.dataset.year;
                    const professor = originalCard.dataset.professor;
                    const uploader = originalCard.dataset.uploader;

                    // Get metadata from the original card
                    const metaItems = originalCard.querySelectorAll('.file-meta-item');
                    let size = '', description = '', virusScanBadge = '';

                    metaItems.forEach(item => {
                        const text = item.textContent.trim();
                        if (text.includes('Size:')) {
                            size = text.replace('Size:', '').trim();
                        } else if (text.includes('Description:')) {
                            description = text.replace('Description:', '').trim();
                        }
                    });

                    const scanBadge = originalCard.querySelector('.scan-badge');
                    if (scanBadge) {
                        virusScanBadge = scanBadge.outerHTML;
                    }

                    // Get download link
                    const downloadLink = originalCard.querySelector('.file-actions a[href^="/download"]')?.href || '#';
                    const deleteLink = originalCard.querySelector('.file-actions a[href^="/delete"]')?.href || '#';
                    const reportBtn = originalCard.querySelector('.report-btn');
                    const filename = reportBtn?.dataset.filename || '';
                    const originalName = reportBtn?.dataset.originalName || fileName;

                    return `
                        <div class="grouped-file-card">
                            <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.75rem;">
                                <div style="font-size: 1.5rem;">üìÑ</div>
                                <h4 style="margin: 0; font-size: 0.95rem; font-weight: 600; color: #1F2937;">${fileName}</h4>
                            </div>
                            ${virusScanBadge ? `<div style="margin-bottom: 0.5rem;">${virusScanBadge}</div>` : ''}
                            <div style="font-size: 0.8rem; color: #6B7280; line-height: 1.6;">
                                ${professor ? `<div><strong>Professor:</strong> ${professor}</div>` : ''}
                                ${semester && year ? `<div><strong>Term:</strong> ${semester} ${year}</div>` : ''}
                                <div><strong>Uploaded by:</strong> ${uploader}</div>
                                ${size ? `<div><strong>Size:</strong> ${size}</div>` : ''}
                                ${description ? `<div style="margin-top: 0.5rem;"><strong>Description:</strong> ${description}</div>` : ''}
                            </div>
                            <div style="display: flex; gap: 0.5rem; margin-top: 0.75rem;">
                                <a href="${downloadLink}" class="button primary" target="_blank" style="flex: 1; text-align: center; font-size: 0.85rem; padding: 0.5rem;">Download</a>
                                ${deleteLink !== '#' ? `<a href="${deleteLink}" class="button danger" onclick="return confirm('Delete this file?')" style="font-size: 0.85rem; padding: 0.5rem;">Delete</a>` : ''}
                                <button class="button secondary small report-btn" data-filename="${filename}" data-original-name="${originalName}" style="font-size: 0.85rem; padding: 0.5rem;">üö©</button>
                            </div>
                        </div>
                    `;
                }

                // Toggle major accordion
                function toggleMajor(header) {
                    const courseList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    header.classList.toggle('expanded');
                    courseList.classList.toggle('show');

                    // Rotate icon
                    if (header.classList.contains('expanded')) {
                        icon.style.transform = 'rotate(90deg)';
                    } else {
                        icon.style.transform = 'rotate(0deg)';
                    }
                }

                // Toggle course accordion
                function toggleCourse(header) {
                    const fileList = header.nextElementSibling;
                    const icon = header.querySelector('.expand-icon');
                    header.classList.toggle('expanded');
                    fileList.classList.toggle('show');

                    // Rotate icon
                    if (header.classList.contains('expanded')) {
                        icon.style.transform = 'rotate(90deg)';
                    } else {
                        icon.style.transform = 'rotate(0deg)';
                    }
                }

                // Toggle all groups (expand/collapse all)
                function toggleAllGroups() {
                    const button = event.target;
                    const majorHeaders = document.querySelectorAll('.major-header');
                    const isExpanding = button.textContent === 'Expand All';

                    majorHeaders.forEach(header => {
                        const courseList = header.nextElementSibling;
                        const icon = header.querySelector('.expand-icon');
                        if (isExpanding) {
                            header.classList.add('expanded');
                            courseList.classList.add('show');
                            if (icon) icon.style.transform = 'rotate(90deg)';
                        } else {
                            header.classList.remove('expanded');
                            courseList.classList.remove('show');
                            if (icon) icon.style.transform = 'rotate(0deg)';
                        }
                    });

                    button.textContent = isExpanding ? 'Collapse All' : 'Expand All';
                }

                // Handle major filter change - updates class code dropdown
                function handleMajorChange() {
                    const classFilter = document.getElementById('classFilter');
                    const currentClass = classFilter.value;

                    // Update dropdown visibility
                    updateClassDropdownVisibility();

                    // If current class selection doesn't match the new major, clear it
                    const selectedMajor = document.getElementById('majorFilter').value;
                    if (currentClass && selectedMajor) {
                        const currentOption = classFilter.querySelector(`option[value="${currentClass}"]`);
                        if (currentOption && currentOption.dataset.major !== selectedMajor) {
                            classFilter.value = '';
                        }
                    }

                    // Apply filters (preserves semester, professor, etc.)
                    applyFilters();
                }

                // Handle class filter change - auto-set major to match
                function handleClassChange() {
                    const classFilter = document.getElementById('classFilter');
                    const majorFilter = document.getElementById('majorFilter');
                    const selectedClass = classFilter.value;

                    if (selectedClass) {
                        const selectedOption = classFilter.querySelector(`option[value="${selectedClass}"]`);
                        if (selectedOption) {
                            const classMajor = selectedOption.dataset.major;
                            // Auto-set major to match the class (without triggering change event)
                            if (majorFilter.value !== classMajor) {
                                majorFilter.value = classMajor;
                                // Update dropdown visibility without resetting filters
                                updateClassDropdownVisibility();
                            }
                        }
                    }

                    // Apply filters
                    applyFilters();
                }

                // Update class dropdown visibility based on major (helper function)
                function updateClassDropdownVisibility() {
                    const selectedMajor = document.getElementById('majorFilter').value;
                    const classFilter = document.getElementById('classFilter');
                    const allOptions = classFilter.querySelectorAll('option');

                    allOptions.forEach(option => {
                        if (option.value === '') {
                            option.style.display = 'block';
                        } else {
                            const optionMajor = option.dataset.major;
                            if (!selectedMajor || optionMajor === selectedMajor) {
                                option.style.display = 'block';
                            } else {
                                option.style.display = 'none';
                            }
                        }
                    });
                }

                // Toggle multi-select dropdown
                function toggleDropdown(type) {
                    const dropdown = document.getElementById(`${type}Dropdown`);
                    const allDropdowns = document.querySelectorAll('.multi-select-dropdown');

                    // Close other dropdowns
                    allDropdowns.forEach(dd => {
                        if (dd.id !== `${type}Dropdown`) {
                            dd.classList.remove('show');
                        }
                    });

                    // Toggle current dropdown
                    dropdown.classList.toggle('show');
                }

                // Update multi-select label and apply filters
                function updateMultiSelect(type) {
                    const checkboxes = document.querySelectorAll(`#${type}Dropdown input[type="checkbox"]:checked`);
                    const label = document.getElementById(`${type}Label`);
                    const values = Array.from(checkboxes).map(cb => cb.value);

                    if (values.length === 0) {
                        label.textContent = type === 'year' ? 'All Years' : 'All Semesters';
                    } else if (values.length === 1) {
                        label.textContent = values[0];
                    } else {
                        label.textContent = `${values.length} selected`;
                    }

                    applyFilters();
                }

                // Close dropdowns when clicking outside
                document.addEventListener('click', function (e) {
                    if (!e.target.closest('.multi-select-wrapper')) {
                        document.querySelectorAll('.multi-select-dropdown').forEach(dd => {
                            dd.classList.remove('show');
                        });
                    }
                });

                // Client-side filtering - instant, no page reloads!
                function applyFilters() {
                    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                    const majorFilter = document.getElementById('majorFilter').value;
                    const classFilter = document.getElementById('classFilter').value;
                    const professorFilter = document.getElementById('professorFilter').value.toLowerCase();
                    const sortBy = document.getElementById('sortFilter').value;
                    const myFilesOnly = document.getElementById('myFilesToggle').checked;

                    // Get multi-select values from checkboxes
                    const selectedYears = Array.from(document.querySelectorAll('#yearDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    const selectedSemesters = Array.from(document.querySelectorAll('#semesterDropdown input[type="checkbox"]:checked'))
                        .map(cb => cb.value);

                    // Current user's userid for "My Files" filter
                    const currentUserid = '<%= user.userid %>';

                    // Filter files
                    let filteredFiles = allFilesData.filter(file => {
                        // "My Files" filter - show only files uploaded by current user
                        const matchesMyFiles = !myFilesOnly || file.uploadedBy === currentUserid;

                        // Search filter - searches by filename, uploader, class, description, and professor
                        const matchesSearch = !searchTerm ||
                            file.originalName.toLowerCase().includes(searchTerm) ||
                            file.uploadedBy.toLowerCase().includes(searchTerm) ||
                            (file.classCode && file.classCode.toLowerCase().includes(searchTerm)) ||
                            (file.description && file.description.toLowerCase().includes(searchTerm)) ||
                            (file.professor && file.professor.toLowerCase().includes(searchTerm));

                        // Major filter
                        const matchesMajor = !majorFilter || file.major === majorFilter;

                        // Class filter
                        const matchesClass = !classFilter || file.classCode === classFilter;

                        // Year filter (multi-select)
                        const matchesYear = selectedYears.length === 0 || selectedYears.includes(file.year);

                        // Semester filter (multi-select)
                        const matchesSemester = selectedSemesters.length === 0 || selectedSemesters.includes(file.semester);

                        // Professor filter
                        const matchesProfessor = !professorFilter ||
                            (file.professor && file.professor.toLowerCase().includes(professorFilter));

                        return matchesMyFiles && matchesSearch && matchesMajor && matchesClass && matchesYear && matchesSemester && matchesProfessor;
                    });

                    // Sort files
                    filteredFiles.sort((a, b) => {
                        switch (sortBy) {
                            case 'oldest':
                                return new Date(a.uploadDate) - new Date(b.uploadDate);
                            case 'name':
                                return a.originalName.localeCompare(b.originalName);
                            case 'newest':
                            default:
                                return new Date(b.uploadDate) - new Date(a.uploadDate);
                        }
                    });

                    // Update the DOM
                    displayFiles(filteredFiles);

                    // If grouped view is active, re-render it
                    if (currentView === 'grouped') {
                        renderGroupedView();
                    }
                }

                function displayFiles(files) {
                    const gridView = document.getElementById('gridView');
                    const groupedView = document.getElementById('groupedView');
                    let emptyState = document.querySelector('.empty-state');
                    const fileList = document.querySelector('.file-list');

                    if (files.length === 0) {

                        // Hide both views
                        if (gridView) gridView.style.display = 'none';
                        if (groupedView) groupedView.style.display = 'none';

                        // Show or create empty state
                        if (!emptyState) {
                            const emptyDiv = document.createElement('div');
                            emptyDiv.className = 'empty-state';
                            emptyDiv.innerHTML = '<h3>No notes found</h3><p>Try different filters or search terms</p>';
                            fileList.insertBefore(emptyDiv, fileList.firstChild);
                            emptyState = emptyDiv;
                        } else {
                            emptyState.style.display = 'block';
                        }
                        return;
                    }

                    // Hide empty state if it exists
                    if (emptyState) {
                        emptyState.style.display = 'none';
                    }

                    // Always update grid view with new data
                    if (gridView) {
                        // Set display based on current view
                        gridView.style.display = currentView === 'grid' ? 'grid' : 'none';
                        gridView.innerHTML = files.map(file => `
                <div class="file-card animate-fade-in"
                     data-class="${escapeHtml(file.classCode || '')}"
                     data-major="${escapeHtml(file.major || '')}"
                     data-semester="${escapeHtml(file.semester || '')}"
                     data-year="${escapeHtml(file.year || '')}"
                     data-professor="${escapeHtml((file.professor || '').toLowerCase())}"
                     data-uploader="${escapeHtml(file.uploadedBy)}"
                     data-name="${escapeHtml(file.originalName.toLowerCase())}"
                     data-date="${new Date(file.uploadDate).getTime()}">
                    <div class="file-header">
                        <div class="file-icon">üìÑ</div>
                        <div class="file-info">
                            <h3>${escapeHtml(file.originalName)}</h3>
                        </div>
                    </div>
                    <div class="file-meta">
                        ${file.virusScanStatus ? `<div class="file-meta-item"><strong>Security:</strong> ${getScanBadge(file.virusScanStatus)}</div>` : ''}
                        ${file.major ? `<div class="file-meta-item"><strong>Major:</strong> <span class="major-badge">${escapeHtml(file.major)}</span></div>` : ''}
                        ${file.classCode ? `<div class="file-meta-item"><strong>Class:</strong> <span class="class-code-badge">${escapeHtml(file.classCode)}</span></div>` : ''}
                        ${file.professor ? `<div class="file-meta-item"><strong>Professor:</strong> ${escapeHtml(file.professor)}</div>` : ''}
                        ${file.semester && file.year ? `<div class="file-meta-item"><strong>Term:</strong> ${file.semester} ${file.year}</div>` : ''}
                        <div class="file-meta-item"><strong>Uploaded by:</strong> ${escapeHtml(file.uploadedBy)}</div>
                        <div class="file-meta-item"><strong>Size:</strong> ${(file.size / 1024).toFixed(1)} KB</div>
                        ${file.description ? `<div class="file-meta-item"><strong>Description:</strong> ${escapeHtml(file.description)}</div>` : ''}
                    </div>
                    <div class="file-actions">
                        <a href="/download/${encodeURIComponent(file.filename)}" class="button primary" target="_blank">Download</a>
                        ${getDeleteButton(file)}
                        <button class="button secondary small report-btn" data-filename="${file.filename}" data-original-name="${escapeHtml(file.originalName)}">üö© Report</button>
                    </div>
                </div>
            `).join('');
                    }

                    // Update grouped view display
                    if (groupedView) {
                        groupedView.style.display = currentView === 'grouped' ? 'block' : 'none';
                    }
                }

                function canDeleteFile(file) {
                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';
                    return userRole === 'admin' || file.uploadedBy === userId;
                }

                function getDeleteButton(file) {
                    const userRole = '<%= user.role %>';
                    const userId = '<%= user.userid %>';

                    if (userRole === 'viewer') {
                        return `<button class="button danger disabled" onclick="showViewerAlert(); return false;" title="View-only mode">Delete</button>`;
                    } else if (userRole === 'admin' || file.uploadedBy === userId) {
                        return `<a href="/delete/${encodeURIComponent(file.filename)}" class="button danger" onclick="return confirm('Are you sure you want to delete this file?')">Delete</a>`;
                    } else {
                        return `<button class="button danger disabled" disabled title="You can only delete your own files">Delete</button>`;
                    }
                }

                function showViewerAlert() {
                    alert('üîí View-Only Mode\n\nYour account has been set to view-only access. You can download files but cannot upload or delete.\n\nPlease contact an administrator if you need upload/delete permissions.');
                }

                // Add event delegation for report buttons
                document.addEventListener('click', function (e) {
                    if (e.target.classList.contains('report-btn') || e.target.closest('.report-btn')) {
                        const btn = e.target.classList.contains('report-btn') ? e.target : e.target.closest('.report-btn');
                        const filename = btn.dataset.filename;
                        const originalName = btn.dataset.originalName;
                        reportFile(filename, originalName);
                    }
                });

                // File reporting function
                async function reportFile(filename, originalName) {
                    const reasons = [
                        'Inappropriate content',
                        'Copyright violation',
                        'Malicious file',
                        'Academic integrity violation (unauthorized exam/project)',
                        'Spam or irrelevant content',
                        'Other'
                    ];

                    const reason = prompt(`Why are you reporting "${originalName}"?\n\nEnter the reason:\n1. ${reasons[0]}\n2. ${reasons[1]}\n3. ${reasons[2]}\n4. ${reasons[3]}\n5. ${reasons[4]}\n6. ${reasons[5]}\n\nEnter number (1-6):`);

                    if (!reason) return; // User cancelled

                    const reasonIndex = parseInt(reason) - 1;
                    if (reasonIndex < 0 || reasonIndex >= reasons.length) {
                        alert('Invalid selection. Please try again.');
                        return;
                    }

                    const selectedReason = reasons[reasonIndex];
                    const additionalDetails = prompt(`Optional: Add more details about the issue:`) || '';

                    try {
                        const response = await fetch('/api/report-file', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                filename: filename,
                                originalName: originalName,
                                reason: selectedReason,
                                details: additionalDetails
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            alert('‚úÖ Report submitted successfully. An admin will review this file.');
                        } else {
                            alert('‚ùå Error: ' + result.error);
                        }
                    } catch (error) {
                        alert('‚ùå Failed to submit report. Please try again.');
                        console.error('Report error:', error);
                    }
                }

                function escapeHtml(text) {
                    const div = document.createElement('div');
                    div.textContent = text;
                    return div.innerHTML;
                }

                function getScanBadge(status) {
                    if (status === 'clean') {
                        return '<span class="scan-badge scan-clean">‚úì Virus Scanned</span>';
                    } else if (status === 'pending') {
                        return '<span class="scan-badge scan-pending">‚è≥ Scanning...</span>';
                    } else if (status === 'error') {
                        return '<span class="scan-badge scan-error">‚ö†Ô∏è Scan Error</span>';
                    }
                    return '';
                }

                // Direct S3 Upload Form Handler
                const uploadForm = document.getElementById('uploadForm');
                if (uploadForm) {
                    uploadForm.addEventListener('submit', async function (e) {
                        e.preventDefault(); // Prevent default form submission

                        const submitBtn = document.getElementById('uploadSubmitBtn');
                        const filesInput = document.getElementById('documents');
                        const files = filesInput.files;

                        if (files.length === 0) {
                            // Show styled notification instead of alert
                            const notification = document.createElement('div');
                            notification.style.cssText = `
                                position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                            `;
                            notification.textContent = '‚ö†Ô∏è Please select at least one file to upload';
                            document.body.appendChild(notification);
                            setTimeout(() => notification.remove(), 3000);
                            return;
                        }

                        // Get form data
                        const classCode = document.getElementById('classCode').value.trim();
                        const professor = document.getElementById('professor').value.trim();
                        const semester = document.getElementById('semester').value;
                        const year = document.getElementById('year').value;
                        const description = document.getElementById('description').value.trim();

                        if (!classCode || !professor || !description) {
                            const notification = document.createElement('div');
                            notification.style.cssText = `
                                position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                            `;
                            notification.textContent = '‚ö†Ô∏è Please fill in all required fields';
                            document.body.appendChild(notification);
                            setTimeout(() => notification.remove(), 3000);
                            return;
                        }

                        // Disable submit button
                        submitBtn.disabled = true;
                        submitBtn.textContent = 'Uploading...';

                        // Show loading overlay
                        const overlay = document.createElement('div');
                        overlay.id = 'uploadOverlay';
                        overlay.innerHTML = `
                            <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.7); display: flex; align-items: center; justify-content: center; z-index: 9999;">
                                <div style="background: white; padding: 3rem; border-radius: 12px; text-align: center; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3); min-width: 400px;">
                                    <div style="width: 60px; height: 60px; border: 4px solid #E5E7EB; border-top-color: #DC2626; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1.5rem;"></div>
                                    <h3 style="color: #DC2626; margin-bottom: 0.5rem;">Uploading Files...</h3>
                                    <p style="color: #6B7280;" id="uploadStatus">Preparing upload...</p>
                                    <p style="color: #9CA3AF; font-size: 0.85rem; margin-top: 1rem;">
                                        <span id="uploadProgress">0</span> / ${files.length} files ‚Ä¢ Direct S3 upload
                                    </p>
                                </div>
                            </div>
                            <style>
                                @keyframes spin {
                                    0% { transform: rotate(0deg); }
                                    100% { transform: rotate(360deg); }
                                }
                            </style>
                        `;
                        document.body.appendChild(overlay);

                        const statusEl = document.getElementById('uploadStatus');
                        const progressEl = document.getElementById('uploadProgress');

                        let successCount = 0;
                        let errorCount = 0;

                        // Upload each file
                        for (let i = 0; i < files.length; i++) {
                            const file = files[i];
                            statusEl.textContent = `Processing ${file.name}...`;

                            try {
                                // Step 1: Calculate file hash (client-side to avoid server timeout)
                                const arrayBuffer = await file.arrayBuffer();
                                const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);
                                const hashArray = Array.from(new Uint8Array(hashBuffer));
                                const fileHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

                                statusEl.textContent = `Uploading ${file.name}...`;

                                // Step 2: Get presigned URL
                                const urlResponse = await fetch('/api/get-upload-url', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        filename: file.name,
                                        filetype: file.type
                                    })
                                });

                                if (!urlResponse.ok) {
                                    throw new Error('Failed to get upload URL');
                                }

                                const { uploadUrl, s3Key, s3Url } = await urlResponse.json();

                                // Step 2: Upload directly to S3
                                const s3Response = await fetch(uploadUrl, {
                                    method: 'PUT',
                                    body: file,
                                    headers: {
                                        'Content-Type': file.type
                                    }
                                });

                                if (!s3Response.ok) {
                                    throw new Error('S3 upload failed');
                                }

                                // Step 3: Confirm upload to backend
                                const confirmResponse = await fetch('/api/confirm-upload', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        s3Key: s3Key,
                                        s3Url: s3Url,
                                        filename: file.name,
                                        filetype: file.type,
                                        filesize: file.size,
                                        fileHash: fileHash,
                                        classCode: classCode,
                                        professor: professor,
                                        semester: semester,
                                        year: year,
                                        description: description
                                    })
                                });

                                if (!confirmResponse.ok) {
                                    throw new Error('Failed to save file metadata');
                                }

                                const result = await confirmResponse.json();
                                if (result.duplicate) {
                                    statusEl.textContent = `${file.name} already exists (skipped)`;
                                } else {
                                    successCount++;
                                }

                            } catch (error) {
                                console.error('Upload error:', error);
                                errorCount++;
                                statusEl.textContent = `Error uploading ${file.name}`;
                            }

                            progressEl.textContent = i + 1;
                        }

                        // Show completion message
                        statusEl.textContent = `Upload complete! ${successCount} uploaded, ${errorCount} failed`;
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    });
                }

                // Initialize on page load
                document.addEventListener('DOMContentLoaded', function () {
                    // Real-time search as you type
                    const searchInput = document.getElementById('searchInput');
                    if (searchInput) {
                        searchInput.addEventListener('input', applyFilters);
                    }

                    // Load UMD.io course data for autocomplete
                    const classCodeInput = document.getElementById('classCode');
                    const coursesList = document.getElementById('coursesList');
                    const courseInfo = document.getElementById('courseInfo');
                    const professorInput = document.getElementById('professor');
                    const professorsList = document.getElementById('professorsList');

                    if (classCodeInput && coursesList) {
                        // Fetch courses on load
                        fetch('/api/umd/courses?per_page=100')
                            .then(res => res.json())
                            .then(courses => {
                                if (courses && courses.length > 0) {
                                    courses.forEach(course => {
                                        const option = document.createElement('option');
                                        option.value = course.course_id;
                                        option.textContent = `${course.course_id} - ${course.name || course.course_id}`;
                                        coursesList.appendChild(option);
                                    });
                                    courseInfo.textContent = 'Course suggestions loaded';
                                    courseInfo.style.color = '#10B981';
                                }
                            })
                            .catch(err => {
                                console.error('Failed to load courses:', err);
                                courseInfo.textContent = 'Type any class code to continue';
                                courseInfo.style.color = '#9CA3AF';
                            });

                        // Auto-uppercase and fetch professors when course changes
                        classCodeInput.addEventListener('input', function () {
                            this.value = this.value.toUpperCase();
                        });

                        // Helper: Convert semester/year to UMD.io semester ID
                        function getSemesterId() {
                            const semester = document.getElementById('semester').value;
                            const year = document.getElementById('year').value;
                            if (!semester || !year) return '202501'; // Default to Spring 2025

                            const semesterMap = {
                                'Spring': '01',
                                'Summer': '05',
                                'Fall': '08',
                                'Winter': '12'
                            };
                            return `${year}${semesterMap[semester] || '01'}`;
                        }

                        // Helper: Reset dropdowns to show all options
                        function resetDropdowns() {
                            // Reset semester dropdown to show all options
                            const semesterSelect = document.getElementById('semester');
                            const semesterOptions = Array.from(semesterSelect.options);
                            semesterOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });

                            // Reset year dropdown to show all options
                            const yearSelect = document.getElementById('year');
                            const yearOptions = Array.from(yearSelect.options);
                            yearOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });
                        }

                        // Store course data globally
                        let currentCourseData = null;

                        // Fetch course data with comprehensive debugging
                        async function fetchCourseData() {
                            const courseCode = classCodeInput.value.trim().toUpperCase();
                            console.log(`üîç [FRONTEND] Fetching data for course: ${courseCode}`);

                            if (!courseCode) {
                                console.log(`üîç [FRONTEND] No course code, resetting...`);
                                resetDropdowns();
                                currentCourseData = null;
                                return;
                            }

                            // Get current filter values
                            const selectedSemester = document.getElementById('semester').value;
                            const selectedYear = document.getElementById('year').value;
                            console.log(`üîç [FRONTEND] Current filters - Semester: ${selectedSemester}, Year: ${selectedYear}`);

                            // Build query parameters
                            let queryParams = '';
                            if (selectedSemester) {
                                queryParams += `&filter_semester=${encodeURIComponent(selectedSemester)}`;
                            }
                            if (selectedYear) {
                                queryParams += `&filter_year=${encodeURIComponent(selectedYear)}`;
                            }

                            console.log(`üîç [FRONTEND] API URL: /api/umd/course/${courseCode}?${queryParams}`);

                            try {
                                const response = await fetch(`/api/umd/course/${courseCode}?${queryParams}`);
                                console.log(`üîç [FRONTEND] Response status: ${response.status}`);

                                if (response.ok) {
                                    currentCourseData = await response.json();
                                    console.log(`‚úÖ [FRONTEND] Course data received:`, currentCourseData);

                                    // Update course info display
                                    if (currentCourseData.name && currentCourseData.name !== 'undefined' && currentCourseData.name !== courseCode) {
                                        courseInfo.innerHTML = `‚úì <strong>${currentCourseData.course_id || courseCode}:</strong> ${currentCourseData.name}`;
                                        courseInfo.style.color = '#10B981';
                                    } else {
                                        courseInfo.textContent = '';
                                    }

                                    // Set default semester and year to current semester (only on first load)
                                    if (!selectedSemester && !selectedYear && currentCourseData.current_semester && currentCourseData.current_year) {
                                        const semesterSelect = document.getElementById('semester');
                                        const yearSelect = document.getElementById('year');

                                        if (semesterSelect) {
                                            semesterSelect.value = currentCourseData.current_semester;
                                            console.log(`üîç [FRONTEND] Set default semester: ${currentCourseData.current_semester}`);
                                        }
                                        if (yearSelect) {
                                            yearSelect.value = currentCourseData.current_year;
                                            console.log(`üîç [FRONTEND] Set default year: ${currentCourseData.current_year}`);
                                        }
                                    }

                                    // Update professor list
                                    updateProfessorList();
                                } else {
                                    console.log(`‚ùå [FRONTEND] Course not found: ${courseCode}`);
                                    courseInfo.textContent = 'Could not verify course - you can still upload';
                                    courseInfo.style.color = '#9CA3AF';
                                    currentCourseData = null;
                                    resetDropdowns();
                                }
                            } catch (error) {
                                console.error('‚ùå [FRONTEND] Error fetching course details:', error);
                                courseInfo.textContent = 'Could not verify course - you can still upload';
                                courseInfo.style.color = '#9CA3AF';
                                currentCourseData = null;
                                resetDropdowns();
                            }
                        }

                        // Update professor list based on current selections
                        function updateProfessorList() {
                            console.log(`üîç [FRONTEND] Updating professor list...`);

                            if (!currentCourseData) {
                                console.log(`üîç [FRONTEND] No course data, clearing professor list`);
                                professorsList.innerHTML = '';
                                professorInput.placeholder = 'Enter professor name';
                                document.getElementById('professorHelp').textContent = 'Select course first to see professors';
                                return;
                            }

                            const selectedSemester = document.getElementById('semester').value;
                            const selectedYear = document.getElementById('year').value;
                            console.log(`üîç [FRONTEND] Filtering professors for: ${selectedSemester} ${selectedYear}`);

                            let filteredProfessors = [];

                            if (selectedSemester && selectedYear) {
                                // Filter by both semester and year
                                const key = `${selectedSemester}_${selectedYear}`;
                                console.log(`üîç [FRONTEND] Looking for key: ${key}`);
                                console.log(`üîç [FRONTEND] Available keys:`, Object.keys(currentCourseData.historical_data || {}));

                                if (currentCourseData.historical_data && currentCourseData.historical_data[key]) {
                                    filteredProfessors = [...currentCourseData.historical_data[key]].sort();
                                    console.log(`‚úÖ [FRONTEND] Found ${filteredProfessors.length} professors for ${key}:`, filteredProfessors);
                                } else {
                                    console.log(`‚ö†Ô∏è [FRONTEND] No professors found for ${key}`);
                                }
                            } else if (selectedSemester) {
                                // Filter by semester only
                                console.log(`üîç [FRONTEND] Filtering by semester: ${selectedSemester}`);
                                if (currentCourseData.historical_data) {
                                    filteredProfessors = Object.keys(currentCourseData.historical_data)
                                        .filter(key => key.startsWith(selectedSemester + '_'))
                                        .flatMap(key => currentCourseData.historical_data[key])
                                        .filter((prof, index, arr) => arr.indexOf(prof) === index) // Remove duplicates
                                        .sort();
                                    console.log(`‚úÖ [FRONTEND] Found ${filteredProfessors.length} professors for ${selectedSemester}:`, filteredProfessors);
                                }
                            } else if (selectedYear) {
                                // Filter by year only
                                console.log(`üîç [FRONTEND] Filtering by year: ${selectedYear}`);
                                if (currentCourseData.historical_data) {
                                    filteredProfessors = Object.keys(currentCourseData.historical_data)
                                        .filter(key => key.endsWith('_' + selectedYear))
                                        .flatMap(key => currentCourseData.historical_data[key])
                                        .filter((prof, index, arr) => arr.indexOf(prof) === index) // Remove duplicates
                                        .sort();
                                    console.log(`‚úÖ [FRONTEND] Found ${filteredProfessors.length} professors for ${selectedYear}:`, filteredProfessors);
                                }
                            } else {
                                // No filtering - show all professors
                                filteredProfessors = currentCourseData.all_professors || [];
                                console.log(`üîç [FRONTEND] No filters, showing all ${filteredProfessors.length} professors:`, filteredProfessors);
                            }

                            // Populate professor dropdown
                            professorsList.innerHTML = '';
                            if (filteredProfessors.length > 0) {
                                filteredProfessors.forEach(prof => {
                                    const option = document.createElement('option');
                                    option.value = prof;
                                    professorsList.appendChild(option);
                                });

                                let filterText = '';
                                if (selectedSemester && selectedYear) {
                                    filterText = ` for ${selectedSemester} ${selectedYear}`;
                                } else if (selectedSemester) {
                                    filterText = ` for ${selectedSemester}`;
                                } else if (selectedYear) {
                                    filterText = ` for ${selectedYear}`;
                                }

                                professorInput.placeholder = `${filteredProfessors.length} professor${filteredProfessors.length !== 1 ? 's' : ''} taught this course${filterText}`;
                                document.getElementById('professorHelp').textContent = `${filteredProfessors.length} professor${filteredProfessors.length !== 1 ? 's' : ''} available${filterText}`;
                                console.log(`‚úÖ [FRONTEND] Updated professor dropdown with ${filteredProfessors.length} professors`);
                            } else {
                                professorInput.placeholder = 'Enter professor name';
                                document.getElementById('professorHelp').textContent = 'No professors found for this semester/year';
                                console.log(`‚ö†Ô∏è [FRONTEND] No professors found, showing manual entry`);
                            }
                        }


                        // Trigger professor fetch when course changes
                        classCodeInput.addEventListener('change', function () {
                            console.log(`üîç [FRONTEND] Course changed to: ${this.value}`);
                            fetchCourseData();
                        });

                        // Helper: Reset dropdowns to show all options
                        function resetDropdowns() {
                            console.log(`üîç [FRONTEND] Resetting dropdowns...`);
                            // Reset semester dropdown to show all options
                            const semesterSelect = document.getElementById('semester');
                            const semesterOptions = Array.from(semesterSelect.options);
                            semesterOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });

                            // Reset year dropdown to show all options
                            const yearSelect = document.getElementById('year');
                            const yearOptions = Array.from(yearSelect.options);
                            yearOptions.forEach(option => {
                                option.style.display = 'block';
                                option.disabled = false;
                            });
                        }

                        // Validate semester/year selection (prevent future semesters)
                        function validateSemesterYear() {
                            const semester = document.getElementById('semester').value;
                            const year = parseInt(document.getElementById('year').value);
                            if (!semester || !year) return true;

                            const now = new Date();
                            const currentYear = now.getFullYear();
                            const currentMonth = now.getMonth() + 1; // 1-12

                            // Determine current semester
                            let currentSemester;
                            if (currentMonth >= 1 && currentMonth <= 5) currentSemester = 'Spring';
                            else if (currentMonth >= 6 && currentMonth <= 7) currentSemester = 'Summer';
                            else if (currentMonth >= 8 && currentMonth <= 12) currentSemester = 'Fall';

                            const semesterOrder = { 'Spring': 1, 'Summer': 2, 'Fall': 3, 'Winter': 4 };

                            // Check if future semester
                            if (year > currentYear) {
                                const notification = document.createElement('div');
                                notification.style.cssText = `
                                    position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                    padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                    font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                                `;
                                notification.textContent = '‚ö†Ô∏è Cannot select future years';
                                document.body.appendChild(notification);
                                setTimeout(() => notification.remove(), 3000);
                                document.getElementById('year').value = '';
                                return false;
                            }

                            if (year === currentYear && semesterOrder[semester] > semesterOrder[currentSemester]) {
                                const notification = document.createElement('div');
                                notification.style.cssText = `
                                    position: fixed; top: 20px; right: 20px; background: #EF4444; color: white;
                                    padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                    font-weight: 500; z-index: 10000; animation: slideIn 0.3s ease;
                                `;
                                notification.textContent = `‚ö†Ô∏è Cannot select future semesters (currently ${currentSemester} ${currentYear})`;
                                document.body.appendChild(notification);
                                setTimeout(() => notification.remove(), 3000);
                                document.getElementById('semester').value = '';
                                return false;
                            }

                            return true;
                        }

                        // Re-fetch professors when semester or year changes
                        const semesterInput = document.getElementById('semester');
                        const yearInput = document.getElementById('year');

                        if (semesterInput) {
                            semesterInput.addEventListener('change', function () {
                                console.log(`üîç [FRONTEND] Semester changed to: ${this.value}`);
                                if (validateSemesterYear() && classCodeInput.value.trim()) {
                                    fetchCourseData(); // Refetch with new semester filter
                                }
                            });
                        }

                        if (yearInput) {
                            yearInput.addEventListener('change', function () {
                                console.log(`üîç [FRONTEND] Year changed to: ${this.value}`);
                                if (validateSemesterYear() && classCodeInput.value.trim()) {
                                    fetchCourseData(); // Refetch with new year filter
                                }
                            });
                        }
                    }

                    // Initialize drag-and-drop upload
                    initDragAndDrop();

                    // Initialize Floating Action Button
                    initFAB();
                });

                // Drag and Drop Upload Functionality
                function initDragAndDrop() {
                    const dropZone = document.getElementById('dropZone');
                    const fileInput = document.getElementById('documents');
                    const selectedFilesContainer = document.getElementById('selectedFiles');

                    if (!dropZone || !fileInput) return;

                    // Click to browse
                    dropZone.addEventListener('click', () => {
                        fileInput.click();
                    });

                    // Prevent default drag behaviors
                    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                        dropZone.addEventListener(eventName, preventDefaults, false);
                        document.body.addEventListener(eventName, preventDefaults, false);
                    });

                    // Highlight drop zone when dragging over
                    ['dragenter', 'dragover'].forEach(eventName => {
                        dropZone.addEventListener(eventName, () => {
                            dropZone.classList.add('drag-over');
                        }, false);
                    });

                    ['dragleave', 'drop'].forEach(eventName => {
                        dropZone.addEventListener(eventName, () => {
                            dropZone.classList.remove('drag-over');
                        }, false);
                    });

                    // Handle dropped files
                    dropZone.addEventListener('drop', (e) => {
                        const dt = e.dataTransfer;
                        const files = dt.files;
                        fileInput.files = files;
                        displaySelectedFiles(files);
                    });

                    // Handle selected files via click
                    fileInput.addEventListener('change', (e) => {
                        displaySelectedFiles(e.target.files);
                    });

                    function preventDefaults(e) {
                        e.preventDefault();
                        e.stopPropagation();
                    }

                    function displaySelectedFiles(files) {
                        if (!files || files.length === 0) {
                            selectedFilesContainer.innerHTML = '';
                            return;
                        }

                        let totalSize = 0;
                        let html = '<div class="selected-files-header">üìé Selected Files:</div>';

                        Array.from(files).forEach((file, index) => {
                            const size = (file.size / 1024).toFixed(1);
                            totalSize += file.size;
                            const icon = getFileIcon(file.name);

                            html += `
                        <div class="file-item">
                            <div class="file-item-info">
                                <span class="file-item-icon">${icon}</span>
                                <span class="file-item-name">${escapeHtml(file.name)}</span>
                            </div>
                            <span class="file-item-size">${size} KB</span>
                        </div>
                    `;
                        });

                        const totalSizeMB = (totalSize / (1024 * 1024)).toFixed(2);
                        html += `<div class="files-summary">Total: ${files.length} file(s) ¬∑ ${totalSizeMB} MB</div>`;

                        selectedFilesContainer.innerHTML = html;
                    }

                    function getFileIcon(filename) {
                        const ext = filename.split('.').pop().toLowerCase();
                        const iconMap = {
                            pdf: 'üìï',
                            doc: 'üìò', docx: 'üìò',
                            xls: 'üìó', xlsx: 'üìó',
                            ppt: 'üìô', pptx: 'üìô',
                            txt: 'üìÑ',
                            zip: 'üì¶', rar: 'üì¶',
                            jpg: 'üñºÔ∏è', jpeg: 'üñºÔ∏è', png: 'üñºÔ∏è', gif: 'üñºÔ∏è',
                            mp4: 'üé•', mov: 'üé•',
                            mp3: 'üéµ',
                        };
                        return iconMap[ext] || 'üìÑ';
                    }
                }

                // Floating Action Button functionality
                function initFAB() {
                    const fab = document.getElementById('fabUpload');
                    const uploadSection = document.querySelector('.upload-section');

                    if (!fab || !uploadSection) return;

                    // Smooth scroll to upload section
                    fab.addEventListener('click', () => {
                        uploadSection.scrollIntoView({ behavior: 'smooth', block: 'start' });

                        // Optional: Focus on the drop zone after scrolling
                        setTimeout(() => {
                            const dropZone = document.getElementById('dropZone');
                            if (dropZone) {
                                dropZone.style.animation = 'pulse 0.5s ease-in-out';
                                setTimeout(() => {
                                    dropZone.style.animation = '';
                                }, 500);
                            }
                        }, 500);
                    });

                    // Hide FAB when upload section is visible
                    const observer = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                fab.style.opacity = '0';
                                fab.style.pointerEvents = 'none';
                            } else {
                                fab.style.opacity = '1';
                                fab.style.pointerEvents = 'all';
                            }
                        });
                    }, { threshold: 0.1 });

                    observer.observe(uploadSection);
                }
            </script>

            <%- include('partials/footer') %>
</body>

</html>
