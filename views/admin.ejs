<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        <%= title %>
    </title>
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="stylesheet" href="/styles/main.css" />
</head>

<body>
    <header class="topbar">
        <h2>Terp Notes - Admin</h2>
        <div class="user-info">
            Welcome, <strong>
                <%= user.firstname %>
            </strong>
            <span class="user-role role-<%= user.role %>">
                <%= user.role %>
            </span> |
            <a href="/dashboard" class="logout-btn">Dashboard</a> |
            <a href="/profile" class="logout-btn">My Profile</a> |
            <a href="/logout" class="logout-btn">Logout</a>
        </div>
    </header>

    <main class="container">
        <div class="admin-header">
            <h1>Admin Dashboard</h1>
            <p>Manage users, review reported files, moderate content, and post announcements</p>
        </div>

        <!-- Platform Statistics -->
        <div class="admin-stats">
            <div class="admin-stat-card">
                <h3 id="totalUsers">
                    <%= users.length %>
                </h3>
                <p>Total Users</p>
            </div>
            <div class="admin-stat-card">
                <h3 id="adminCount">
                    <%= users.filter(u=> u.role === 'admin').length %>
                </h3>
                <p>Admins</p>
            </div>
            <div class="admin-stat-card">
                <h3 id="contributorCount">
                    <%= users.filter(u=> u.role === 'contributor').length %>
                </h3>
                <p>Contributors</p>
            </div>
            <div class="admin-stat-card">
                <h3 id="viewerCount">
                    <%= users.filter(u=> u.role === 'viewer').length %>
                </h3>
                <p>Viewers</p>
            </div>
        </div>

        <!-- Reported Files Section (Critical Alerts) -->
        <% if (reports && reports.length> 0) { %>
            <section class="reports-section" style="margin-top: 3rem;">
                <h2>Reported Files (<%= reports.length %>) - Needs Review</h2>
                <div class="reports-grid">
                    <% reports.forEach(report=> { %>
                        <div class="report-card">
                            <div class="report-header">
                                <h3 style="margin-bottom: 0.5rem;">
                                    <%= report.originalName %>
                                </h3>
                            </div>
                            <div class="report-reason-box">
                                <strong>Reason:</strong>
                                <%= report.reason %>
                            </div>
                            <div class="report-details">
                                <p><strong>Reported by:</strong>
                                    <%= report.reportedBy %>
                                </p>
                                <p><strong>File uploader:</strong>
                                    <%= report.fileUploader %>
                                </p>
                                <p><strong>Class:</strong>
                                    <%= report.classCode %>
                                </p>
                                <p><strong>Date:</strong>
                                    <%= new Date(report.reportedAt).toLocaleString() %>
                                </p>
                                <% if (report.details) { %>
                                    <p><strong>Additional details:</strong>
                                        <%= report.details %>
                                    </p>
                                    <% } %>
                            </div>
                            <div class="report-actions">
                                <button class="button report-delete-btn"
                                    onclick="resolveReport('<%= report._id %>', 'delete')">
                                    Delete File
                                </button>
                                <button class="button report-dismiss-btn"
                                    onclick="resolveReport('<%= report._id %>', 'dismiss')">
                                    Dismiss Report
                                </button>
                                <a href="/download/<%= encodeURIComponent(report.filename) %>"
                                    class="button report-review-btn" target="_blank" rel="noopener noreferrer">
                                    Review File
                                </a>
                            </div>
                        </div>
                        <% }); %>
                </div>
            </section>
            <% } %>

                <!-- Announcements Management Section -->
                <section class="announcements-section">
                    <h2>Announcements</h2>
                    <p style="color: #6B7280; margin-bottom: 1.5rem;">Create platform-wide announcements visible on all
                        user
                        dashboards</p>

                    <!-- Create Announcement Form -->
                    <div
                        style="background: white; padding: 2rem; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); margin-bottom: 2rem;">
                        <h3>Create New Announcement</h3>
                        <form id="announcementForm" style="margin-top: 1rem;">
                            <div class="form-group">
                                <label for="announcementMessage">Message</label>
                                <textarea id="announcementMessage" required rows="3"
                                    placeholder="Enter announcement message..."
                                    style="width: 100%; padding: 0.75rem; border: 1px solid #D1D5DB; border-radius: 8px; font-size: 1rem; resize: vertical;"></textarea>
                            </div>
                            <div class="form-group" style="margin-top: 1rem;">
                                <label>Announcement Type</label>
                                <div
                                    style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-top: 0.5rem;">
                                    <label class="announcement-type-option">
                                        <input type="radio" name="announcementTypeRadio" value="info" checked
                                            style="display: none;">
                                        <div class="type-card type-card-info" data-type="info">
                                            <div class="type-indicator"
                                                style="width: 36px; height: 36px; background: #3B82F6; border-radius: 4px;">
                                            </div>
                                            <span>Info</span>
                                        </div>
                                    </label>
                                    <label class="announcement-type-option">
                                        <input type="radio" name="announcementTypeRadio" value="warning"
                                            style="display: none;">
                                        <div class="type-card type-card-warning" data-type="warning">
                                            <div class="type-indicator"
                                                style="width: 36px; height: 36px; background: #F59E0B; border-radius: 4px;">
                                            </div>
                                            <span>Warning</span>
                                        </div>
                                    </label>
                                    <label class="announcement-type-option">
                                        <input type="radio" name="announcementTypeRadio" value="success"
                                            style="display: none;">
                                        <div class="type-card type-card-success" data-type="success">
                                            <div class="type-indicator"
                                                style="width: 36px; height: 36px; background: #10B981; border-radius: 4px;">
                                            </div>
                                            <span>Success</span>
                                        </div>
                                    </label>
                                </div>
                                <input type="hidden" id="announcementType" value="info" required>
                            </div>
                            <button type="submit" class="button primary" style="margin-top: 1rem;">
                                Create Announcement
                            </button>
                        </form>
                    </div>

                    <!-- Existing Announcements -->
                    <% if (announcements && announcements.length> 0) { %>
                        <div class="announcements-list">
                            <h3>Existing Announcements (<%= announcements.length %>)</h3>
                            <% announcements.forEach(announcement=> { %>
                                <div class="announcement-card announcement-<%= announcement.type %>"
                                    style="margin-top: 1rem;">
                                    <div style="flex: 1;">
                                        <p style="margin: 0; font-weight: 600;">
                                            <%= announcement.message %>
                                        </p>
                                        <small style="color: #6B7280;">
                                            Created by <%= announcement.createdBy %> on <%= new
                                                    Date(announcement.createdAt).toLocaleDateString() %>
                                                    • Status: <strong>
                                                        <%= announcement.isActive ? 'Active' : 'Hidden' %>
                                                    </strong>
                                        </small>
                                    </div>
                                    <div style="display: flex; gap: 0.5rem;">
                                        <button class="button secondary small toggle-announcement-btn"
                                            data-id="<%= announcement._id %>">
                                            <%= announcement.isActive ? 'Hide' : 'Show' %>
                                        </button>
                                        <button class="button danger small delete-announcement-btn"
                                            data-id="<%= announcement._id %>">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                                <% }); %>
                        </div>
                        <% } else { %>
                            <p style="text-align: center; color: #6B7280; padding: 2rem;">No announcements yet. Create
                                one to
                                get started!</p>
                            <% } %>
                </section>

                <!-- User Management Section -->
                <section class="users-section" style="margin-top: 3rem;">
                    <div class="section-header">
                        <h2>All Users</h2>
                        <div class="search-controls">
                            <input type="text" id="userSearch" placeholder="Search users..." class="search-input">
                            <select id="roleFilter" class="filter-select">
                                <option value="">All Roles</option>
                                <option value="admin">Admins</option>
                                <option value="contributor">Contributors</option>
                                <option value="viewer">Viewers</option>
                            </select>
                        </div>
                    </div>

                    <div class="users-grid">
                        <% users.forEach(currentUser=> { %>
                            <div class="user-card" data-user-id="<%= currentUser.userid %>"
                                data-role="<%= currentUser.role %>"
                                data-name="<%= (currentUser.firstname + ' ' + currentUser.lastname).toLowerCase() %>"
                                data-email="<%= currentUser.email.toLowerCase() %>">
                                <div class="user-header">
                                    <div class="user-avatar">
                                        <%= currentUser.firstname.charAt(0).toUpperCase() %>
                                            <%= currentUser.lastname.charAt(0).toUpperCase() %>
                                    </div>
                                    <div class="user-info">
                                        <h3>
                                            <%= currentUser.firstname %>
                                                <%= currentUser.lastname %>
                                        </h3>
                                        <p class="user-email">
                                            <%= currentUser.email %>
                                        </p>
                                        <p class="user-id">@<%= currentUser.userid %>
                                        </p>
                                    </div>
                                </div>

                                <div class="user-details">
                                    <div class="user-meta">
                                        <div class="meta-item">
                                            <strong>Role:</strong>
                                            <span class="user-role role-<%= currentUser.role %>">
                                                <%= currentUser.role %>
                                            </span>
                                        </div>
                                        <div class="meta-item">
                                            <strong>Joined:</strong>
                                            <%= currentUser.createdAt ? new
                                                Date(currentUser.createdAt).toLocaleDateString() : 'Unknown' %>
                                        </div>
                                    </div>
                                </div>

                                <div class="user-actions">
                                    <div class="role-controls">
                                        <label for="role-<%= currentUser.userid %>">Change Role:</label>
                                        <% if (currentUser.isProtected) { %>
                                            <select id="role-<%= currentUser.userid %>" class="role-select" disabled>
                                                <option value="<%= currentUser.role %>" selected>
                                                    <%= currentUser.role %>
                                                </option>
                                            </select>
                                            <button class="button primary small disabled" disabled>Update</button>
                                            <% } else { %>
                                                <select id="role-<%= currentUser.userid %>" class="role-select"
                                                    data-user-id="<%= currentUser.userid %>">
                                                    <option value="admin" <%=currentUser.role==='admin' ? 'selected'
                                                        : '' %>
                                                        >Admin</option>
                                                    <option value="contributor" <%=currentUser.role==='contributor'
                                                        ? 'selected' : '' %>
                                                        >Contributor</option>
                                                    <option value="viewer" <%=currentUser.role==='viewer' ? 'selected'
                                                        : '' %>
                                                        >Viewer</option>
                                                </select>
                                                <button class="button primary small update-role-btn"
                                                    data-user-id="<%= currentUser.userid %>">
                                                    Update
                                                </button>
                                                <% } %>
                                    </div>

                                    <div class="action-buttons">
                                        <% if (user.userid !==currentUser.userid) { %>
                                            <% if (currentUser.isProtected) { %>
                                                <span class="protected-badge"><img src="/images/icons/shield-check.png" alt="Protected" style="width: 36px; height: 36px; vertical-align: middle; margin-right: 10px;" /> Protected</span>
                                                <% } else { %>
                                                    <button class="button danger small delete-btn"
                                                        data-user-id="<%= currentUser.userid %>">
                                                        Delete User
                                                    </button>
                                                    <% } %>
                                                        <% } else { %>
                                                            <span class="current-user-badge">Current User</span>
                                                            <% } %>
                                    </div>
                                </div>
                            </div>
                            <% }); %>
                    </div>
                </section>
    </main>

    <!-- Confirmation Modal -->
    <div id="confirmModal" class="modal" style="display: none;">
        <div class="modal-content">
            <h3 id="modalTitle">Confirm Action</h3>
            <p id="modalMessage" style="color: var(--color-text-light);">Are you sure you want to perform this action?
            </p>
            <div class="modal-actions">
                <button id="confirmBtn" class="button danger">Confirm</button>
                <button id="cancelBtn" class="button secondary">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Notification System
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'success' ? '#10B981' : '#EF4444'};
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                font-weight: 500;
                z-index: 10000;
                animation: slideIn 0.3s ease;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);

            // Add animation
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);

            setTimeout(() => {
                notification.style.transition = 'all 0.3s ease';
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Confirmation Modal
        function showConfirmModal(title, message, onConfirm) {
            if (confirm(`${title}\n\n${message}`)) {
                onConfirm();
            }
        }

        // Resolve report function - GLOBAL SCOPE so onclick can find it
        async function resolveReport(reportId, action) {
            const actionText = action === 'delete' ? 'delete this file' : 'dismiss this report';
            if (!confirm(`Are you sure you want to ${actionText}?`)) {
                return;
            }

            try {
                const response = await fetch('/api/resolve-report', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        reportId: reportId,
                        action: action
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    const successMessage = action === 'delete' ? 'File deleted successfully!' : 'Report dismissed successfully!';
                    showNotification(successMessage, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showNotification('Error: ' + result.error, 'error');
                }
            } catch (error) {
                showNotification('Error resolving report', 'error');
                console.error('Report resolution error:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Search and filter
            const searchInput = document.getElementById('userSearch');
            const roleFilter = document.getElementById('roleFilter');

            function filterUsers() {
                const searchTerm = searchInput.value.toLowerCase();
                const roleValue = roleFilter.value;
                const userCards = document.querySelectorAll('.user-card');

                userCards.forEach(card => {
                    const name = card.dataset.name;
                    const email = card.dataset.email;
                    const role = card.dataset.role;

                    const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
                    const matchesRole = !roleValue || role === roleValue;

                    card.style.display = (matchesSearch && matchesRole) ? 'block' : 'none';
                });
            }

            searchInput.addEventListener('input', filterUsers);
            roleFilter.addEventListener('change', filterUsers);

            // Update user role
            document.querySelectorAll('.update-role-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    const userId = this.dataset.userId;
                    const roleSelect = document.getElementById(`role-${userId}`);
                    const newRole = roleSelect.value;

                    try {
                        const response = await fetch('/api/update-user-role', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ userId, newRole })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('User role updated successfully!', 'success');
                            const userCard = document.querySelector(`[data-user-id="${userId}"]`);
                            const roleSpan = userCard.querySelector('.user-role');
                            roleSpan.textContent = newRole;
                            roleSpan.className = `user-role role-${newRole}`;
                            userCard.dataset.role = newRole;
                            updateStatistics();
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error updating user role', 'error');
                    }
                });
            });

            // Delete user
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const userId = this.dataset.userId;
                    showConfirmModal(
                        'Delete User',
                        'Are you sure you want to delete this user? This will permanently delete their account and all their files.',
                        () => performDeleteUser(userId)
                    );
                });
            });

            function showConfirmModal(title, message, onConfirm) {
                const modal = document.getElementById('confirmModal');
                document.getElementById('modalTitle').textContent = title;
                document.getElementById('modalMessage').textContent = message;
                modal.style.display = 'flex';

                const confirmBtn = document.getElementById('confirmBtn');
                const cancelBtn = document.getElementById('cancelBtn');

                const newConfirm = confirmBtn.cloneNode(true);
                const newCancel = cancelBtn.cloneNode(true);
                confirmBtn.replaceWith(newConfirm);
                cancelBtn.replaceWith(newCancel);

                document.getElementById('confirmBtn').addEventListener('click', () => {
                    modal.style.display = 'none';
                    onConfirm();
                });

                document.getElementById('cancelBtn').addEventListener('click', () => {
                    modal.style.display = 'none';
                });
            }

            async function performDeleteUser(userId) {
                try {
                    const response = await fetch('/api/delete-user', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showNotification('User deleted successfully!', 'success');
                        document.querySelector(`[data-user-id="${userId}"]`).remove();
                        updateStatistics();
                    } else {
                        showNotification('Error: ' + result.error, 'error');
                    }
                } catch (error) {
                    showNotification('Error deleting user', 'error');
                }
            }

            function updateStatistics() {
                const userCards = document.querySelectorAll('.user-card');
                let adminCount = 0, contributorCount = 0, viewerCount = 0;

                userCards.forEach(card => {
                    const role = card.dataset.role;
                    if (role === 'admin') adminCount++;
                    else if (role === 'contributor') contributorCount++;
                    else if (role === 'viewer') viewerCount++;
                });

                document.getElementById('totalUsers').textContent = userCards.length;
                document.getElementById('adminCount').textContent = adminCount;
                document.getElementById('contributorCount').textContent = contributorCount;
                document.getElementById('viewerCount').textContent = viewerCount;
            }

            // Announcement Type Card Selection
            document.querySelectorAll('.type-card').forEach(card => {
                card.addEventListener('click', function () {
                    const type = this.dataset.type;
                    document.getElementById('announcementType').value = type;

                    // Update radio button
                    const radio = this.previousElementSibling;
                    if (radio && radio.type === 'radio') {
                        radio.checked = true;
                    }
                });
            });

            // Announcement Form Submission
            const announcementForm = document.getElementById('announcementForm');
            if (announcementForm) {
                announcementForm.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    const message = document.getElementById('announcementMessage').value;
                    const type = document.getElementById('announcementType').value;

                    try {
                        const response = await fetch('/api/create-announcement', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ message, type })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('Announcement created successfully!', 'success');

                            // Clear form
                            document.getElementById('announcementMessage').value = '';

                            // Wait a moment for user to see notification, then reload
                            setTimeout(() => {
                                window.location.reload();
                            }, 800);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error creating announcement', 'error');
                    }
                });
            }

            // Toggle Announcement
            document.querySelectorAll('.toggle-announcement-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    const id = this.dataset.id;

                    try {
                        const response = await fetch('/api/toggle-announcement', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ announcementId: id })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('Announcement updated!', 'success');

                            // Reload page to show updated state
                            setTimeout(() => {
                                window.location.reload();
                            }, 800);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error toggling announcement', 'error');
                    }
                });
            });

            // Delete Announcement
            document.querySelectorAll('.delete-announcement-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    if (!confirm('Are you sure you want to delete this announcement?')) return;

                    const id = this.dataset.id;

                    try {
                        const response = await fetch('/api/delete-announcement', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ announcementId: id })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('Announcement deleted!', 'success');

                            // Reload page to show updated list
                            setTimeout(() => {
                                window.location.reload();
                            }, 800);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error deleting announcement', 'error');
                    }
                });
            });
        });
    </script>
    <%- include('partials/footer') %>
</body>

</html>
