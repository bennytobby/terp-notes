<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        <%= title %>
    </title>
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="stylesheet" href="/styles/main.css" />
</head>

<body>
    <header class="topbar">
        <h2><a href="/dashboard" style="text-decoration: none; color: inherit; display: flex; align-items: center; cursor: pointer; transition: opacity 0.2s ease;" onmouseover="this.style.opacity='0.8'" onmouseout="this.style.opacity='1'">
            <img src="/logo.png" alt="Terp Notes Logo" style="width: 32px; height: 32px; vertical-align: middle; margin-right: 8px; pointer-events: none;" />
            Terp Notes - Admin
        </a></h2>
        <div class="user-info">
            Welcome, <strong>
                <%= user.firstname %>
            </strong>
            <span class="user-role role-<%= user.role %>">
                <%= user.role %>
            </span> |
            <a href="/dashboard" class="logout-btn">Dashboard</a> |
            <a href="/profile" class="logout-btn">My Profile</a> |
            <button onclick="showQuickLogout()" class="logout-btn" style="background: none; border: none; color: inherit; cursor: pointer; text-decoration: underline;">Logout</button>
        </div>
    </header>

    <main class="container">
        <!-- Narrow Screen Mobile Switch Button -->
        <div id="narrowScreenMobileSwitch" style="display: none; background: #FEF3C7; border: 1px solid #F59E0B; border-radius: 8px; padding: 0.75rem 1rem; margin-bottom: 1rem; text-align: center;">
            <div style="color: #92400E; font-size: 0.875rem; margin-bottom: 0.5rem;">
                ðŸ“± <strong>Narrow Screen Detected</strong>
            </div>
            <p style="color: #92400E; font-size: 0.8rem; margin: 0 0 0.75rem 0;">
                Your screen is narrow. Switch to our mobile-optimized view for a better experience.
            </p>
            <a href="/mobile/admin" style="background: #F59E0B; color: white; padding: 0.5rem 1rem; border-radius: 6px; text-decoration: none; font-size: 0.8rem; font-weight: 600; display: inline-block; transition: background 0.2s ease;" onmouseover="this.style.background='#D97706'" onmouseout="this.style.background='#F59E0B'">
                Switch to Mobile View
            </a>
        </div>

        <div class="admin-header">
            <h1>Admin Dashboard</h1>
            <p>Manage users, review reported files, moderate content, and post announcements</p>
        </div>

        <!-- Platform Statistics -->
        <div class="admin-stats">
            <div class="admin-stat-card">
                <h3 id="totalUsers">
                    <%= users.length %>
                </h3>
                <p>Total Users</p>
            </div>
            <div class="admin-stat-card">
                <h3 id="adminCount">
                    <%= users.filter(u=> u.role === 'admin').length %>
                </h3>
                <p>Admins</p>
            </div>
            <div class="admin-stat-card">
                <h3 id="contributorCount">
                    <%= users.filter(u=> u.role === 'contributor').length %>
                </h3>
                <p>Contributors</p>
            </div>
            <div class="admin-stat-card">
                <h3 id="viewerCount">
                    <%= users.filter(u=> u.role === 'viewer').length %>
                </h3>
                <p>Viewers</p>
            </div>
        </div>

        <!-- Reported Files Section (Critical Alerts) -->
        <% if (reports && reports.length> 0) { %>
            <section class="reports-section" style="margin-top: 3rem;">
                <h2>Reported Files (<%= reports.length %>) - Needs Review</h2>
                <div class="reports-grid">
                    <% reports.forEach(report=> { %>
                        <div class="report-card">
                            <div class="report-header">
                                <h3 style="margin-bottom: 0.5rem;">
                                    <%= report.originalName %>
                                </h3>
                            </div>
                            <div class="report-reason-box">
                                <strong>Reason:</strong>
                                <%= report.reason %>
                            </div>
                            <div class="report-details">
                                <p><strong>Reported by:</strong>
                                    <%= report.reportedBy %>
                                </p>
                                <p><strong>File uploader:</strong>
                                    <%= report.fileUploader %>
                                </p>
                                <p><strong>Class:</strong>
                                    <%= report.classCode %>
                                </p>
                                <p><strong>Date:</strong>
                                    <%= new Date(report.reportedAt).toLocaleString() %>
                                </p>
                                <% if (report.details) { %>
                                    <p><strong>Additional details:</strong>
                                        <%= report.details %>
                                    </p>
                                    <% } %>
                            </div>
                            <div class="report-actions">
                                <button class="button danger report-delete-btn"
                                    onclick="resolveReport('<%= report._id %>', 'delete')">
                                    Delete File
                                </button>
                                <button class="button report-dismiss-btn"
                                    onclick="resolveReport('<%= report._id %>', 'dismiss')">
                                    Dismiss Report
                                </button>
                                <a href="/download/<%= encodeURIComponent(report.filename) %>"
                                    class="button report-review-btn" target="_blank" rel="noopener noreferrer">
                                    Review File
                                </a>
                            </div>
                        </div>
                        <% }); %>
                </div>
            </section>
            <% } %>

                <!-- Announcements Management Section -->
                <section class="announcements-section">
                    <h2>Announcements</h2>
                    <p style="color: #6B7280; margin-bottom: 1.5rem;">Create platform-wide announcements visible on all
                        user
                        dashboards</p>

                    <!-- Create Announcement Form -->
                    <div
                        style="background: white; padding: 2rem; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); margin-bottom: 2rem;">
                        <h3>Create New Announcement</h3>
                        <form id="announcementForm" style="margin-top: 1rem;">
                            <div class="form-group">
                                <label for="announcementMessage">Message</label>
                                <textarea id="announcementMessage" required rows="3"
                                    placeholder="Enter announcement message..."
                                    style="width: 100%; padding: 0.75rem; border: 1px solid #D1D5DB; border-radius: 8px; font-size: 1rem; resize: vertical;"></textarea>
                            </div>
                            <div class="form-group" style="margin-top: 1rem;">
                                <label>Announcement Type</label>
                                <div
                                    style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-top: 0.5rem;">
                                    <label class="announcement-type-option">
                                        <input type="radio" name="announcementTypeRadio" value="info" checked
                                            style="display: none;">
                                        <div class="type-card type-card-info" data-type="info">
                                            <div class="type-indicator"
                                                style="width: 36px; height: 36px; background: #3B82F6; border-radius: 4px;">
                                            </div>
                                            <span>Info</span>
                                        </div>
                                    </label>
                                    <label class="announcement-type-option">
                                        <input type="radio" name="announcementTypeRadio" value="warning"
                                            style="display: none;">
                                        <div class="type-card type-card-warning" data-type="warning">
                                            <div class="type-indicator"
                                                style="width: 36px; height: 36px; background: #F59E0B; border-radius: 4px;">
                                            </div>
                                            <span>Warning</span>
                                        </div>
                                    </label>
                                    <label class="announcement-type-option">
                                        <input type="radio" name="announcementTypeRadio" value="success"
                                            style="display: none;">
                                        <div class="type-card type-card-success" data-type="success">
                                            <div class="type-indicator"
                                                style="width: 36px; height: 36px; background: #10B981; border-radius: 4px;">
                                            </div>
                                            <span>Success</span>
                                        </div>
                                    </label>
                                </div>
                                <input type="hidden" id="announcementType" value="info" required>
                            </div>
                            <button type="submit" id="createAnnouncementBtn" class="button info" style="margin-top: 1rem;">
                                Create Announcement
                            </button>
                        </form>
                    </div>

                    <!-- Existing Announcements -->
                    <% if (announcements && announcements.length> 0) { %>
                        <div class="announcements-list">
                            <h3>Existing Announcements (<%= announcements.length %>)</h3>
                            <% announcements.forEach(announcement=> { %>
                                <div class="announcement-card announcement-<%= announcement.type %>"
                                    style="margin-top: 1rem;">
                                    <div style="flex: 1;">
                                        <p style="margin: 0; font-weight: 600;">
                                            <%= announcement.message %>
                                        </p>
                                        <small style="color: #6B7280;">
                                            Created by <%= announcement.createdBy %> on <%= new
                                                    Date(announcement.createdAt).toLocaleDateString() %>
                                                    â€¢ Status: <strong>
                                                        <%= announcement.isActive ? 'Active' : 'Hidden' %>
                                                    </strong>
                                        </small>
                                    </div>
                                    <div style="display: flex; gap: 0.5rem;">
                                        <button class="button primary small edit-announcement-btn"
                                            data-id="<%= announcement._id %>"
                                            data-message="<%= announcement.message %>"
                                            data-type="<%= announcement.type %>">
                                            Edit
                                        </button>
                                        <button class="button secondary small toggle-announcement-btn"
                                            data-id="<%= announcement._id %>">
                                            <%= announcement.isActive ? 'Hide' : 'Show' %>
                                        </button>
                                        <button class="button danger small delete-announcement-btn"
                                            data-id="<%= announcement._id %>">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                                <% }); %>
                        </div>
                        <% } else { %>
                            <p style="text-align: center; color: #6B7280; padding: 2rem;">No announcements yet. Create
                                one to
                                get started!</p>
                            <% } %>
                </section>

                <!-- User Management Section -->
                <section class="users-section" style="margin-top: 3rem;">
                    <div class="section-header">
                        <h2>All Users</h2>
                        <div class="search-controls">
                            <input type="text" id="userSearch" placeholder="Search users..." class="search-input">
                            <select id="roleFilter" class="filter-select">
                                <option value="">All Roles</option>
                                <option value="admin">Admins</option>
                                <option value="contributor">Contributors</option>
                                <option value="viewer">Viewers</option>
                            </select>
                        </div>
                    </div>

                    <div class="users-grid">
                        <% users.forEach(currentUser=> { %>
                            <div class="user-card" data-user-id="<%= currentUser.userid %>"
                                data-role="<%= currentUser.role %>"
                                data-name="<%= (currentUser.firstname + ' ' + currentUser.lastname).toLowerCase() %>"
                                data-email="<%= currentUser.email.toLowerCase() %>">
                                <div class="user-header">
                                    <div class="user-avatar">
                                        <%= currentUser.firstname.charAt(0).toUpperCase() %>
                                            <%= currentUser.lastname.charAt(0).toUpperCase() %>
                                    </div>
                                    <div class="user-info">
                                        <h3>
                                            <%= currentUser.firstname %>
                                                <%= currentUser.lastname %>
                                        </h3>
                                        <p class="user-email">
                                            <%= currentUser.email %>
                                        </p>
                                        <p class="user-id">@<%= currentUser.userid %>
                                        </p>
                                    </div>
                                </div>

                                <div class="user-details">
                                    <div class="user-meta">
                                        <div class="meta-item">
                                            <strong>Role:</strong>
                                            <span class="user-role role-<%= currentUser.role %>">
                                                <%= currentUser.role %>
                                            </span>
                                            <% if (currentUser.analytics.isCurrentlyBanned) { %>
                                                <span class="ban-badge" style="background: #EF4444; color: white; padding: 2px 8px; border-radius: 4px; font-size: 0.75rem; margin-left: 8px;">
                                                    BANNED
                                                </span>
                                            <% } %>
                                        </div>
                                        <div class="meta-item">
                                            <strong>Joined:</strong>
                                            <%= currentUser.createdAt ? new Date(currentUser.createdAt).toLocaleDateString() : 'Unknown' %>
                                            <small style="color: #6B7280;">(<%= currentUser.analytics.accountAge %> days ago)</small>
                                        </div>
                                        <div class="meta-item">
                                            <strong>Files:</strong>
                                            <%= currentUser.analytics.filesUploaded %> uploaded, <%= currentUser.analytics.totalDownloads %> downloads
                                        </div>
                                        <div class="meta-item">
                                            <strong>Reports:</strong>
                                            <%= currentUser.analytics.filesReported %> made, <%= currentUser.analytics.filesOfUserReported %> against them
                                        </div>
                                        <% if (currentUser.analytics.banHistoryCount > 0) { %>
                                            <div class="meta-item">
                                                <strong>Ban History:</strong>
                                                <%= currentUser.analytics.banHistoryCount %> incident(s)
                                                <% if (currentUser.analytics.lastBanReason) { %>
                                                    <small style="color: #EF4444;">(Last: <%= currentUser.analytics.lastBanReason %>)</small>
                                                <% } %>
                                            </div>
                                        <% } %>
                                        <% if (currentUser.analytics.latestUpload) { %>
                                            <div class="meta-item">
                                                <strong>Latest Activity:</strong>
                                                <%= currentUser.analytics.latestUpload.originalName %>
                                                <small style="color: #6B7280;">(<%= new Date(currentUser.analytics.latestUpload.uploadDate).toLocaleDateString() %>)</small>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>

                                <div class="user-actions">
                                    <div class="role-controls">
                                        <label for="role-<%= currentUser.userid %>">Change Role:</label>
                                        <% if (currentUser.isProtected) { %>
                                            <select id="role-<%= currentUser.userid %>" class="role-select" disabled>
                                                <option value="<%= currentUser.role %>" selected>
                                                    <%= currentUser.role %>
                                                </option>
                                            </select>
                                            <button class="button primary small disabled" disabled>Update</button>
                                            <% } else { %>
                                                <select id="role-<%= currentUser.userid %>" class="role-select"
                                                    data-user-id="<%= currentUser.userid %>">
                                                    <option value="admin" <%=currentUser.role==='admin' ? 'selected'
                                                        : '' %>
                                                        >Admin</option>
                                                    <option value="contributor" <%=currentUser.role==='contributor'
                                                        ? 'selected' : '' %>
                                                        >Contributor</option>
                                                    <option value="viewer" <%=currentUser.role==='viewer' ? 'selected'
                                                        : '' %>
                                                        >Viewer</option>
                                                </select>
                                                <button class="button primary small update-role-btn"
                                                    data-user-id="<%= currentUser.userid %>">
                                                    Update
                                                </button>
                                                <% } %>
                                    </div>

                                    <div class="action-buttons">
                                        <% if (user.userid !==currentUser.userid) { %>
                                            <% if (currentUser.isProtected) { %>
                                                <span class="protected-badge"><img src="/images/icons/shield-check.png" alt="Protected" style="width: 36px; height: 36px; vertical-align: middle; margin-right: 10px;" /> Protected</span>
                                            <% } else { %>
                                                <!-- Ban/Unban Controls -->
                                                <% if (currentUser.analytics.isCurrentlyBanned) { %>
                                                    <button class="button success small unban-btn"
                                                        data-user-id="<%= currentUser.userid %>">
                                                        Unban User
                                                    </button>
                                                <% } else { %>
                                                    <button class="button warning small ban-btn"
                                                        data-user-id="<%= currentUser.userid %>"
                                                        data-user-name="<%= currentUser.firstname %> <%= currentUser.lastname %>">
                                                        Ban User
                                                    </button>
                                                <% } %>

                                                <button class="button danger small delete-btn"
                                                    data-user-id="<%= currentUser.userid %>">
                                                    Delete User
                                                </button>
                                            <% } %>
                                        <% } else { %>
                                            <span class="current-user-badge">Current User</span>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <% }); %>
                    </div>
                </section>
    </main>

    <!-- Confirmation Modal -->
    <div id="confirmModal" class="modal" style="display: none;">
        <div class="modal-content">
            <h3 id="modalTitle">Confirm Action</h3>
            <p id="modalMessage" style="color: var(--color-text-light);">Are you sure you want to perform this action?
            </p>
            <div class="modal-actions">
                <button id="confirmBtn" class="button danger">Confirm</button>
                <button id="cancelBtn" class="button secondary">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Ban User Modal -->
    <div id="banModal" class="modal" style="display: none;">
        <div class="modal-content" style="max-width: 500px;">
            <h3>Ban User</h3>
            <p id="banUserInfo" style="color: var(--color-text-light); margin-bottom: 1.5rem;"></p>

            <div style="margin-bottom: 1rem;">
                <label for="banType" style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Ban Type:</label>
                <select id="banType" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;">
                    <option value="timed">Temporary Ban</option>
                    <option value="permanent">Permanent Ban</option>
                </select>
            </div>

            <div id="banDurationSection" style="margin-bottom: 1rem;">
                <label for="banDuration" style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Ban Duration:</label>
                <select id="banDuration" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;">
                    <option value="24">1 Day</option>
                    <option value="72">3 Days</option>
                    <option value="168">1 Week</option>
                    <option value="336">2 Weeks</option>
                    <option value="720">1 Month</option>
                </select>
            </div>

            <div style="margin-bottom: 1.5rem;">
                <label for="banReason" style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Ban Reason: <span style="color: #dc2626;">*</span></label>
                <textarea id="banReason" placeholder="Enter the reason for banning this user..." style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px; min-height: 80px; resize: vertical;"></textarea>
            </div>

            <div class="modal-actions">
                <button id="banConfirmBtn" class="button danger">Ban User</button>
                <button id="banCancelBtn" class="button secondary">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Notification System
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'success' ? '#10B981' : '#EF4444'};
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                font-weight: 500;
                z-index: 10000;
                animation: slideIn 0.3s ease;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);

            // Add animation
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);

            setTimeout(() => {
                notification.style.transition = 'all 0.3s ease';
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Confirmation Modal
        async function showConfirmModal(title, message, onConfirm) {
            const confirmed = await customConfirm(`${title}\n\n${message}`, title);
            if (confirmed) {
                onConfirm();
            }
        }

        // Resolve report function - GLOBAL SCOPE so onclick can find it
        async function resolveReport(reportId, action) {
            const actionText = action === 'delete' ? 'delete this file' : 'dismiss this report';
            const confirmed = await customConfirm(`Are you sure you want to ${actionText}?`, 'Confirm Action');
            if (!confirmed) {
                return;
            }

            try {
                const response = await fetch('/api/resolve-report', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        reportId: reportId,
                        action: action
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    const successMessage = action === 'delete' ? 'File deleted successfully!' : 'Report dismissed successfully!';
                    showNotification(successMessage, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showNotification('Error: ' + result.error, 'error');
                }
            } catch (error) {
                showNotification('Error resolving report', 'error');
                console.error('Report resolution error:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Check for narrow screens and show mobile switch button
            function checkScreenWidth() {
                const narrowScreenSwitch = document.getElementById('narrowScreenMobileSwitch');
                if (narrowScreenSwitch && window.innerWidth <= 768) {
                    // Only show if not already on mobile route
                    if (!window.location.pathname.startsWith('/mobile/')) {
                        narrowScreenSwitch.style.display = 'block';
                    }
                } else if (narrowScreenSwitch) {
                    narrowScreenSwitch.style.display = 'none';
                }
            }

            // Check on load
            checkScreenWidth();

            // Check on resize
            window.addEventListener('resize', checkScreenWidth);

            // Search and filter
            const searchInput = document.getElementById('userSearch');
            const roleFilter = document.getElementById('roleFilter');

            function filterUsers() {
                const searchTerm = searchInput.value.toLowerCase();
                const roleValue = roleFilter.value;
                const userCards = document.querySelectorAll('.user-card');

                userCards.forEach(card => {
                    const name = card.dataset.name;
                    const email = card.dataset.email;
                    const role = card.dataset.role;

                    const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
                    const matchesRole = !roleValue || role === roleValue;

                    card.style.display = (matchesSearch && matchesRole) ? 'block' : 'none';
                });
            }

            searchInput.addEventListener('input', filterUsers);
            roleFilter.addEventListener('change', filterUsers);

            // Update user role
            document.querySelectorAll('.update-role-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    const userId = this.dataset.userId;
                    const roleSelect = document.getElementById(`role-${userId}`);
                    const newRole = roleSelect.value;

                    try {
                        const response = await fetch('/api/update-user-role', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ userId, newRole })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('User role updated successfully!', 'success');
                            const userCard = document.querySelector(`[data-user-id="${userId}"]`);
                            const roleSpan = userCard.querySelector('.user-role');
                            roleSpan.textContent = newRole;
                            roleSpan.className = `user-role role-${newRole}`;
                            userCard.dataset.role = newRole;
                            updateStatistics();
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error updating user role', 'error');
                    }
                });
            });

            // Delete user
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const userId = this.dataset.userId;
                    showConfirmModal(
                        'Delete User',
                        'Are you sure you want to delete this user? This will permanently delete their account and all their files.',
                        () => performDeleteUser(userId)
                    );
                });
            });

            function showConfirmModal(title, message, onConfirm) {
                const modal = document.getElementById('confirmModal');
                document.getElementById('modalTitle').textContent = title;
                document.getElementById('modalMessage').textContent = message;
                modal.style.display = 'flex';

                const confirmBtn = document.getElementById('confirmBtn');
                const cancelBtn = document.getElementById('cancelBtn');

                const newConfirm = confirmBtn.cloneNode(true);
                const newCancel = cancelBtn.cloneNode(true);
                confirmBtn.replaceWith(newConfirm);
                cancelBtn.replaceWith(newCancel);

                document.getElementById('confirmBtn').addEventListener('click', () => {
                    modal.style.display = 'none';
                    onConfirm();
                });

                document.getElementById('cancelBtn').addEventListener('click', () => {
                    modal.style.display = 'none';
                });
            }

            async function performDeleteUser(userId) {
                try {
                    const response = await fetch('/api/delete-user', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showNotification('User deleted successfully!', 'success');
                        document.querySelector(`[data-user-id="${userId}"]`).remove();
                        updateStatistics();
                    } else {
                        showNotification('Error: ' + result.error, 'error');
                    }
                } catch (error) {
                    showNotification('Error deleting user', 'error');
                }
            }

            function updateStatistics() {
                const userCards = document.querySelectorAll('.user-card');
                let adminCount = 0, contributorCount = 0, viewerCount = 0;

                userCards.forEach(card => {
                    const role = card.dataset.role;
                    if (role === 'admin') adminCount++;
                    else if (role === 'contributor') contributorCount++;
                    else if (role === 'viewer') viewerCount++;
                });

                document.getElementById('totalUsers').textContent = userCards.length;
                document.getElementById('adminCount').textContent = adminCount;
                document.getElementById('contributorCount').textContent = contributorCount;
                document.getElementById('viewerCount').textContent = viewerCount;
            }

            // Announcement Type Card Selection
            document.querySelectorAll('.type-card').forEach(card => {
                card.addEventListener('click', function () {
                    const type = this.dataset.type;
                    document.getElementById('announcementType').value = type;

                    // Update radio button
                    const radio = this.previousElementSibling;
                    if (radio && radio.type === 'radio') {
                        radio.checked = true;
                    }

                    // Update button color based on announcement type
                    const createBtn = document.getElementById('createAnnouncementBtn');
                    if (createBtn) {
                        // Remove all type classes
                        createBtn.classList.remove('info', 'warning', 'success');
                        // Add the appropriate class based on type
                        createBtn.classList.add(type);
                    }
                });
            });

            // Announcement Form Submission
            const announcementForm = document.getElementById('announcementForm');
            if (announcementForm) {
                announcementForm.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    const message = document.getElementById('announcementMessage').value;
                    const type = document.getElementById('announcementType').value;

                    try {
                        const response = await fetch('/api/create-announcement', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ message, type })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('Announcement created successfully!', 'success');

                            // Clear form
                            document.getElementById('announcementMessage').value = '';

                            // Wait a moment for user to see notification, then reload
                            setTimeout(() => {
                                window.location.reload();
                            }, 800);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error creating announcement', 'error');
                    }
                });
            }

            // Toggle Announcement
            document.querySelectorAll('.toggle-announcement-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    const id = this.dataset.id;

                    try {
                        const response = await fetch('/api/toggle-announcement', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ announcementId: id })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('Announcement updated!', 'success');

                            // Reload page to show updated state
                            setTimeout(() => {
                                window.location.reload();
                            }, 800);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error toggling announcement', 'error');
                    }
                });
            });

            // Edit announcement form submission
            const editAnnouncementForm = document.getElementById('editAnnouncementForm');
            if (editAnnouncementForm) {
                editAnnouncementForm.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    const modal = document.getElementById('editAnnouncementModal');
                    const announcementId = modal.dataset.announcementId;
                    const message = document.getElementById('editAnnouncementMessage').value;
                    const type = document.getElementById('editAnnouncementType').value;

                    try {
                        const response = await fetch('/api/edit-announcement', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                announcementId: announcementId,
                                message: message,
                                type: type
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('Announcement updated successfully!', 'success');
                            closeEditAnnouncement();

                            // Reload page to show updated announcement
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error updating announcement', 'error');
                    }
                });
            }

            // Edit announcement type selection
            document.querySelectorAll('.edit-announcement-type-option').forEach(option => {
                const card = option.querySelector('.type-card');
                card.addEventListener('click', function () {
                    const type = this.dataset.type;
                    document.getElementById('editAnnouncementType').value = type;

                    // Update radio button
                    const radio = option.querySelector('input[type="radio"]');
                    if (radio) {
                        radio.checked = true;
                    }

                    // Update visual selection
                    document.querySelectorAll('.edit-announcement-type-option .type-card').forEach(c => {
                        c.style.borderColor = '#E5E7EB';
                        c.style.backgroundColor = 'white';
                    });

                    this.style.borderColor = '#3B82F6';
                    this.style.backgroundColor = '#F0F9FF';
                });
            });

            // Delete Announcement
            // Edit Announcement
            document.querySelectorAll('.edit-announcement-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const id = this.dataset.id;
                    const message = this.dataset.message;
                    const type = this.dataset.type;

                    showEditAnnouncement(id, message, type);
                });
            });

            document.querySelectorAll('.delete-announcement-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    const confirmed = await customConfirm('Are you sure you want to delete this announcement?', 'Delete Announcement');
                    if (!confirmed) return;

                    const id = this.dataset.id;

                    try {
                        const response = await fetch('/api/delete-announcement', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ announcementId: id })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('Announcement deleted!', 'success');

                            // Reload page to show updated list
                            setTimeout(() => {
                                window.location.reload();
                            }, 800);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error deleting announcement', 'error');
                    }
                });
            });

            // Ban User Functionality
            document.querySelectorAll('.ban-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    const userId = this.dataset.userId;
                    const userName = this.dataset.userName;

                    showBanModal(userId, userName);
                });
            });

            // Show Ban Modal
            function showBanModal(userId, userName) {
                const modal = document.getElementById('banModal');
                const userInfo = document.getElementById('banUserInfo');
                const banType = document.getElementById('banType');
                const banDurationSection = document.getElementById('banDurationSection');
                const banDuration = document.getElementById('banDuration');
                const banReason = document.getElementById('banReason');

                // Reset form
                banType.value = 'timed';
                banDuration.value = '24';
                banReason.value = '';
                banDurationSection.style.display = 'block';

                // Set user info
                userInfo.textContent = `You are about to ban: ${userName}`;

                // Show modal
                modal.style.display = 'flex';

                // Handle ban type change
                banType.addEventListener('change', function() {
                    if (this.value === 'permanent') {
                        banDurationSection.style.display = 'none';
                    } else {
                        banDurationSection.style.display = 'block';
                    }
                });

                // Handle ban confirmation
                document.getElementById('banConfirmBtn').onclick = async function() {
                    const selectedBanType = banType.value;
                    const selectedDuration = banDuration.value;
                    const reason = banReason.value.trim();

                    if (!reason) {
                        showNotification('Ban reason is required!', 'error');
                        return;
                    }

                    const confirmed = await customConfirm(
                        `Are you sure you want to ban ${userName}?\n\nType: ${selectedBanType === 'timed' ? 'Temporary' : 'Permanent'}\n${selectedBanType === 'timed' ? `Duration: ${getDurationText(selectedDuration)}` : ''}\nReason: ${reason}`,
                        'Confirm Ban'
                    );
                    if (!confirmed) {
                        return;
                    }

                    try {
                        const response = await fetch('/api/ban-user', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                userId,
                                banType: selectedBanType,
                                banReason: reason,
                                banDuration: selectedBanType === 'timed' ? parseInt(selectedDuration) : null
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification(`${userName} has been banned successfully!`, 'success');
                            modal.style.display = 'none';
                            setTimeout(() => window.location.reload(), 1000);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error banning user', 'error');
                    }
                };

                // Handle cancel
                document.getElementById('banCancelBtn').onclick = function() {
                    modal.style.display = 'none';
                };
            }

            // Helper function to get duration text
            function getDurationText(hours) {
                const durationMap = {
                    '24': '1 Day',
                    '72': '3 Days',
                    '168': '1 Week',
                    '336': '2 Weeks',
                    '720': '1 Month'
                };
                return durationMap[hours] || `${hours} hours`;
            }

            // Unban User Functionality
            document.querySelectorAll('.unban-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    const userId = this.dataset.userId;

                    const confirmed = await customConfirm('Are you sure you want to unban this user?', 'Confirm Unban');
                    if (!confirmed) {
                        return;
                    }

                    try {
                        const response = await fetch('/api/unban-user', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ userId })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showNotification('User unbanned successfully!', 'success');
                            setTimeout(() => window.location.reload(), 1000);
                        } else {
                            showNotification('Error: ' + result.error, 'error');
                        }
                    } catch (error) {
                        showNotification('Error unbanning user', 'error');
                    }
                });
            });
        });

        // Listen for storage events to detect logout from other tabs
        window.addEventListener('storage', function(e) {
            if (e.key === 'terpnotes_logout' && e.newValue === 'true') {
                // Another tab logged out, redirect to index with cache busting
                window.location.href = '/?loggedout=true&t=' + Date.now();
            }
        });

        // Also check localStorage periodically in case storage events don't fire
        setInterval(function() {
            if (localStorage.getItem('terpnotes_logout') === 'true') {
                window.location.href = '/?loggedout=true&t=' + Date.now();
            }
        }, 1000); // Check every second

        // Quick logout modal functions
        function showQuickLogout() {
            const modal = document.getElementById('quickLogoutModal');
            modal.style.display = 'flex';
            // Add click-outside-to-close functionality
            modal.onclick = function(event) {
                if (event.target === modal) {
                    closeQuickLogout();
                }
            };
        }

        function closeQuickLogout() {
            document.getElementById('quickLogoutModal').style.display = 'none';
        }

        // Ensure modal is hidden on page load
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('quickLogoutModal');
            if (modal) {
                modal.style.display = 'none';
            }
        });

        // Add keyboard support (ESC key to close modal)
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const logoutModal = document.getElementById('quickLogoutModal');
                const editModal = document.getElementById('editAnnouncementModal');
                if (logoutModal && logoutModal.style.display === 'flex') {
                    closeQuickLogout();
                } else if (editModal && editModal.style.display === 'flex') {
                    closeEditAnnouncement();
                }
            }
        });

        // Edit announcement modal functions
        function showEditAnnouncement(announcementId, message, type) {
            const modal = document.getElementById('editAnnouncementModal');
            const messageField = document.getElementById('editAnnouncementMessage');
            const typeField = document.getElementById('editAnnouncementType');

            // Populate form with current values
            messageField.value = message;
            typeField.value = type;

            // Set the announcement ID for the form
            modal.dataset.announcementId = announcementId;

            // Update radio button selection
            document.querySelectorAll('input[name="editAnnouncementTypeRadio"]').forEach(radio => {
                radio.checked = radio.value === type;
            });

            // Update visual selection
            document.querySelectorAll('.edit-announcement-type-option .type-card').forEach(card => {
                card.style.borderColor = '#E5E7EB';
                card.style.backgroundColor = 'white';
            });

            const selectedCard = document.querySelector(`.edit-announcement-type-option .type-card[data-type="${type}"]`);
            if (selectedCard) {
                selectedCard.style.borderColor = '#3B82F6';
                selectedCard.style.backgroundColor = '#F0F9FF';
            }

            modal.style.display = 'flex';

            // Add click-outside-to-close functionality
            modal.onclick = function(event) {
                if (event.target === modal) {
                    closeEditAnnouncement();
                }
            };
        }

        function closeEditAnnouncement() {
            document.getElementById('editAnnouncementModal').style.display = 'none';
        }

        function quickLogoutAll() {
            // Set localStorage flag to notify other tabs
            localStorage.setItem('terpnotes_logout', 'true');
            // Redirect to logout route
            window.location.href = '/logout?all=true';
        }

        function quickLogoutThisTab() {
            // Close the tab immediately like Ctrl+W
            window.close();

            // If window.close() doesn't work, show a message
            setTimeout(() => {
                if (!window.closed) {
                    document.body.innerHTML = `
                        <div style="display: flex; justify-content: center; align-items: center; height: 100vh; background: #F9FAFB;">
                            <div style="text-align: center; padding: 2rem;">
                                <div style="width: 60px; height: 60px; margin: 0 auto 1rem; background: #F59E0B; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                    <svg width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 9V13M12 17H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                </div>
                                <h2 style="color: #1F2937; margin: 0 0 0.5rem 0;">Tab Close Blocked</h2>
                                <p style="color: #6B7280; margin: 0;">Please close this tab manually (Ctrl+W or Cmd+W). Your session remains active in other tabs.</p>
                            </div>
                        </div>
                    `;
                }
            }, 100);
        }

        // Listen for beforeunload to detect if this tab is being closed
        window.addEventListener('beforeunload', function() {
            // Clear any logout flags when tab is closing
            localStorage.removeItem('terpnotes_logout');
        });
    </script>
    <%- include('partials/footer') %>
    <%- include('partials/custom-alerts') %>

    <!-- Edit Announcement Modal -->
    <div id="editAnnouncementModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 10000; align-items: center; justify-content: center;">
        <div style="background: white; border-radius: 12px; padding: 2rem; max-width: 500px; width: 90%; box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);">
            <div style="display: flex; align-items: center; margin-bottom: 1.5rem;">
                <div style="width: 40px; height: 40px; margin-right: 1rem; background: #3B82F6; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M11 4H4C3.46957 4 2.96086 4.21071 2.58579 4.58579C2.21071 4.96086 2 5.46957 2 6V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H18C18.5304 22 19.0391 21.7893 19.4142 21.4142C19.7893 21.0391 20 20.5304 20 20V13M18.5 2.5C18.8978 2.10218 19.4374 1.87868 20 1.87868C20.5626 1.87868 21.1022 2.10218 21.5 2.5C21.8978 2.89782 22.1213 3.43739 22.1213 4C22.1213 4.56261 21.8978 5.10218 21.5 5.5L12 15L8 16L9 12L18.5 2.5Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h2 style="color: #1F2937; font-size: 1.5rem; font-weight: 700; margin: 0;">Edit Announcement</h2>
            </div>

            <form id="editAnnouncementForm">
                <div style="margin-bottom: 1.5rem;">
                    <label for="editAnnouncementMessage" style="display: block; font-weight: 600; color: #374151; margin-bottom: 0.5rem;">Message</label>
                    <textarea id="editAnnouncementMessage" required rows="3" placeholder="Enter announcement message..." style="width: 100%; padding: 0.75rem; border: 1px solid #D1D5DB; border-radius: 8px; font-size: 1rem; resize: vertical;"></textarea>
                </div>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; font-weight: 600; color: #374151; margin-bottom: 0.5rem;">Type</label>
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem;">
                        <label class="edit-announcement-type-option">
                            <input type="radio" name="editAnnouncementTypeRadio" value="info" style="display: none;">
                            <div class="type-card type-card-info" data-type="info" style="padding: 1rem; border: 2px solid #E5E7EB; border-radius: 8px; text-align: center; cursor: pointer; transition: all 0.2s ease;">
                                <div style="color: #3B82F6; font-weight: 600;">Info</div>
                            </div>
                        </label>
                        <label class="edit-announcement-type-option">
                            <input type="radio" name="editAnnouncementTypeRadio" value="warning" style="display: none;">
                            <div class="type-card type-card-warning" data-type="warning" style="padding: 1rem; border: 2px solid #E5E7EB; border-radius: 8px; text-align: center; cursor: pointer; transition: all 0.2s ease;">
                                <div style="color: #F59E0B; font-weight: 600;">Warning</div>
                            </div>
                        </label>
                        <label class="edit-announcement-type-option">
                            <input type="radio" name="editAnnouncementTypeRadio" value="success" style="display: none;">
                            <div class="type-card type-card-success" data-type="success" style="padding: 1rem; border: 2px solid #E5E7EB; border-radius: 8px; text-align: center; cursor: pointer; transition: all 0.2s ease;">
                                <div style="color: #10B981; font-weight: 600;">Success</div>
                            </div>
                        </label>
                    </div>
                    <input type="hidden" id="editAnnouncementType" value="info" required>
                </div>

                <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                    <button type="button" onclick="closeEditAnnouncement()" style="padding: 0.75rem 1.5rem; font-weight: 600; border-radius: 8px; background: white; color: #374151; border: 2px solid #D1D5DB; cursor: pointer; font-size: 1rem; transition: all 0.2s ease;">
                        Cancel
                    </button>
                    <button type="submit" style="padding: 0.75rem 1.5rem; font-weight: 600; border-radius: 8px; background: #3B82F6; color: white; border: none; cursor: pointer; font-size: 1rem; transition: all 0.2s ease;">
                        Update Announcement
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Quick Logout Modal -->
    <div id="quickLogoutModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 10000; align-items: center; justify-content: center;">
        <div style="background: white; border-radius: 12px; padding: 2rem; max-width: 400px; width: 90%; box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2); text-align: center;">
            <div style="width: 60px; height: 60px; margin: 0 auto 1rem; background: #FEF3C7; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                <svg width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H9M16 17L21 12L16 7M21 12H9" stroke="#F59E0B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
            <h2 style="color: #1F2937; font-size: 1.5rem; font-weight: 700; margin: 0 0 0.5rem 0;">Log Out</h2>
            <p style="color: #6B7280; font-size: 1rem; margin: 0 0 1.5rem 0;">How would you like to log out?</p>

            <div style="display: flex; flex-direction: column; gap: 0.75rem; margin-bottom: 1.5rem;">
                <button onclick="quickLogoutAll()" style="padding: 0.75rem 1.5rem; font-weight: 600; border-radius: 8px; background: #DC2626; color: white; border: none; cursor: pointer; font-size: 1rem; transition: all 0.2s ease;" onmouseover="this.style.background='#B91C1C'" onmouseout="this.style.background='#DC2626'">
                    Log Out of All Tabs
                </button>
                <button onclick="quickLogoutThisTab()" style="padding: 0.75rem 1.5rem; font-weight: 600; border-radius: 8px; background: white; color: #374151; border: 2px solid #D1D5DB; cursor: pointer; font-size: 1rem; transition: all 0.2s ease;" onmouseover="this.style.borderColor='#9CA3AF'" onmouseout="this.style.borderColor='#D1D5DB'">
                    Log Out of This Tab Only
                </button>
            </div>

            <button onclick="closeQuickLogout()" style="color: #6B7280; text-decoration: none; font-size: 0.9rem; background: none; border: none; cursor: pointer;">
                Cancel
            </button>
        </div>
    </div>
</body>

</html>
